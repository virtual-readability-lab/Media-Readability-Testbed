<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.3">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'Your Test ID': '', 'Full Name': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['stimuli/teaching_link.jpg', 'stimuli/teaching_link.xlsx', 'stimuli/link_sheets/article1_Georgia_links.xlsx', 'stimuli/link_sheets/article1_Roboto_links.xlsx', 'stimuli/link_sheets/article1_Times_links.xlsx', 'stimuli/link_sheets/article2_Georgia_links.xlsx', 'stimuli/link_sheets/article2_Roboto_links.xlsx', 'stimuli/link_sheets/article2_Times_links.xlsx', 'stimuli/link_sheets/article3_Georgia_links.xlsx', 'stimuli/link_sheets/article3_Roboto_links.xlsx', 'stimuli/link_sheets/article3_Times_links.xlsx', 'stimuli/link_sheets/article4_Georgia_links.xlsx', 'stimuli/link_sheets/article4_Roboto_links.xlsx', 'stimuli/link_sheets/article4_Times_links.xlsx', 'stimuli/link_sheets/article5_Georgia_links.xlsx', 'stimuli/link_sheets/article5_Roboto_links.xlsx', 'stimuli/link_sheets/article5_Times_links.xlsx', 'stimuli/link_sheets/article6_Georgia_links.xlsx', 'stimuli/link_sheets/article6_Roboto_links.xlsx', 'stimuli/link_sheets/article6_Times_links.xlsx', 'stimuli/link_sheets/article7_Open Sans_links.xlsx', 'stimuli/article_images/article1_Georgia_Link.jpg', 'stimuli/article_images/article1_Georgia_NoLink.jpg', 'stimuli/article_images/article1_Roboto_Link.jpg', 'stimuli/article_images/article1_Roboto_NoLink.jpg', 'stimuli/article_images/article1_Times_Link.jpg', 'stimuli/article_images/article1_Times_NoLink.jpg', 'stimuli/article_images/article2_Georgia_Link.jpg', 'stimuli/article_images/article2_Georgia_NoLink.jpg', 'stimuli/article_images/article2_Roboto_Link.jpg', 'stimuli/article_images/article2_Roboto_NoLink.jpg', 'stimuli/article_images/article2_Times_Link.jpg', 'stimuli/article_images/article2_Times_NoLink.jpg', 'stimuli/article_images/article3_Georgia_Link.jpg', 'stimuli/article_images/article3_Georgia_NoLink.jpg', 'stimuli/article_images/article3_Roboto_Link.jpg', 'stimuli/article_images/article3_Roboto_NoLink.jpg', 'stimuli/article_images/article3_Times_Link.jpg', 'stimuli/article_images/article3_Times_NoLink.jpg', 'stimuli/article_images/article4_Georgia_Link.jpg', 'stimuli/article_images/article4_Georgia_NoLink.jpg', 'stimuli/article_images/article4_Roboto_Link.jpg', 'stimuli/article_images/article4_Roboto_NoLink.jpg', 'stimuli/article_images/article4_Times_Link.jpg', 'stimuli/article_images/article4_Times_NoLink.jpg', 'stimuli/article_images/article5_Georgia_Link.jpg', 'stimuli/article_images/article5_Georgia_NoLink.jpg', 'stimuli/article_images/article5_Roboto_Link.jpg', 'stimuli/article_images/article5_Roboto_NoLink.jpg', 'stimuli/article_images/article5_Times_Link.jpg', 'stimuli/article_images/article5_Times_NoLink.jpg', 'stimuli/article_images/article6_Georgia_Link.jpg', 'stimuli/article_images/article6_Georgia_NoLink.jpg', 'stimuli/article_images/article6_Roboto_Link.jpg', 'stimuli/article_images/article6_Roboto_NoLink.jpg', 'stimuli/article_images/article6_Times_Link.jpg', 'stimuli/article_images/article6_Times_NoLink.jpg', 'stimuli/article_images/article7_Open Sans_Link.jpg', 'stimuli/article_images/article7_Open Sans_NoLink.jpg', 'stimuli/memory/memory_stimulus_sheet.xlsx', 'stimuli/memory/no.jpg', 'stimuli/memory/yes.jpg', 'stimuli/life_consent.png', 'stimuli/prolific_consent.png', 'stimuli/screening_images/snellen_numbered.png', 'bank-1300155_640.png', 'stimuli/screening_images/pelli_robson_numbered.jpg', 'stimuli/popup_images/article1_popup1_Georgia.jpg', 'stimuli/popup_images/article1_popup1_Roboto.jpg', 'stimuli/popup_images/article1_popup1_Times.jpg', 'stimuli/popup_images/article1_popup2_Georgia.jpg', 'stimuli/popup_images/article1_popup2_Roboto.jpg', 'stimuli/popup_images/article1_popup2_Times.jpg', 'stimuli/popup_images/article1_popup3_Georgia.jpg', 'stimuli/popup_images/article1_popup3_Roboto.jpg', 'stimuli/popup_images/article1_popup3_Times.jpg', 'stimuli/popup_images/article1_popup4_Georgia.jpg', 'stimuli/popup_images/article1_popup4_Roboto.jpg', 'stimuli/popup_images/article1_popup4_Times.jpg', 'stimuli/popup_images/article1_popup5_Georgia.jpg', 'stimuli/popup_images/article1_popup5_Roboto.jpg', 'stimuli/popup_images/article1_popup5_Times.jpg', 'stimuli/popup_images/article1_popup6_Georgia.jpg', 'stimuli/popup_images/article1_popup6_Roboto.jpg', 'stimuli/popup_images/article1_popup6_Times.jpg', 'stimuli/popup_images/article1_popup7_Georgia.jpg', 'stimuli/popup_images/article1_popup7_Roboto.jpg', 'stimuli/popup_images/article1_popup7_Times.jpg', 'stimuli/popup_images/article2_popup1_Georgia.jpg', 'stimuli/popup_images/article2_popup1_Roboto.jpg', 'stimuli/popup_images/article2_popup1_Times.jpg', 'stimuli/popup_images/article2_popup2_Georgia.jpg', 'stimuli/popup_images/article2_popup2_Roboto.jpg', 'stimuli/popup_images/article2_popup2_Times.jpg', 'stimuli/popup_images/article2_popup3_Georgia.jpg', 'stimuli/popup_images/article2_popup3_Roboto.jpg', 'stimuli/popup_images/article2_popup3_Times.jpg', 'stimuli/popup_images/article2_popup4_Georgia.jpg', 'stimuli/popup_images/article2_popup4_Roboto.jpg', 'stimuli/popup_images/article2_popup4_Times.jpg', 'stimuli/popup_images/article2_popup5_Georgia.jpg', 'stimuli/popup_images/article2_popup5_Roboto.jpg', 'stimuli/popup_images/article2_popup5_Times.jpg', 'stimuli/popup_images/article2_popup6_Georgia.jpg', 'stimuli/popup_images/article2_popup6_Roboto.jpg', 'stimuli/popup_images/article2_popup6_Times.jpg', 'stimuli/popup_images/article3_popup1_Georgia.jpg', 'stimuli/popup_images/article3_popup1_Roboto.jpg', 'stimuli/popup_images/article3_popup1_Times.jpg', 'stimuli/popup_images/article3_popup2_Georgia.jpg', 'stimuli/popup_images/article3_popup2_Roboto.jpg', 'stimuli/popup_images/article3_popup2_Times.jpg', 'stimuli/popup_images/article3_popup3_Georgia.jpg', 'stimuli/popup_images/article3_popup3_Roboto.jpg', 'stimuli/popup_images/article3_popup3_Times.jpg', 'stimuli/popup_images/article3_popup4_Georgia.jpg', 'stimuli/popup_images/article3_popup4_Roboto.jpg', 'stimuli/popup_images/article3_popup4_Times.jpg', 'stimuli/popup_images/article3_popup5_Georgia.jpg', 'stimuli/popup_images/article3_popup5_Roboto.jpg', 'stimuli/popup_images/article3_popup5_Times.jpg', 'stimuli/popup_images/article4_popup1_Georgia.jpg', 'stimuli/popup_images/article4_popup1_Roboto.jpg', 'stimuli/popup_images/article4_popup1_Times.jpg', 'stimuli/popup_images/article4_popup2_Georgia.jpg', 'stimuli/popup_images/article4_popup2_Roboto.jpg', 'stimuli/popup_images/article4_popup2_Times.jpg', 'stimuli/popup_images/article4_popup3_Georgia.jpg', 'stimuli/popup_images/article4_popup3_Roboto.jpg', 'stimuli/popup_images/article4_popup3_Times.jpg', 'stimuli/popup_images/article4_popup4_Georgia.jpg', 'stimuli/popup_images/article4_popup4_Roboto.jpg', 'stimuli/popup_images/article4_popup4_Times.jpg', 'stimuli/popup_images/article4_popup5_Georgia.jpg', 'stimuli/popup_images/article4_popup5_Roboto.jpg', 'stimuli/popup_images/article4_popup5_Times.jpg', 'stimuli/popup_images/article5_popup1_Georgia.jpg', 'stimuli/popup_images/article5_popup1_Roboto.jpg', 'stimuli/popup_images/article5_popup1_Times.jpg', 'stimuli/popup_images/article5_popup2_Georgia.jpg', 'stimuli/popup_images/article5_popup2_Roboto.jpg', 'stimuli/popup_images/article5_popup2_Times.jpg', 'stimuli/popup_images/article5_popup3_Georgia.jpg', 'stimuli/popup_images/article5_popup3_Roboto.jpg', 'stimuli/popup_images/article5_popup3_Times.jpg', 'stimuli/popup_images/article5_popup4_Georgia.jpg', 'stimuli/popup_images/article5_popup4_Roboto.jpg', 'stimuli/popup_images/article5_popup4_Times.jpg', 'stimuli/popup_images/article5_popup5_Georgia.jpg', 'stimuli/popup_images/article5_popup5_Roboto.jpg', 'stimuli/popup_images/article5_popup5_Times.jpg', 'stimuli/popup_images/article6_popup1_Georgia.jpg', 'stimuli/popup_images/article6_popup1_Roboto.jpg', 'stimuli/popup_images/article6_popup1_Times.jpg', 'stimuli/popup_images/article6_popup2_Georgia.jpg', 'stimuli/popup_images/article6_popup2_Roboto.jpg', 'stimuli/popup_images/article6_popup2_Times.jpg', 'stimuli/popup_images/article6_popup3_Georgia.jpg', 'stimuli/popup_images/article6_popup3_Roboto.jpg', 'stimuli/popup_images/article6_popup3_Times.jpg', 'stimuli/popup_images/article6_popup4_Georgia.jpg', 'stimuli/popup_images/article6_popup4_Roboto.jpg', 'stimuli/popup_images/article6_popup4_Times.jpg', 'stimuli/popup_images/article6_popup5_Georgia.jpg', 'stimuli/popup_images/article6_popup5_Roboto.jpg', 'stimuli/popup_images/article6_popup5_Times.jpg', 'stimuli/popup_images/article7_popup1_Open Sans.jpg', 'stimuli/popup_images/article7_popup2_Open Sans.jpg', 'stimuli/popup_images/article7_popup3_Open Sans.jpg', 'next_button.png', 'back_button.jpg', 'back_text.jpg', 'close_button.jpg', 'stimuli/stimulus_set.xlsx', 'stimuli/demographics.xlsx', 'blocks/blocks_1.xlsx', 'bank-1300155_640.png']" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="pix" valType="str" updates="None" name="Units"/>
    <Param val="2022.2.3" valType="str" updates="None" name="Use version"/>
    <Param val="[1680, 1050]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="0.4275, 0.4275, 0.4275" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="article_study_memory" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="instructions_questions">
      <TextComponent name="text_2">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You've read the article.&amp;#10;&amp;#10;Having completed the article, the next step involves addressing multiple-choice questions related to its content. Please select the answer that aligns best with your understanding of the article in the upcoming section.&amp;#10;&amp;#10;Please press the button on the right hand corner to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_5">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="text_2.setAlignHoriz(&quot;left&quot;);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_questionInstructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_questionInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseQuestionInstructions">
        <Param val="nextButton_questionInstructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseQuestionInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="setBlockParameters">
      <CodeComponent name="blockParameters">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// block information (get from the blocks file) //&amp;#10;&amp;#10;// select the stimulus set file based on counterbalancing&amp;#10;blockFileName                   = thisBlock['stimulus_file']   // name of the excel file that contains stim set for the block&amp;#10;stimulus_file_counterbalanced   = blockFileName + &quot;.xlsx&quot;&amp;#10;dotIndex                        = stimulus_file_counterbalanced.indexOf(&quot;.&quot;);&amp;#10;blockName                       = stimulus_file_counterbalanced.slice(0, (dotIndex - 1)); // remove .xlsx from the file name&amp;#10;blockName                       = blockName.substring(8)                  // remove &quot;stimuli/&quot; text from the block name&amp;#10;blockName                       = &quot;article_trials&quot; // add counterbalance condition to the end of block name&amp;#10;&amp;#10;console.log({blockName, stimulus_file_counterbalanced, thisBlock})&amp;#10;&amp;#10;// practice and test trials, fonts and their names (get from the blocks file)&amp;#10;practiceCount                   = thisBlock['practiceTrials']; // how many practice trials&amp;#10;testCount                       = thisBlock['testTrials'];     // how many test trials&amp;#10;practiceFonts                   = thisBlock['practiceFonts']; // font is used in practice&amp;#10;practiceSpacings                = thisBlock['practiceSpacings']&amp;#10;blockFonts                      = thisBlock['testFonts'];  // fonts used in this block&amp;#10;blockSpacings                   = thisBlock['testSpacings']; // spacing levels used in this block&amp;#10;&amp;#10;/* Separate fonts and spacings, then count  */&amp;#10;blockFonts                      = blockFonts.split(&quot;;&quot;)&amp;#10;blockSpacings                   = blockSpacings.split(&quot;;&quot;)&amp;#10;blockFontCount                  = blockFonts.length;&amp;#10;blockSpacingCount               = blockSpacings.length;&amp;#10;&amp;#10;// add link conditions for the article study&amp;#10;linkLabels                      = ['Link','NoLink']&amp;#10;practiceLink                    = ['Link']&amp;#10;linkCount                       = linkLabels.length&amp;#10;&amp;#10;repFontTrials                   = testCount / (blockFontCount * linkCount); // these two have to be divisible&amp;#10;&amp;#10;// reproduce block fonts in an array to match the trial count &amp;#10;// e.g. blockFonts = [&quot;arial&quot;, &quot;helvetica&quot;], blockSpacings = [&quot;0&quot;,&quot;0.05&quot;], testCount = 4,repFontTrials = 1&amp;#10;// new block font variable: blockFonts = [&quot;arial&quot;, &quot;helvetica&quot;, &quot;arial&quot;, &quot;helvetica&quot;];&amp;#10;blockFontsForDisplay                = [];&amp;#10;blockConditionsForDisplay_temp      = []; // parameters of a trial is stored in this variable - only in loop: temp - &amp;#10;blockConditionsForRegistry_temp     = []; // parameters are registered as strings for registering fit-clashes - only in loop: temp - &amp;#10;&amp;#10;/* create a dictionary for registering most accurate and fastest conditions */&amp;#10;getFitClash_all                 = {}; // fit clash for the combination of conditions&amp;#10;getFitClash_spacing             = {}; // fit-clash for only spacings&amp;#10;getFitClash_font                = {}; // fit clash for only fonts&amp;#10;&amp;#10;iteration = -1&amp;#10;&amp;#10;&amp;#10;for (var i = 0; i &lt; blockFontCount; i++) {&amp;#10;&amp;#10;    // initialize fit-clash storage only for fonts&amp;#10;    getFitClash_font[blockFonts[i]] = { &quot;setid&quot;: [], &quot;wpm&quot;: [], &quot;accuracy&quot;: [] };&amp;#10;    //console.log(&quot;getFitClash_font[&quot; + blockFonts[i] + &quot;]:&quot;, getFitClash_font[blockFonts[i]]);&amp;#10;&amp;#10;    for (var j = 0; j &lt; linkCount; j++) {&amp;#10;        iteration               = iteration+1&amp;#10;        if (i === 0) {&amp;#10;            // initialize fit-clash storage only for link condition&amp;#10;            // do not repeat this for other font iterations, we only need one of each spacing&amp;#10;            getFitClash_spacing[linkLabels[j]] = { &quot;setid&quot;: [], &quot;wpm&quot;: [], &quot;accuracy&quot;: [] };&amp;#10;            //console.log(&quot;getFitClash_spacing[&quot; + spacingLabels[blockSpacings[j]] + &quot;]:&quot;, getFitClash_spacing[spacingLabels[blockSpacings[j]]]);&amp;#10;        }&amp;#10;&amp;#10;        // register all possible condition parameters both as&amp;#10;        // separate parameters, and as labels that describe the interaction&amp;#10;        // of these parameters&amp;#10;        //&amp;#10;        // parameters = [&quot;Roboto Flex&quot;,&quot;0.05&quot;];&amp;#10;        // description = [&quot;Roboto Flex_sp3&quot;]; (assuming spacing has three levels [-0.05,0,0,05],&amp;#10;        // example would be the third level of the spacing condition: sp3&amp;#10;        var currentConditionText        = blockFonts[i] + '_' + linkLabels[blockSpacings[j]];&amp;#10;        var currentConditionParameters  = [blockFonts[i], linkLabels[j]];&amp;#10;        &amp;#10;        blockConditionsForRegistry_temp.push(currentConditionText);&amp;#10;        blockConditionsForDisplay_temp.push(currentConditionParameters);&amp;#10;        // initialize fit-clash storage for interactions of font and spacing conditions&amp;#10;        getFitClash_all[currentConditionText] = { &quot;setid&quot;: [], &quot;wpm&quot;: [], &quot;accuracy&quot;: [] };&amp;#10;        //console.log(&quot;getFitClash_all[&quot; + currentConditionText + &quot;]:&quot;, getFitClash_all[currentConditionText]);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;console.log({blockConditionsForRegistry_temp, blockConditionsForDisplay_temp})&amp;#10;&amp;#10;// reproduce conditions lists to match test trial count&amp;#10;// if there are 6 test trials, 1 font, and 3 spacings&amp;#10;//      • 1 x 3 has to be repeated twice to match test count&amp;#10;//      • conds = ['roboto_sp1','roboto_sp2','roboto_sp3']&amp;#10;//      • reproduced_conds =  ['roboto_sp1','roboto_sp2','roboto_sp3','roboto_sp1','roboto_sp2','roboto_sp3']&amp;#10;&amp;#10;// counterbalance order of font weights&amp;#10;// [&quot;arial&quot;, &quot;helvetica&quot;, &quot;arial&quot;, &quot;helvetica&quot;]&amp;#10;// [&quot;arial&quot;, &quot;arial&quot;, &quot;helvetica&quot;, &quot;helvetica&quot;] = (group 'A') = (PID = 0)&amp;#10;// [&quot;arial&quot;,&quot;helvetica&quot;, &quot;helvetica&quot;, &quot;arial&quot;] = (group 'B') = (PID = 1) etc. &amp;#10;//if (repFontTrials &gt; 1){&amp;#10;blockConditionsForDisplay = [] // parameters of a trial is stored in this variable&amp;#10;blockConditionsForRegistry = []  // parameters are registered as strings for registering fit-clashes&amp;#10;for (var i = 0; i &lt; repFontTrials; i++) {&amp;#10;    &amp;#10;    if (randomization_scheme === 'randomized') { &amp;#10;        // randomize the order of conditions &amp;#10;        blockConditionsForDisplay = blockConditionsForDisplay.concat(randomArrayShuffle(blockConditionsForDisplay_temp));&amp;#10;        blockConditionsForRegistry = blockConditionsForRegistry.concat(randomArrayShuffle(blockConditionsForRegistry_temp));        &amp;#10;        } else if (randomization_scheme  === 'counterbalanced'){ &amp;#10;            // apply latin square counterbalancing to conditions&amp;#10;                            switch (cb_index) {&amp;#10;                  case 0:&amp;#10;                    blockConditionsForDisplay = [['Times','Link'], ['Times','NoLink'], ['Roboto','Link'], ['Roboto','NoLink'], ['Georgia','Link'], ['Georgia','NoLink']]&amp;#10;                    break;&amp;#10;                  case 1:&amp;#10;                    blockConditionsForDisplay = [['Times','NoLink'], ['Times','Link'], ['Roboto','NoLink'], ['Roboto','Link'], ['Georgia','NoLink'], ['Georgia','Link']]&amp;#10;                    break;&amp;#10;                  case 2:&amp;#10;                    blockConditionsForDisplay = [['Georgia','Link'],  ['Georgia','NoLink'],  ['Times','NoLink'],['Times','Link'], ['Roboto','Link'], ['Roboto','NoLink']]&amp;#10;                    break;&amp;#10;                  case 3:&amp;#10;                    blockConditionsForDisplay = [['Georgia','NoLink'],['Georgia','Link'], ['Times','Link'], ['Times','NoLink'],  ['Roboto','NoLink'], ['Roboto','Link']]&amp;#10;                    break;&amp;#10;                  case 4:&amp;#10;                    blockConditionsForDisplay = [['Roboto','Link'], ['Roboto','NoLink'],['Georgia','Link'], ['Georgia','NoLink'],  ['Times','NoLink'],['Times','Link' ]]&amp;#10;                    break;&amp;#10;                  case 5:&amp;#10;                    blockConditionsForDisplay = [['Roboto','NoLink'],['Roboto','Link'], ['Georgia','NoLink'],['Georgia','Link'],['Times','Link'], ['Times','NoLink']]&amp;#10;                    break;&amp;#10;                  default:&amp;#10;                    throw new Error(`Got invalid option ${cb_index}`);&amp;#10;                }&amp;#10;//            blockConditionsForDisplay = blockConditionsForDisplay.concat(balancedLatinSquare(blockConditionsForDisplay_temp,cb_index));&amp;#10;            blockConditionsForRegistry = blockConditionsForRegistry.concat(balancedLatinSquare(blockConditionsForRegistry_temp,cb_index));&amp;#10;&amp;#10;            }&amp;#10;        &amp;#10;}&amp;#10;&amp;#10;console.log({blockConditionsForDisplay, blockConditionsForRegistry})&amp;#10;&amp;#10;if (practiceCount &gt;= 1) {&amp;#10;    // if there is a practice trial&amp;#10;    //console.log('practiceSpacings: ',practiceSpacings)&amp;#10;    //console.log('practiceSpacings type: ',typeof practiceSpacings)&amp;#10;    //console.log('spacingLabels: ',spacingLabels)&amp;#10;    //console.log('spacingLabels['+practiceSpacings.toString()+']: ',spacingLabels[practiceSpacings.toString()])&amp;#10;&amp;#10;    // add the practice font to the beginning of the counterbalanced font order&amp;#10;    blockConditionsForDisplay.unshift([practiceFonts,practiceLink[0]]);&amp;#10;    blockConditionsForRegistry.unshift(practiceFonts+&quot;_&quot;+practiceLink[0])&amp;#10;&amp;#10;    // counterbalance order of passage sets&amp;#10;    passageSetIndices = range(1,testCount);&amp;#10;    passageSetOrder   = passageSetIndices //randomArrayShuffle(passageSetIndices)&amp;#10;//    if (randomization_scheme === 'randomized') { &amp;#10;//        // randomize passage order&amp;#10;//        passageSetOrder   = randomArrayShuffle(passageSetIndices)&amp;#10;//        } else if (randomization_scheme  === 'counterbalanced'){ &amp;#10;//            // apply latin square counterbalancing to passage order&amp;#10;//            passageSetOrder   = balancedLatinSquare(passageSetIndices,PID);&amp;#10;//            } &amp;#10;    // always show the practice trial (0 index) the first, so we concatenate the latin-square&amp;#10;    // balanced/randomized array to 0. &amp;#10;    passageSetOrder.unshift(0);&amp;#10;&amp;#10;    } else {        &amp;#10;        // Order passage sets according to counterbalance groups&amp;#10;        // counterbalance order of passage sets&amp;#10;        passageSetIndices = range(0,testCount);&amp;#10;        passageSetOrder   = randomArrayShuffle(passageSetIndices)&amp;#10;//    if (randomization_scheme === 'randomized') { &amp;#10;//        // randomize passage order&amp;#10;//        passageSetOrder   = randomArrayShuffle(passageSetIndices)&amp;#10;//        } else if (randomization_scheme  === 'counterbalanced'){ &amp;#10;//            // apply latin square counterbalancing to passage order&amp;#10;//            passageSetOrder   = balancedLatinSquare(passageSetIndices,cb_index);&amp;#10;//            } &amp;#10;&amp;#10;    }&amp;#10;// initiate/reset trial iteration index&amp;#10;trialIteration = -1;&amp;#10;&amp;#10;// block iteration index&amp;#10;blockIteration = thisBlock.thisN;&amp;#10;&amp;#10;&amp;#10;console.log('finished block preparation')&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockParameters" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="initializeVariables"/>
    <Routine name="initialize">
      <CodeComponent name="functions_fitClash">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// FUNCTIONS FOR FIT AND CLASH ESTIMATIONS //&amp;#10;&amp;#10;// you'll notice that each of the functions have '2' in their name.&amp;#10;// Reason is that we need to duplicate these into a new name to be&amp;#10;// able to use them in other components. Otherwise Psychopy does not&amp;#10;// recognize your functions. &amp;#10;&amp;#10;function getFit2(ftArray,field){&amp;#10;&amp;#10;    // field is the key in which we make the first comparison: e.g. &quot;accuracy&quot;.&amp;#10;    var conditions = Object.keys(ftArray)&amp;#10;    var fitCondition = conditions[0] // fit condition by acc &amp;#10;    var fitAcc = ftArray[fitCondition][field]; // fit acc score&amp;#10;    var fitWpm = ftArray[fitCondition][&quot;wpm&quot;]; // fit by acc wpm &amp;#10;    &amp;#10;    console.log('fit array: ',ftArray)&amp;#10;    &amp;#10;    for (var keyi = 1; keyi &lt; conditions.length; keyi++){&amp;#10;        // starts from the second key&amp;#10;        if (ftArray[conditions[keyi]][field]  &lt; fitAcc) {&amp;#10;            // if remaining key's accuracy smaller than the first, stop loop, get first one as max&amp;#10;            break;&amp;#10;        } else if (ftArray[conditions[keyi]][&quot;wpm&quot;]&gt;fitWpm){           &amp;#10;             // if remaining keys have the same accuracy, compare if wpms are the same&amp;#10;                fitWpm = ftArray[conditions[keyi]][&quot;wpm&quot;]&amp;#10;                fitCondition = conditions[keyi]&amp;#10;            }&amp;#10;        &amp;#10;    }&amp;#10;    return [fitCondition,fitWpm,fitAcc]&amp;#10;}&amp;#10;&amp;#10;getFit = getFit2&amp;#10;      &amp;#10;function getClash2(ftArray,field){&amp;#10;&amp;#10;    // field is the key in which we make the first comparison: e.g. &quot;accuracy&quot;.&amp;#10;    var conditions = Object.keys(ftArray)&amp;#10;    var clashCondition = conditions[conditions.length-1] // clash condition by acc &amp;#10;    var clashAcc = ftArray[clashCondition][field]; // clash acc score&amp;#10;    var clashWpm = ftArray[clashCondition][&quot;wpm&quot;]; // clash by acc wpm &amp;#10;    &amp;#10;    console.log('clash array: ',ftArray)&amp;#10;    &amp;#10;    for (var keyi = conditions.length-1; keyi &gt; -1; keyi--){&amp;#10;        // starts from the last key and go towards the first key &amp;#10;        // because these are ordered from highest to lowest accuracy &amp;#10;&amp;#10;        &amp;#10;        if (ftArray[conditions[keyi]][field]  &gt; clashAcc) {&amp;#10;            console.log('clash curr key: ',conditions[keyi])&amp;#10;            console.log('clash curr acc: ',ftArray[conditions[keyi]][field])&amp;#10;            // if remaining key's accuracy smaller than the first, stop loop, get first one as max&amp;#10;            break;&amp;#10;        } else if (ftArray[conditions[keyi]][&quot;wpm&quot;]&lt;clashWpm){           &amp;#10;             // if remaining keys have the same accuracy, compare if wpms are the same&amp;#10;                clashWpm = ftArray[conditions[keyi]][&quot;wpm&quot;]&amp;#10;                clashCondition = conditions[keyi]&amp;#10;            }&amp;#10;        &amp;#10;    }&amp;#10;&amp;#10;    return [clashCondition,clashWpm,clashAcc]&amp;#10;&amp;#10;}&amp;#10;&amp;#10;getClash = getClash2&amp;#10;&amp;#10;&amp;#10;function sortObjects2(obj, num,field) {&amp;#10;    const requiredObj = {};&amp;#10;    if(num &gt; Object.keys(obj).length){&amp;#10;       return false;&amp;#10;    };&amp;#10;    Object.keys(obj).sort((a, b) =&gt; obj[b][field] - obj[a][field]).forEach((key, ind) =&gt;&amp;#10;    {&amp;#10;       if(ind &lt; num){&amp;#10;          requiredObj[key] = obj[key];&amp;#10;       }&amp;#10;    });&amp;#10;    return requiredObj;&amp;#10; };&amp;#10;&amp;#10;sortObjects = sortObjects2&amp;#10;&amp;#10;function loopAverage2(ftArray, condArray){&amp;#10;    // ftArray =  fitClashArray (e.g. [[getFitClash_all] [getFitClash_spacing] [getFitClash_font]])&amp;#10;    &amp;#10;    &amp;#10;    // get averages of wpm and acc for all fit-clash objects (all, spacing, font etc.) &amp;#10;    for (var obji = 0; obji &lt; ftArray.length; obji++){&amp;#10;        // loop over fit-clash objects &amp;#10;        var currObj = ftArray[obji]&amp;#10;        var currConds = Object.keys(currObj)&amp;#10;        console.log('currObj: ',currObj)&amp;#10;        console.log('currConds: ',currConds)        &amp;#10;        console.log('averaging array: ',obji)&amp;#10;        &amp;#10;        // get avg of wpm and acc for this object (obji) and this condition (condi; e.g. flex_sp1, &quot;-0.05&quot;,&quot;flex&quot;)&amp;#10;        for (var condi = 0; condi &lt;currConds.length; condi++) {&amp;#10;            console.log('averaging condition: ',currConds[condi])&amp;#10;            currObj[currConds[condi]].wpm = Math.round(getAverage(currObj[currConds[condi]].wpm)*1000)/1000&amp;#10;&amp;#10;            currObj[currConds[condi]].accuracy = Math.round(getAverage(currObj[currConds[condi]].accuracy)*1000)/1000&amp;#10;&amp;#10;        }&amp;#10;        ftArray[obji] = currObj&amp;#10;    }&amp;#10;&amp;#10;    return ftArray&amp;#10;}&amp;#10;&amp;#10;loopAverage = loopAverage2&amp;#10;&amp;#10;function getAverage2(myNums){&amp;#10;&amp;#10;    // create a variable for the sum and initialize it&amp;#10;    let sum = 0;&amp;#10;&amp;#10;    // iterate over each item in the array&amp;#10;    for (let i = 0; i &lt; myNums.length; i++ ) {&amp;#10;    sum += myNums[i];&amp;#10;    }&amp;#10;    var result = sum / myNums.length&amp;#10;    return result&amp;#10;}&amp;#10;&amp;#10;getAverage = getAverage2&amp;#10;&amp;#10;function isKeyPressed2(keyEvents, key) {&amp;#10;return keyEvents.some(event =&gt; event.pigletKey === key &amp;&amp; event.status === core.Keyboard.KeyStatus.KEY_DOWN)&amp;#10;}&amp;#10;&amp;#10;isKeyPressed = isKeyPressed2" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="functions_fitClash" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="functions">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// FUNCTIONS //&amp;#10;&amp;#10;// you'll notice that each of the functions have '2' in their name.&amp;#10;// Reason is that we need to duplicate these into a new name to be&amp;#10;// able to use them in other components. Otherwise Psychopy does not&amp;#10;// recognize your functions. &amp;#10;// FUNCTIONS //&amp;#10;&amp;#10;// you'll notice that each of the functions have '2' in their name.&amp;#10;// Reason is that we need to duplicate these into a new name to be&amp;#10;// able to use them in other components. Otherwise Psychopy does not&amp;#10;// recognize your functions. &amp;#10;&amp;#10;// having multiple values in excel turns the coordinate values into strings&amp;#10;// this function transforms strings into numbers &amp;#10;&amp;#10;&amp;#10;function convertToNumber2(yourObject,imagesize,vsize,y_scale){&amp;#10;    var currentKeys = Object.keys(yourObject)&amp;#10;    console.log('all keys of list loop', currentKeys)&amp;#10;    // loop over all keys (except the first one which is &quot;text&quot;)&amp;#10;    for (var k = 0; k &lt; currentKeys.length; k++){&amp;#10;        var key             = currentKeys[k]&amp;#10;        var keyValue        = yourObject[key]&amp;#10;        // console.log('current value: ',keyValue)&amp;#10;        // console.log('current value type: ',typeof(keyValue))&amp;#10;        var isString = typeof(keyValue) === &quot;string&quot;&amp;#10;        console.log('current value: ',keyValue)&amp;#10;        console.log('is value string?:', isString)&amp;#10;        if (isString){            &amp;#10;            var isBracketText = keyValue.includes('[')&amp;#10;            if (isBracketText){&amp;#10;                keyValue = keyValue.replace('[','')&amp;#10;                keyValue = keyValue.replace(']','')            &amp;#10;                keyValue = keyValue.split(',')&amp;#10;                console.log('key value separated',keyValue)&amp;#10;            }&amp;#10;        }&amp;#10;&amp;#10;        var keyValueLength  = keyValue.length&amp;#10;        // console.log('key, keyvalue, keylength', key,keyValue,keyValueLength)&amp;#10;        if (key === &quot;text&quot;){&amp;#10;            console.log('skipped text')&amp;#10;            continue&amp;#10;            }&amp;#10;        console.log('current key:', key)&amp;#10;        // if only one value  in the key&amp;#10;        if (keyValueLength === 1 || keyValueLength === undefined){&amp;#10;&amp;#10;            keyValue = Number(keyValue)*y_scale&amp;#10;            console.log('1L - key value converted:', keyValue)&amp;#10;            // process the values for screen alignment&amp;#10;            if (key === &quot;x&quot;){&amp;#10;                keyValue = keyValue - (imagesize[0]/2)&amp;#10;                } else if (key === &quot;y&quot; || key.includes(&quot;_Y&quot;)){&amp;#10;                    keyValue = vsize/2 - keyValue &amp;#10;                    }&amp;#10;            console.log('1L - key value processed:', keyValue)&amp;#10;            // transform into float&amp;#10;            // register backY if this is font dependent text height key &amp;#10;            if (key.includes(&quot;_Y&quot;)){&amp;#10;                console.log('backy time')&amp;#10;                yourObject[&quot;backY&quot;] = keyValue&amp;#10;&amp;#10;                } else {&amp;#10;                    console.log('NO back Y')&amp;#10;                    yourObject[key] = keyValue&amp;#10;                    &amp;#10;                }&amp;#10;            &amp;#10;            &amp;#10;            // if multiple values in the key&amp;#10;            } else if (keyValueLength &gt; 1){&amp;#10;                var tempList = []&amp;#10;                console.log('list values:', keyValue)&amp;#10;                for (var ind = 0; ind &lt; keyValueLength; ind++){&amp;#10;                    // turn all values into float`&amp;#10;                    var currentValue = Number(keyValue[ind])*y_scale&amp;#10;                    console.log('2L - key value converted:', currentValue)&amp;#10;            &amp;#10;            &amp;#10;                    // process the values for screen alignment&amp;#10;                    if (key === &quot;x&quot;){&amp;#10;                        currentValue = currentValue - (imagesize[0]/2)&amp;#10;                        } else if (key === &quot;y&quot;){&amp;#10;                            currentValue = vsize/2 - currentValue         &amp;#10;                            }&amp;#10;                    console.log('2L - key value processed:', currentValue)&amp;#10;                    tempList.push(currentValue)&amp;#10;                    &amp;#10;                    }&amp;#10;                // register numeric list into key&amp;#10;                console.log('final list:', tempList)&amp;#10;                yourObject[key] = tempList&amp;#10;                &amp;#10;                }        &amp;#10;        }&amp;#10;&amp;#10;        return yourObject  &amp;#10;    &amp;#10;    }&amp;#10;&amp;#10;&amp;#10;convertToNumber = convertToNumber2&amp;#10;&amp;#10;function joinStringsWithUnderscore2(list1, list2) {&amp;#10;    var joinedStrings = [];&amp;#10;    for (var i = 0; i &lt; list1.length; i++) {&amp;#10;        for (var j = 0; j &lt; list2.length; j++) {&amp;#10;            joinedStrings.push(list1[i] + '_' + list2[j]);&amp;#10;        }&amp;#10;    }&amp;#10;    return joinedStrings;&amp;#10;}&amp;#10;joinStringsWithUnderscore = joinStringsWithUnderscore2&amp;#10;// check if mouse position is within underline word's bounds&amp;#10;function rectangleClickCheck2(clickPosition, underlined_words){  &amp;#10;    &amp;#10;    &amp;#10;    // get all underlined words&amp;#10;    var currentKeys = Object.keys(underlined_words)&amp;#10;&amp;#10;    // get mouse positions&amp;#10;    var xpos = clickPosition[0]&amp;#10;    var ypos = clickPosition[1]&amp;#10;&amp;#10;    for (var i = 0; i &lt; currentKeys.length; i++){&amp;#10;        var underlineObject = underlined_words[currentKeys[i]];&amp;#10;        &amp;#10;//        console.log('***********************')&amp;#10;//        console.log(currentKeys[i])&amp;#10;//        console.log('click x and y: ',xpos,ypos)        &amp;#10;//        console.log('rectx bounds : ', [underlineObject.x, underlineObject.x + underlineObject.width])&amp;#10;//        console.log('recty bounds : ', [underlineObject.y, underlineObject.y + underlineObject.height])&amp;#10;&amp;#10;        console.log('current object', underlineObject)&amp;#10;        var howManyCoordinates = underlineObject[&quot;x&quot;].length&amp;#10;        console.log('how many coordinates', howManyCoordinates)&amp;#10;        // if this is a multiline hyperlink&amp;#10;        if (howManyCoordinates &gt; 1){&amp;#10;            var xcoordinates = underlineObject[&quot;x&quot;]&amp;#10;            var ycoordinates = underlineObject[&quot;y&quot;]&amp;#10;            var widthsizes   = underlineObject[&quot;width&quot;]&amp;#10;            console.log('x coordinates', xcoordinates)&amp;#10;            console.log('y coordinates', ycoordinates)&amp;#10;            console.log('width sizes', widthsizes)&amp;#10;            var coordinateBooelan = []&amp;#10;            // loop over coordinates of both lines to check if mouse was clicked on either one of them&amp;#10;            for (var k = 0; k &lt; howManyCoordinates; k++){&amp;#10;                var current_x = xcoordinates[k]&amp;#10;                var current_y = ycoordinates[k]&amp;#10;                var current_width = widthsizes[k]&amp;#10;                // check if mouse is within vertical bounds&amp;#10;                var clickedVerticalArea = ((current_y &lt; ypos) &amp;&amp; (current_y + underlineObject.height &gt; ypos))&amp;#10;                // check if mouse is within horizontal bounds&amp;#10;                var clickedHorizontalArea = ((current_x &lt; xpos) &amp;&amp; (current_x + current_width &gt; xpos))&amp;#10;                coordinateBooelan.push(clickedVerticalArea &amp;&amp; clickedHorizontalArea)&amp;#10;            }&amp;#10;            console.log('coordinate booelan', coordinateBooelan)&amp;#10;            // logical check for click region on multiple lines&amp;#10;            var validClick = coordinateBooelan[0] || coordinateBooelan[1]&amp;#10;            &amp;#10;        } else{&amp;#10;            // if there is only one link of hyperlinks &amp;#10;&amp;#10;&amp;#10;            // check if mouse is within vertical bounds&amp;#10;            var clickedVerticalArea = ((underlineObject.y &lt; ypos) &amp;&amp; (underlineObject.y + underlineObject.height &gt; ypos))&amp;#10;            // check if mouse is within horizontal bounds&amp;#10;            var clickedHorizontalArea = ((underlineObject.x &lt; xpos) &amp;&amp; (underlineObject.x + underlineObject.width &gt; xpos))&amp;#10;&amp;#10;            var validClick = clickedVerticalArea &amp;&amp; clickedHorizontalArea&amp;#10;&amp;#10;&amp;#10;        }&amp;#10;&amp;#10;        // if mouse is within one of word's bounds&amp;#10;        if (validClick){&amp;#10;            // return key for that underlined word&amp;#10;            return [true,currentKeys[i]]&amp;#10;        } &amp;#10;        &amp;#10;    }        &amp;#10;    return [false,'undefined']&amp;#10;&amp;#10;}&amp;#10;&amp;#10;rectangleClickCheck = rectangleClickCheck2&amp;#10;&amp;#10;// check if mouse position is within popup back and close button's area&amp;#10;// adjustment of coordinates was necessary for images because the way &amp;#10;// psychopy places images (centers x and y, instead of top-right etc. placement)&amp;#10;function rectangleClickCheckImage2(clickPosition, underlined_words){&amp;#10;&amp;#10;    // get all underlined words&amp;#10;    var currentKeys = Object.keys(underlined_words)&amp;#10;&amp;#10;    // get mouse positions&amp;#10;    var xpos = clickPosition[0]&amp;#10;    var ypos = clickPosition[1]&amp;#10;&amp;#10;    for (var i = 0; i &lt; currentKeys.length; i++){&amp;#10;        var underlineObject = underlined_words[currentKeys[i]];&amp;#10;        &amp;#10;        var adjusted_x =  underlineObject.x - underlineObject.width / 2&amp;#10;        var adjusted_y =  underlineObject.y - underlineObject.height / 2&amp;#10;&amp;#10;        console.log('***********************')&amp;#10;        console.log(currentKeys[i])&amp;#10;//        console.log('click x and y: ',xpos,ypos)        &amp;#10;//        console.log('rectx bounds : ', [adjusted_x, adjusted_x + underlineObject.width])&amp;#10;//        console.log('recty bounds : ', [adjusted_y, adjusted_y + underlineObject.height])&amp;#10;//        &amp;#10;//    &amp;#10;        // check if mouse is within vertical bounds&amp;#10;        var clickedVerticalArea = ((adjusted_y &lt; ypos) &amp;&amp; (adjusted_y + underlineObject.height &gt; ypos))&amp;#10;        // check if mouse is within horizontal bounds&amp;#10;        var clickedHorizontalArea = ((adjusted_x &lt; xpos) &amp;&amp; (adjusted_x + underlineObject.width &gt; xpos))&amp;#10;&amp;#10;        // if mouse is within one of word's bounds&amp;#10;        if (clickedVerticalArea &amp;&amp; clickedHorizontalArea){&amp;#10;            // return key for that underlined word&amp;#10;            return [true,currentKeys[i]]&amp;#10;        } &amp;#10;        &amp;#10;    }        &amp;#10;    return [false,'undefined']&amp;#10;&amp;#10;}&amp;#10;&amp;#10;rectangleClickCheckImage = rectangleClickCheckImage2&amp;#10;&amp;#10;&amp;#10;&amp;#10;// change position of words for every scroll &amp;#10;&amp;#10;// check if mouse position is within underline word's bounds&amp;#10;function changeWordPosition2(deltaY, underlined_words){&amp;#10;&amp;#10;    // change underlined word positions &amp;#10;    var currentKeys = Object.keys(underlined_words)&amp;#10;    for (var i = 0; i &lt; currentKeys.length; i++){&amp;#10;        // change rectangle Y &amp;#10;        var lengthCoordinates = underlined_words[currentKeys[i]][&quot;y&quot;].length&amp;#10;        if (lengthCoordinates&gt;1){&amp;#10;            for (var k = 0; k&lt;lengthCoordinates;k++){&amp;#10;                underlined_words[currentKeys[i]][&quot;y&quot;][k] = underlined_words[currentKeys[i]][&quot;y&quot;][k] + deltaY;&amp;#10;            }&amp;#10;            &amp;#10;        }else{&amp;#10;            underlined_words[currentKeys[i]].y = underlined_words[currentKeys[i]].y + deltaY;&amp;#10;        }&amp;#10;        &amp;#10;        }&amp;#10;    &amp;#10;    return underlined_words&amp;#10;&amp;#10;&amp;#10;}&amp;#10;changeWordPosition = changeWordPosition2&amp;#10;&amp;#10;function letterToIndex2(letter,lettervector){    &amp;#10;    var cb_index = lettervector.indexOf(letter)&amp;#10;    return cb_index&amp;#10;    }&amp;#10;letterToIndex = letterToIndex2&amp;#10;&amp;#10;&amp;#10;function getCounterbalanceGroup2(cb_groups,database,shelfKey) {&amp;#10;    var exitAll = false&amp;#10;    var recordShelf = true&amp;#10;    var totalGroupSize = database['total']&amp;#10;&amp;#10;    if (totalGroupSize&gt;0)&amp;#10;        {&amp;#10;                // subtract one from the currently selected counterbalance group&amp;#10;            &amp;#10;                while (true) &amp;#10;                {&amp;#10;&amp;#10;                    if (exitAll)&amp;#10;                        {&amp;#10;                            break;&amp;#10;                        }         &amp;#10;                        console.log('selecting cb group')&amp;#10;                        // initialize random index&amp;#10;                        var randomcbindex = Math.floor(Math.random() * cb_groups.length);&amp;#10;                        // get the letter at #randomindex&amp;#10;                        var cb_group = cb_groups[randomcbindex]                        &amp;#10;                        // get current groupsize from shelf&amp;#10;                        var cb_group_size = database[cb_group]&amp;#10;                        &amp;#10;                        console.log('cb group: ', cb_group)&amp;#10;                        console.log('cb group size: ',cb_group_size)&amp;#10;                        &amp;#10;                        if (cb_group_size &gt; 0)&amp;#10;                            {&amp;#10;                                database[cb_group] = database[cb_group]-1&amp;#10;                                database['total'] = database['total']-1&amp;#10;                                exitAll = true&amp;#10;                            }&amp;#10;                }&amp;#10;        &amp;#10;            } else {&amp;#10;                recordShelf = false&amp;#10;                psychoJS.quit({message: &quot;We've reached the full number of participants!&quot;})&amp;#10;            }&amp;#10;&amp;#10;&amp;#10;    // write the counterbalance record to shelf after registery&amp;#10;    if (recordShelf){&amp;#10;        psychoJS.shelf.setDictionaryFieldValue({key: shelfKey, fieldName: 'cbgroups', fieldValue : database})&amp;#10;    }&amp;#10;    &amp;#10;    return cb_group&amp;#10;    &amp;#10;}&amp;#10;getCounterbalanceGroup = getCounterbalanceGroup2&amp;#10;&amp;#10;&amp;#10;function getItemCount2(textVar) {&amp;#10;    &amp;#10;    var count1 = Number(textVar[textVar.length-1])&amp;#10;    var count2 = Number(textVar[textVar.length-2])&amp;#10;    if (isNaN(count2)===false) {&amp;#10;        // if there is more than 9 items get last two characters for counting how many items there are&amp;#10;        var itemCount = textVar[textVar.length-2]+ textVar[textVar.length-1]&amp;#10;        itemCount = Number(itemCount)&amp;#10;        &amp;#10;    } else {&amp;#10;&amp;#10;        var itemCount = Number(textVar[textVar.length-1])&amp;#10;        &amp;#10;    }&amp;#10;    console.log('item count of: ',textVar, itemCount)&amp;#10;    return itemCount&amp;#10;}&amp;#10;getItemCount=getItemCount2&amp;#10;&amp;#10;&amp;#10;// get all indexes of an element &amp;#10;function getAllIndexes2(arr, val) {&amp;#10;    var indexes = [], i = -1;&amp;#10;    while ((i = arr.indexOf(val, i+1)) != -1){&amp;#10;        indexes.push(i);&amp;#10;    }&amp;#10;    return indexes;&amp;#10;}&amp;#10;&amp;#10;getAllIndexes = getAllIndexes2&amp;#10;&amp;#10;// format date and time (transform to &gt; mm.yy.tt)&amp;#10;function formatDateTime2(date){&amp;#10;    var indices = getAllIndexes(date,'-')&amp;#10;    var underScoreIndex = date.indexOf('_')&amp;#10;    var firstDashIndex = indices[0] // this is the index for the first dash, if it is larger than 2, it means that first part of the date is years. If that is the case, we change it by moving the years at the end of date. &amp;#10;        if (firstDashIndex &gt; 2){&amp;#10;            var yearString = date.slice(0,firstDashIndex)&amp;#10;            var monthDayString = date.slice(firstDashIndex+1,underScoreIndex)&amp;#10;            var timeString = date.slice(underScoreIndex,date.length)&amp;#10;            var newFormatDate = monthDayString + '-' + yearString + timeString&amp;#10;            return newFormatDate&amp;#10;        } else {&amp;#10;            return date&amp;#10;            }&amp;#10;    }&amp;#10;&amp;#10;formatDateTime = formatDateTime2&amp;#10;// shuffle array: randomly shuffles the order of elements in an array.&amp;#10;function randomArrayShuffle2(o){&amp;#10;    for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);&amp;#10;    return o;&amp;#10;}&amp;#10;&amp;#10;randomArrayShuffle = randomArrayShuffle2;&amp;#10;&amp;#10;function randomIntFromInterval2(min, max) { // min and max included &amp;#10;  return Math.floor(Math.random() * (max - min + 1) + min)&amp;#10;}&amp;#10;randomIntFromInterval = randomIntFromInterval2;&amp;#10;&amp;#10;// ranges from start to end, end is inclusive&amp;#10;// e.g. range(1,5) = [1,2,3,4,5]&amp;#10;function range2(start, end) {&amp;#10;    if(start === end) return [start];&amp;#10;    return [start, ...range(start + 1, end)];&amp;#10;}&amp;#10;range = range2;&amp;#10;// Latin Square design generator&amp;#10;&amp;#10;// How to use:&amp;#10;// var conditions = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];&amp;#10;// balancedLatinSquare(conditions, 0)  //=&gt; [&quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;C&quot;]&amp;#10;// balancedLatinSquare(conditions, 1)  //=&gt; [&quot;B&quot;, &quot;C&quot;, &quot;A&quot;, &quot;D&quot;]&amp;#10;// balancedLatinSquare(conditions, 2)  //=&gt; [&quot;C&quot;, &quot;D&quot;, &quot;B&quot;, &quot;A&quot;]&amp;#10;// ...&amp;#10;function balancedLatinSquare2(array, participantId) {&amp;#10; var result = [];&amp;#10; // Based on &quot;Bradley, J. V. Complete counterbalancing of immediate sequential effects in a Latin square design. J. Amer. Statist. Ass.,.1958, 53, 525-528. &quot;&amp;#10; for (var i = 0, j = 0, h = 0; i &lt; array.length; ++i) {&amp;#10;  var val = 0;&amp;#10;  if (i &lt; 2 || i % 2 != 0) {&amp;#10;   val = j++;&amp;#10;  } else {&amp;#10;   val = array.length - h - 1;&amp;#10;   ++h;&amp;#10;  }&amp;#10;&amp;#10;  var idx = (val + participantId) % array.length;&amp;#10;  result.push(array[idx]);&amp;#10; }&amp;#10;&amp;#10; if (array.length % 2 != 0 &amp;&amp; participantId % 2 != 0) {&amp;#10;  result = result.reverse();&amp;#10; }&amp;#10;&amp;#10; return result;&amp;#10;}&amp;#10;&amp;#10;balancedLatinSquare = balancedLatinSquare2;&amp;#10;&amp;#10;&amp;#10;&amp;#10;/////////////////////////////////////&amp;#10;//// font normalization function ////&amp;#10;/////////////////////////////////////&amp;#10;&amp;#10;Array.prototype.sum = function() {&amp;#10;    return this.reduce(function(a,b){return a+b;});&amp;#10;};&amp;#10;&amp;#10;Array.prototype.mean = function() {&amp;#10;    return this.sum() / this.length;&amp;#10;};&amp;#10;&amp;#10;// CONTROL vars (Times)&amp;#10;unitsPerEm_ctrl = 1000;&amp;#10;xHeight_ctrl = 448;&amp;#10;width_ctrl = 556.388855;&amp;#10;height_ctrl = 707.977295;&amp;#10;size_ctrl = 16;&amp;#10;yourX=0&amp;#10;xHeight_ctrl_weight = 448/unitsPerEm_ctrl;&amp;#10;width_ctrl_weight   = 556.388855/unitsPerEm_ctrl;&amp;#10;height_ctrl_weight  = 707.977295/unitsPerEm_ctrl;&amp;#10;&amp;#10;xHeightSourceDelta =  0.44970703125;&amp;#10;widthSourceDelta =  0.5528367565524194;&amp;#10;heightSourceDelta =  0.6362068422379032;&amp;#10;&amp;#10;chars = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM';&amp;#10;chars_check = chars.split('');&amp;#10;chars_decimal = [49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 113, 119, 101, 114, 116, 121, 117, 105, 111, 112, 97, 115, 100, 102, 103, 104, 106, 107, 108, 122, 120, 99, 118, 98, 110, 109, 81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 65, 83, 68, 70, 71, 72, 74, 75, 76, 90, 88, 67, 86, 66, 78, 77];&amp;#10;&amp;#10;//chars = 'Adobe';&amp;#10;chars_check = chars.split('');&amp;#10;chars_decimal = [];&amp;#10;chars_check.forEach(e =&gt; {&amp;#10;    chars_decimal.push(e.codePointAt());&amp;#10;});&amp;#10;&amp;#10;&amp;#10;chars_unicode = ['0x0031','0x0032','0x0033','0x0034','0x0035','0x0036','0x0037','0x0038','0x0039','0x0030','0x0071','0x0077','0x0065','0x0072','0x0074','0x0079','0x0075','0x0069','0x006f','0x0070','0x0061','0x0073','0x0064','0x0066','0x0067','0x0068','0x006a','0x006b','0x006c','0x007a','0x0078','0x0063','0x0076','0x0062','0x006e','0x006d','0x0051','0x0057','0x0045','0x0052','0x0054','0x0059','0x0055','0x0049','0x004f','0x0050','0x0041','0x0053','0x0044','0x0046','0x0047','0x0048','0x004a','0x004b','0x004c','0x005a','0x0058','0x0043','0x0056','0x0042','0x004e','0x004d'];&amp;#10;&amp;#10;function log(str) {&amp;#10;    console.log(str);&amp;#10;};&amp;#10;&amp;#10;function print_server_load(name,path) {&amp;#10;    log(&quot;@font-face {&quot;);&amp;#10;    log(&quot;    font-family: '&quot; + name + &quot;';&quot;);&amp;#10;    log(&quot;    font-style: normal;&quot;);&amp;#10;    log(&quot;    font-weight: normal;&quot;);&amp;#10;    log(&quot;    src: local('&quot; + name + &quot;'), url('fonts/&quot; + path + &quot;') format('truetype');&quot;);&amp;#10;    log(&quot;}&quot;);&amp;#10;};&amp;#10;&amp;#10;function print_css(name,name_css,factor,size) {&amp;#10;    log(&quot;p.&quot; + name_css + &quot;_&quot; + factor + &quot; {&quot;);&amp;#10;    log(&quot;    font-family: '&quot; + name + &quot;' !important;&quot;);&amp;#10;    log(&quot;    font-size: &quot; + size + &quot;px;&quot;);&amp;#10;    log(&quot;}&quot;);&amp;#10;}&amp;#10;&amp;#10;function gen_normalization2(fontPath,name,name_css) {&amp;#10;    opentype.load(fontPath, function(err, font) {&amp;#10;        if (err) {&amp;#10;            alert('Font ' + fontPath + ' could not be loaded: ' + err);&amp;#10;        } else {&amp;#10;            // Now let's display it on a canvas with id &quot;canvas&quot;&amp;#10;            console.log('normalization')&amp;#10;            //console.log(document.getElementById('canvas'))&amp;#10;            //console.log(document.getElementById('canvas').getContext)&amp;#10;            //console.log(document.getElementById('canvas').getContext('2d'))&amp;#10;            //var ctx = document.getElementById('canvas').getContext('2d');&amp;#10;    &amp;#10;            // Construct a Path object containing the letter shapes of the given text.&amp;#10;            // The other parameters are x, y and fontSize. Note that y is the position of the baseline.&amp;#10;            var path = font.getPath(chars, 0, 0, 16);&amp;#10;    &amp;#10;            //&amp;#10;            var xHeight = font.tables.os2.sxHeight; // sxHeight could be missing from some fonts&amp;#10;            var widths = [];&amp;#10;            var heights = [];&amp;#10;    &amp;#10;           var xMinFont = 0;&amp;#10;           var xMaxFont = 0;&amp;#10;           var yMinFont = 0;&amp;#10;           var yMaxFont = 0;&amp;#10;    &amp;#10;            //compute max width/height&amp;#10;            Object.keys(font.glyphs.glyphs).forEach(function (k) {&amp;#10;                var glyph = font.glyphs.glyphs[k];&amp;#10;                var unicode_decimal = glyph.unicode;&amp;#10;                if (chars_decimal.includes(unicode_decimal)) {&amp;#10;                    if(glyph.xMin &lt; xMinFont)&amp;#10;                        xMinFont = glyph.xMin;&amp;#10;                    if(glyph.xMax &gt; xMaxFont)&amp;#10;                        xMaxFont = glyph.xMax;&amp;#10;                    if(glyph.yMin &lt; yMinFont)&amp;#10;                        yMinFont = glyph.yMin;&amp;#10;                    if(glyph.yMax &gt; yMaxFont)&amp;#10;                        yMaxFont = glyph.yMax;&amp;#10;                }&amp;#10;            });&amp;#10;    &amp;#10;            Object.keys(font.glyphs.glyphs).forEach(function (k) {&amp;#10;                var glyph = font.glyphs.glyphs[k];&amp;#10;                var char = glyph.name;&amp;#10;                var unicode_decimal = glyph.unicode;&amp;#10;    &amp;#10;                var lsb = glyph.leftSideBearing;&amp;#10;                var rsb = glyph.advanceWidth - (lsb + glyph.xMax - glyph.xMin); //right side bearing&amp;#10;    &amp;#10;                var width = glyph.xMax - glyph.xMin;&amp;#10;                width = glyph.advanceWidth;&amp;#10;                //width = glyph.xMax - glyph.xMin;&amp;#10;    &amp;#10;                var yMinGlyph = glyph.yMin;&amp;#10;                var yMaxGlyph = glyph.yMax;&amp;#10;                var yMinFinal = yMinFont;&amp;#10;                var yMaxFinal = yMaxFont;&amp;#10;    &amp;#10;                if (yMinFont &gt; yMinGlyph)&amp;#10;                    yMinFinal = yMinGlyph;&amp;#10;                if (yMaxFont &lt; yMaxGlyph)&amp;#10;                    yMaxFinal = yMaxGlyph;&amp;#10;                &amp;#10;                var height = glyph.yMax - glyph.yMin;&amp;#10;                if (chars_decimal.includes(unicode_decimal)) {&amp;#10;                    widths.push(width);&amp;#10;                    heights.push(height);&amp;#10;                }&amp;#10;                if(unicode_decimal === 120) { // x&amp;#10;                    xHeight = yMaxGlyph - yMinGlyph;&amp;#10;                }&amp;#10;            });&amp;#10;    &amp;#10;            let unitsPerEm = font.tables.head.unitsPerEm;&amp;#10;    &amp;#10;            let xHeightDelta = xHeight/unitsPerEm;&amp;#10;            let widthDelta = widths.mean()/unitsPerEm;&amp;#10;            let heightDelta = heights.mean()/unitsPerEm;&amp;#10;            &amp;#10;            let x = 16*(1+((xHeightSourceDelta-xHeightDelta)/xHeightDelta));&amp;#10;            let w = 16*(1+((widthSourceDelta-widthDelta)/widthDelta));&amp;#10;            let h = 16*(1+((heightSourceDelta-heightDelta)/heightDelta));&amp;#10;            &amp;#10;            yourX = (1+((xHeightSourceDelta-xHeightDelta)/xHeightDelta));&amp;#10;            console.log('yourX')&amp;#10;            console.log(yourX)&amp;#10;            return yourX&amp;#10;            &amp;#10;        }&amp;#10;    });    &amp;#10;&amp;#10;}&amp;#10;&amp;#10;gen_normalization = gen_normalization2;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="// shuffle array: randomly shuffles the order of elements in an array.&amp;#10;function randomArrayShuffle2(o){&amp;#10;    for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);&amp;#10;    return o;&amp;#10;}&amp;#10;&amp;#10;randomArrayShuffle = randomArrayShuffle2;&amp;#10;&amp;#10;//" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="functions" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="specific_variables">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="document.body.style.zoom = &quot;100%&quot; &amp;#10;&amp;#10;newY = []&amp;#10;&amp;#10;&amp;#10;consentsize = [2550,3000]&amp;#10;consentDesiredWidth = 1460&amp;#10;consentSizeMultiplier = consentDesiredWidth / consentsize[0];&amp;#10;&amp;#10;consentsize = [consentsize[0]*consentSizeMultiplier,consentsize[1]*consentSizeMultiplier]&amp;#10;&amp;#10;imagesize = [2560,1900]&amp;#10;&amp;#10;popupsize = [1024,1000]&amp;#10;&amp;#10;preferencesize = [1247,302]&amp;#10;&amp;#10;&amp;#10;// window pixel sizes below (h horizontal, v vertical)&amp;#10;vsize = psychoJS.window._size[1];&amp;#10;hsize = psychoJS.window._size[0];&amp;#10;&amp;#10;halfimg_x = popupsize[0]/2&amp;#10;halfscreen_y = vsize/2&amp;#10;&amp;#10;&amp;#10;preference_y = (halfscreen_y-preferencesize[1])&amp;#10;preference_question_y = preference_y-(vsize*.2)&amp;#10;preference_slider_y   = preference_question_y-(vsize*.2)&amp;#10;&amp;#10;&amp;#10;popup_buttons = {}&amp;#10;popup_buttons.back_button = {}&amp;#10;popup_buttons.back_text = {}&amp;#10;popup_buttons.close_button = {}&amp;#10;// register position and size of popup's back button &amp;#10;popup_buttons.back_button.width  = 200&amp;#10;popup_buttons.back_button.height = 50&amp;#10;popup_buttons.back_button.x      = (-halfimg_x+(popup_buttons.back_button.width/2))&amp;#10;popup_buttons.back_button.y      = (-halfscreen_y + (halfscreen_y*.1)) + popup_buttons.back_button.height&amp;#10;&amp;#10;&amp;#10;// register position and size of popup's back text &amp;#10;popup_buttons.back_text.width  = 200&amp;#10;popup_buttons.back_text.height = 50&amp;#10;popup_buttons.back_text.x      = popup_buttons.back_button.x + popup_buttons.back_button.width/2 +popup_buttons.back_text.width/2 &amp;#10;popup_buttons.back_text.y      = popup_buttons.back_button.y&amp;#10;&amp;#10;&amp;#10;// register position and size of popup's close button &amp;#10;popup_buttons.close_button.width  = 25&amp;#10;popup_buttons.close_button.height = 25&amp;#10;popup_buttons.close_button.x      = (halfimg_x - (halfimg_x*.1)) &amp;#10;popup_buttons.close_button.y      = (halfscreen_y-(halfscreen_y*.05)) - popup_buttons.close_button.height&amp;#10;&amp;#10;// memory test buttons&amp;#10;memory_button            = {}&amp;#10;memory_button.yes_button = {}&amp;#10;memory_button.no_button  = {}&amp;#10;&amp;#10;memory_button.yes_button.width      = hsize/10&amp;#10;memory_button.yes_button.height     = hsize/20&amp;#10;memory_button.yes_button.x          = -hsize/10&amp;#10;memory_button.yes_button.y          = -hsize/10&amp;#10;&amp;#10;memory_button.no_button.width       = hsize/10&amp;#10;memory_button.no_button.height      = hsize/20&amp;#10;memory_button.no_button.x           = hsize/10&amp;#10;memory_button.no_button.y           = -hsize/10&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="document.body.style.zoom = &quot;100%&quot; &amp;#10;&amp;#10;newY = []&amp;#10;&amp;#10;&amp;#10;&amp;#10;imagesize = [2560,1900]&amp;#10;&amp;#10;popupsize = [1024,1000]&amp;#10;&amp;#10;preferencesize = [1247,302]&amp;#10;&amp;#10;&amp;#10;// window pixel sizes below (h horizontal, v vertical)&amp;#10;vsize = psychoJS.window._size[1];&amp;#10;hsize = psychoJS.window._size[0];&amp;#10;&amp;#10;console.log('vsize', vsize)&amp;#10;&amp;#10;halfimg_x = popupsize[0]/2&amp;#10;halfscreen_y = vsize/2&amp;#10;&amp;#10;&amp;#10;preference_y = (halfscreen_y-preferencesize[1])&amp;#10;preference_question_y = preference_y-(vsize*.2)&amp;#10;preference_slider_y   = preference_question_y-(vsize*.2)&amp;#10;&amp;#10;&amp;#10;popup_buttons = {}&amp;#10;popup_buttons.back_button = {}&amp;#10;popup_buttons.back_text = {}&amp;#10;popup_buttons.close_button = {}&amp;#10;// register position and size of popup's back button &amp;#10;popup_buttons.back_button.width  = 200&amp;#10;popup_buttons.back_button.height = 50&amp;#10;popup_buttons.back_button.x      = (-halfimg_x+(popup_buttons.back_button.width/2))&amp;#10;popup_buttons.back_button.y      = (-halfscreen_y + (halfscreen_y*.1)) + popup_buttons.back_button.height&amp;#10;&amp;#10;&amp;#10;// register position and size of popup's back text &amp;#10;popup_buttons.back_text.width  = 200&amp;#10;popup_buttons.back_text.height = 50&amp;#10;popup_buttons.back_text.x      = popup_buttons.back_button.x + popup_buttons.back_button.width/2 +popup_buttons.back_text.width/2 &amp;#10;popup_buttons.back_text.y      = popup_buttons.back_button.y&amp;#10;&amp;#10;&amp;#10;// register position and size of popup's close button &amp;#10;popup_buttons.close_button.width  = 25&amp;#10;popup_buttons.close_button.height = 25&amp;#10;popup_buttons.close_button.x      = (halfimg_x - (halfimg_x*.1)) &amp;#10;popup_buttons.close_button.y      = (halfscreen_y-(halfscreen_y*.05)) - popup_buttons.close_button.height&amp;#10;&amp;#10;// memory test buttons&amp;#10;memory_button            = {}&amp;#10;memory_button.yes_button = {}&amp;#10;memory_button.no_button  = {}&amp;#10;&amp;#10;memory_button.yes_button.width      = hsize/10&amp;#10;memory_button.yes_button.height     = hsize/20&amp;#10;memory_button.yes_button.x          = -hsize/10&amp;#10;memory_button.yes_button.y          = -hsize/10&amp;#10;&amp;#10;memory_button.no_button.width       = hsize/10&amp;#10;memory_button.no_button.height      = hsize/20&amp;#10;memory_button.no_button.x           = hsize/10&amp;#10;memory_button.no_button.y           = -hsize/10" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="specific_variables" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="initialize_variables">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="///////////////////////////////////////////////////////&amp;#10;//// EXPERIMENT TYPE (FONT OR SPACING COMPARISONS) ////&amp;#10;///////////////////////////////////////////////////////&amp;#10;&amp;#10;// assign which fit clash conditions will be displayed at the end&amp;#10;experimentType      = 'font' // 'spacing', or 'font'&amp;#10;&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;//// TEXT PARAMETERS (pixels, size multipliers, wrapwidth, position.) ////&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;&amp;#10;/////////////////&amp;#10;// IMAGE SIZES //&amp;#10;/////////////////&amp;#10;&amp;#10;// make sure to change these vales according to the image pixels you've rendered &amp;#10;// with the readability text to image conversion tool&amp;#10;&amp;#10;// horizontal axis&amp;#10;xaxis                               = 2560 &amp;#10;// vertical axis&amp;#10;yaxis                               = 1900&amp;#10;&amp;#10;////////////////&amp;#10;// FONT SIZES //&amp;#10;////////////////&amp;#10;&amp;#10;// base font size (font size in pixels)&amp;#10;baseSizePixels                      = 16;&amp;#10;&amp;#10;// size multiplier's for different types of text&amp;#10;// multipliers work on the base pixel size&amp;#10;// values lower than 1 are smaller than base size&amp;#10;// values greater than 1 are smaller than base size&amp;#10;&amp;#10;// comprehension, feedback, and demographic question size multiplier&amp;#10;questionSizeMultiplier              = 1.2;&amp;#10;// &amp;#10;passageSizeMultiplier               = 1.5;&amp;#10;// &amp;#10;instructionSizeMultiplier           = 1.5;&amp;#10;&amp;#10;// apply multipliers to base pixel size&amp;#10;passageTextSize                     = baseSizePixels * passageSizeMultiplier;&amp;#10;questionTextSize                    = baseSizePixels * questionSizeMultiplier;      // used in comprehension, feedback, and demographic questions &amp;#10;labelTextSize                       = baseSizePixels * questionSizeMultiplier;      // used in labels of the question sliders (each option of the likert items)&amp;#10;instructionTextSize                 = baseSizePixels * instructionSizeMultiplier;   // used for instructions and consent forms&amp;#10;&amp;#10;// text COLOR (questions and instructions)&amp;#10;textColor                           = &quot;black&quot;&amp;#10;&amp;#10;// text font (questions and instructions)&amp;#10;textFont                            = &quot;Arial&quot;&amp;#10;&amp;#10;// keyboard pause duration for each screen of passages (if key press is applicable)&amp;#10;// waits until these seconds passes to allow to skip the passage&amp;#10;keyboardPauseDuration               = 3;&amp;#10;&amp;#10;// mouse delay (time required for enabling button click)&amp;#10;mouseDelay                          = 3;  // between screens of a passage &amp;#10;mouseDelayOther                     = 3;  // between instructions, consent form pages, or questions &amp;#10;&amp;#10;&amp;#10;// screen scale variables, we are initializing these here&amp;#10;y_scale                             = 1;&amp;#10;x_scale                             = 1;&amp;#10;&amp;#10;// window pixel sizes below (h horizontal, v vertical)&amp;#10;screen_height                       = psychoJS.window.size[1];&amp;#10;screen_width                        = psychoJS.window.size[0];&amp;#10;hsize                               = screen_height;&amp;#10;vsize                               = screen_width;&amp;#10;&amp;#10;passageYaxis                        = -200;&amp;#10;&amp;#10;&amp;#10;// text wrapping and position parameters (questions, instructions)&amp;#10;wrapWidthText                       = screen_width*4/5;&amp;#10;wrapWidthPassages                   = screen_width/2;&amp;#10;&amp;#10;// x axis starting point for passages (not applicable for image-based studies)&amp;#10;xAxisCenterPassages                 =  -screen_width/4;&amp;#10;&amp;#10;// x axis starting point for other text (questions, instructions)&amp;#10;xAxisCenter                         = -screen_width * 2/5;&amp;#10;&amp;#10;// screen scale instructions positions&amp;#10;topScreenInstruction                = screen_height * 4/10;&amp;#10;bottomScreenInstruction             = -screen_height * 4/10;&amp;#10;&amp;#10;// question text positions &amp;#10;questionsXaxis                      = -screen_width*45/100;     // horizontal alignment of text during comprehension/feedback/demographic questions&amp;#10;questionsTopYaxis                   = screen_height*10/100;     // vertical position of the actual question text (e.g. What is the main idea of the passage?)&amp;#10;questionsBottomYaxis                = -screen_height*35/100;    // vertical position of question-related instructions (press space, press button etc.)&amp;#10;&amp;#10;// slider positions and size (radio button slider positions)&amp;#10;sliderPosition                      = [-screen_width*45/100, -screen_height*10/100];&amp;#10;sliderSize                          = [screen_width*1/100, screen_height*26/100];       // slider size, do not change this unless you know what you are doing&amp;#10;sliderPositionPreference            = [sliderPosition[0], preference_slider_y]&amp;#10;&amp;#10;// slider colors &amp;#10;colBlack                            = new util.Color('black');&amp;#10;colWhite                            = new util.Color('black')&amp;#10;col_white                           = new util.Color('white');&amp;#10;col_grey                            = new util.Color('grey');&amp;#10;col_red                             = new util.Color('red');&amp;#10;col_black                           = new util.Color('black');&amp;#10;sliderLineLabelColor                = colBlack;&amp;#10;sliderMarkerColor                   = colWhite;&amp;#10;&amp;#10;// textbox position and size (demographics)&amp;#10;textboxSize                         = [screen_width * 2/5, screen_height*7.5/100];&amp;#10;textboxPosition                     = [xAxisCenter, 0];&amp;#10;&amp;#10;ccImageY = -(screen_width * 0.02)&amp;#10;&amp;#10;//console.log(&quot;screen_width&quot;,screen_width,&quot;screen_height&quot;,screen_height);&amp;#10;//console.log(&quot;wrapwidthText&quot;,wrapWidthText,&quot;xAxis&quot;,xAxisCenter);&amp;#10;//console.log(&quot;wrapwidthPass&quot;,wrapWidthPassages,&quot;xAxisPass&quot;,xAxisCenterPassages) ;&amp;#10;&amp;#10;// next button size and position&amp;#10;buttonWidth                         = screen_width/10;&amp;#10;buttonHeight                        = screen_height/10;&amp;#10;&amp;#10;buttonX                             = screen_width * 4/10;&amp;#10;buttonY                             = 0-(screen_height * 4/10);&amp;#10;&amp;#10;ss_right_buttonX = screen_width * 5.5/15;&amp;#10;ss_right_buttonY = 0;&amp;#10;&amp;#10;ss_left_buttonX = ss_right_buttonX - buttonWidth;&amp;#10;&amp;#10;ss_up_buttonX = (ss_right_buttonX + ss_left_buttonX) / 2&amp;#10;ss_up_buttonY = buttonHeight + (screen_width * 1/30);&amp;#10;&amp;#10;&amp;#10;&amp;#10;console.log({ss_right_buttonX,ss_right_buttonY, buttonX, buttonY})&amp;#10;&amp;#10;// password textbox parameters&amp;#10;textboxSize                         = [screen_width * 2/5, screen_height*7.5/100];&amp;#10;textboxPosition                     = [xAxisCenter, 0];&amp;#10;&amp;#10;// memory test variables, list position&amp;#10;listx = screen_width/10;&amp;#10;&amp;#10;// clock&amp;#10;myClock                             = new util.Clock();&amp;#10;&amp;#10;// initialize passage index order list &amp;#10;passageSetOrder                     = [];&amp;#10;questionReactionTime                = [];&amp;#10;&amp;#10;radiobutton_size = 23&amp;#10;&amp;#10;const searchParams = new URLSearchParams(location.search);&amp;#10;const imageParam = parseInt(searchParams.get('image')) || 0;&amp;#10;&amp;#10;&amp;#10;if (imageParam==0) {&amp;#10;    // prolific&amp;#10;    psychoJS.setRedirectUrls('https://app.prolific.com/submissions/complete?cc=C1HZYXNB','')&amp;#10;} else {&amp;#10;    // life&amp;#10;    psychoJS.setRedirectUrls('https://forms.gle/twgaBP6X4os6dk767','')&amp;#10;}&amp;#10;&amp;#10;console.log('passed initialization')" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="///////////////////////////////////////////////////////&amp;#10;//// EXPERIMENT TYPE (FONT OR SPACING COMPARISONS) ////&amp;#10;///////////////////////////////////////////////////////&amp;#10;//&amp;#10;// assign which fit clash conditions will be displayed at the end&amp;#10;//experimentType      = 'font' // 'spacing', or 'font'&amp;#10;//&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;//// TEXT PARAMETERS (pixels, size multipliers, wrapwidth, position.) ////&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;//&amp;#10;/////////////////&amp;#10;// IMAGE SIZES //&amp;#10;/////////////////&amp;#10;//&amp;#10;// make sure to change these vales according to the image pixels you've rendered &amp;#10;// with the readability text to image conversion tool&amp;#10;//&amp;#10;// horizontal axis&amp;#10;//xaxis                               = 1024 &amp;#10;// vertical axis&amp;#10;//yaxis                               = 768&amp;#10;//&amp;#10;////////////////&amp;#10;// FONT SIZES //&amp;#10;////////////////&amp;#10;//&amp;#10;// base font size (font size in pixels)&amp;#10;//baseSizePixels                      = 16;&amp;#10;//&amp;#10;// size multiplier's for different types of text&amp;#10;// multipliers work on the base pixel size&amp;#10;// values lower than 1 are smaller than base size&amp;#10;// values greater than 1 are smaller than base size&amp;#10;//&amp;#10;// comprehension, feedback, and demographic question size multiplier&amp;#10;//questionSizeMultiplier              = 1.2;&amp;#10;// &amp;#10;//passageSizeMultiplier               = 1.5;&amp;#10;// &amp;#10;//instructionSizeMultiplier           = 1.5;&amp;#10;//&amp;#10;// apply multipliers to base pixel size&amp;#10;//passageTextSize                     = baseSizePixels * passageSizeMultiplier;&amp;#10;//questionTextSize                    = baseSizePixels * questionSizeMultiplier;      // used in comprehension, feedback, and demographic questions &amp;#10;//labelTextSize                       = baseSizePixels * questionSizeMultiplier;      // used in labels of the question sliders (each option of the likert items)&amp;#10;//instructionTextSize                 = baseSizePixels * instructionSizeMultiplier;   // used for instructions and consent forms&amp;#10;//&amp;#10;// text COLOR (questions and instructions)&amp;#10;//textColor                           = &quot;black&quot;&amp;#10;//&amp;#10;// text font (questions and instructions)&amp;#10;//textFont                            = &quot;Arial&quot;&amp;#10;//&amp;#10;// keyboard pause duration for each screen of passages (if key press is applicable)&amp;#10;// waits until these seconds passes to allow to skip the passage&amp;#10;//keyboardPauseDuration               = .05;&amp;#10;//&amp;#10;// mouse delay (time required for enabling button click)&amp;#10;//mouseDelay                          = .05;  // between screens of a passage &amp;#10;//mouseDelayOther                     = .05;  // between instructions, consent form pages, or questions &amp;#10;//&amp;#10;//&amp;#10;// screen scale variables, we are initializing these here&amp;#10;//y_scale                             = 1;&amp;#10;//x_scale                             = 1;&amp;#10;//&amp;#10;// window pixel sizes below (h horizontal, v vertical)&amp;#10;//screen_height                       = psychoJS.window.size[1];&amp;#10;//screen_width                        = psychoJS.window.size[0];&amp;#10;//hsize                               = screen_height;&amp;#10;//vsize                               = screen_width;&amp;#10;//&amp;#10;//passageYaxis                        = -200;&amp;#10;//&amp;#10;//&amp;#10;// text wrapping and position parameters (questions, instructions)&amp;#10;//wrapWidthText                       = screen_width*4/5;&amp;#10;//wrapWidthPassages                   = screen_width/2;&amp;#10;//&amp;#10;// x axis starting point for passages (not applicable for image-based studies)&amp;#10;//xAxisCenterPassages                 =  -screen_width/4;&amp;#10;//&amp;#10;// x axis starting point for other text (questions, instructions)&amp;#10;//xAxisCenter                         = -screen_width * 2/5;&amp;#10;//&amp;#10;// screen scale instructions positions&amp;#10;//topScreenInstruction                = screen_height * 3/10;&amp;#10;//bottomScreenInstruction             = -screen_height * 3/10;&amp;#10;//&amp;#10;// question text positions &amp;#10;//questionsXaxis                      = -screen_width*45/100;     // horizontal alignment of text during comprehension/feedback/demographic questions&amp;#10;//questionsTopYaxis                   = screen_height*10/100;     // vertical position of the actual question text (e.g. What is the main idea of the passage?)&amp;#10;//questionsBottomYaxis                = -screen_height*35/100;    // vertical position of question-related instructions (press space, press button etc.)&amp;#10;//&amp;#10;// slider positions and size (radio button slider positions)&amp;#10;//sliderPosition                      = [-screen_width*45/100, -screen_height*10/100];&amp;#10;//sliderSize                          = [screen_width*1/100, screen_height*26/100];       // slider size, do not change this unless you know what you are doing&amp;#10;//sliderPositionPreference            = [sliderPosition[0], preference_slider_y]&amp;#10;//&amp;#10;// slider colors &amp;#10;//colBlack                            = new util.Color('black');&amp;#10;//colWhite                            = new util.Color('black');&amp;#10;//sliderLineLabelColor                = colBlack;&amp;#10;//sliderMarkerColor                   = colWhite;&amp;#10;//&amp;#10;// textbox position and size (demographics)&amp;#10;//textboxSize                         = [screen_width * 2/5, screen_height*7.5/100];&amp;#10;//textboxPosition                     = [xAxisCenter, 0];&amp;#10;//&amp;#10;//console.log(&quot;screen_width&quot;,screen_width,&quot;screen_height&quot;,screen_height);&amp;#10;//console.log(&quot;wrapwidthText&quot;,wrapWidthText,&quot;xAxis&quot;,xAxisCenter);&amp;#10;//console.log(&quot;wrapwidthPass&quot;,wrapWidthPassages,&quot;xAxisPass&quot;,xAxisCenterPassages) ;&amp;#10;//&amp;#10;// next button size and position&amp;#10;//buttonWidth                         = screen_width/10;&amp;#10;//buttonHeight                        = screen_height/10;&amp;#10;//&amp;#10;//buttonX                             = screen_width * 4/10;&amp;#10;//buttonY                             = 0-(screen_height * 4/10);&amp;#10;//&amp;#10;// password textbox parameters&amp;#10;//textboxSize                         = [screen_width * 2/5, screen_height*7.5/100];&amp;#10;//textboxPosition                     = [xAxisCenter, 0];&amp;#10;//&amp;#10;// memory test variables, list position&amp;#10;//listx = screen_width/10;&amp;#10;//&amp;#10;// clock&amp;#10;//myClock                             = new util.Clock();&amp;#10;//&amp;#10;// initialize passage index order list &amp;#10;//passageSetOrder                     = [];&amp;#10;//questionReactionTime                = [];&amp;#10;//&amp;#10;//&amp;#10;//console.log('passed initialization')" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initialize_variables" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="counterbalancing">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// - * BEGIN EXPERIMENT * - // &amp;#10;&amp;#10;// use 'counterbalanced' for counterbalancing conditions across groups&amp;#10;// use 'randomized' for randomizing the order of conditions for each participant&amp;#10;randomization_scheme            = 'counterbalanced' // or 'counterbalanced'&amp;#10;&amp;#10;// name of the shelf record used for counterbalancing&amp;#10;cbRegistry                      = ['cb_article']&amp;#10;&amp;#10;if (randomization_scheme === 'counterbalanced'){&amp;#10;    &amp;#10;&amp;#10;    // cb_groups is used for ordering exp conditions and passage orders. &amp;#10;    // Each letter represents a different group. Name of the groups are irrelevant.&amp;#10;    // number of counterbalance groups (cb_groups) will change according to &amp;#10;    // the number of conditions you have. Whether condition count is even or odd&amp;#10;    // also changes the number of groups &amp;#10;    // • Even number of conditions: Add as many groups as the number of your conditions. (4 conditions result in 4 groups)&amp;#10;    // • Odd number of conditions: Add twice as many groups as the number of conditions. (3 conditions result in 6 groups)&amp;#10;    &amp;#10;    // Make sure that you have a dictionary shelf record that have all the groups specified below.&amp;#10;    cb_groups                       = ['A','B','C','D','E','F'];&amp;#10;    &amp;#10;    registeryName                   = [] // data file name for registry &amp;#10;    thisGroup                       = {} // counterbalance group&amp;#10;    cb_group                        = [] // letter representation of counterbalance group&amp;#10;    cb_index                        = [] // index of counterbalance group for latin-square function&amp;#10;&amp;#10;&amp;#10;    // GET COUNTERBALANCE DICTIONARY FROM SHELF&amp;#10;    cbDatabase                      = await psychoJS.shelf.getDictionaryFieldValue({key: cbRegistry, fieldName: 'cbgroups', defaultValue: &quot;none&quot;});&amp;#10;&amp;#10;    /* Get a counterbalance group */&amp;#10;    cb_group                        = getCounterbalanceGroup(cb_groups,cbDatabase,cbRegistry)&amp;#10;    cb_index                        = letterToIndex(cb_group,cb_groups)&amp;#10;//&amp;#10;//    cb_group = &quot;A&quot;&amp;#10;//    cb_index = 0&amp;#10;} else if (randomization_scheme === 'randomized') {&amp;#10;&amp;#10;    // used for ordering exp conditions and passage orders&amp;#10;    cb_groups                       = [];&amp;#10;    registeryName                   = [] // data file name for registry &amp;#10;    thisGroup                       = {} // counterbalance group&amp;#10;    cb_group                        = [] // letter representation of counterbalance group&amp;#10;    cb_index                        = [] // index of counterbalance group for latin-square function&amp;#10;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.experiment.dataFileName = ((&quot;.&quot; + &quot;/&quot;) + `data/${registeryName}_${expName}_${expInfo[&quot;date&quot;]}`);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="counterbalancing" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="data_registry">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// PARTICIPANT REGISTRY VARIABLES&amp;#10;&amp;#10;// get a random subject ID&amp;#10;participantCode                   = randomIntFromInterval(100000,999999)&amp;#10;&amp;#10;// experimental group name&amp;#10;exp_group                         = &quot;unnamed&quot;&amp;#10;&amp;#10;// registered participant name (id + cb_group-if exists)&amp;#10;expInfo[&quot;participant&quot;]            = participantCode.toString() +&quot;_&quot; +cb_group;&amp;#10;&amp;#10;// get date and time in a uniform format&amp;#10;registeryDate                     = util.MonotonicClock.getDateStr()&amp;#10;&amp;#10;// format registry date for a uniform date-time across browsers and OSs&amp;#10;registeryDate                     = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register date&amp;#10;expInfo[&quot;date&quot;]                   = registeryDate&amp;#10;&amp;#10;// change data file name&amp;#10;psychoJS.experiment.dataFileName  = ((&quot;.&quot; + &quot;/&quot;) + `data/${registeryName}_${expName}_${expInfo[&quot;date&quot;]}`);&amp;#10;&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;//// DATA REGISTRY VARIABLES (accuracy, rt, date, blocks, trials etc) ////&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;totalTrialIterationIndex            = 0;&amp;#10;data_totalTrialIndex                = [];&amp;#10;data_dateTime                       = [];&amp;#10;data_feedbackRating                 = [];&amp;#10;data_trialType                      = [];&amp;#10;data_itemID                         = [];&amp;#10;data_setID                          = [];&amp;#10;data_passageType                    = [];&amp;#10;&amp;#10;data_passageWPM                     = [];&amp;#10;data_passageRT                      = [];&amp;#10;data_passageFont                    = [];&amp;#10;data_passageSpacing                 = [];&amp;#10;data_passageWordCount               = [];&amp;#10;data_passageType                    = [];&amp;#10;data_passageLevel                   = [];&amp;#10;data_articleSkipType                = [];&amp;#10;&amp;#10;data_compAccuracy                   = [];&amp;#10;data_compChoice                     = [];&amp;#10;data_surveyRT                       = [];&amp;#10;&amp;#10;data_blockName                      = [];&amp;#10;data_zoomLevel                      = [];&amp;#10;currentFontType                     = [];&amp;#10;currentRT                           = [];&amp;#10;browserZoom                         = [];&amp;#10;&amp;#10;&amp;#10;thisExp = psychoJS.experiment;&amp;#10;// write trial by trial data&amp;#10;trialColumNames = [&quot;trialNo&quot;,&quot;setID&quot;,&quot;itemID&quot; ,&quot;blockName&quot;, &quot;trialType&quot;,&quot;fontName&quot;,&quot;linkCondition&quot;,&quot;articleSkipType&quot;,&quot;wordCount&quot;,&quot;passageRT&quot;, &quot;wordsPerMinute&quot;, &quot;comprehensionAccuracy&quot;, &quot;comprehensionChoice&quot;,&quot;choiceRT&quot;,&quot;feedbackSurveyRating&quot;];&amp;#10;&amp;#10;// add headers right above the data &amp;#10;psychoJS.experiment.addData(&quot;dateTime&quot;, &quot;dateTime&quot;)&amp;#10;psychoJS.experiment.addData(trialColumNames[0], trialColumNames[0]);&amp;#10;psychoJS.experiment.addData(&quot;subid&quot;, &quot;subid&quot;)&amp;#10;psychoJS.experiment.addData(&quot;gender&quot;, &quot;gender&quot;)&amp;#10;psychoJS.experiment.addData(&quot;age&quot;, &quot;age&quot;)&amp;#10;psychoJS.experiment.addData(&quot;counterbalance_group&quot;, &quot;counterbalance_group&quot;)&amp;#10;&amp;#10;    for (let columni = 1; columni &lt; trialColumNames.length; columni++) {&amp;#10;        // loop over trialColumnNames and create headers for the datasheet&amp;#10;      psychoJS.experiment.addData(trialColumNames[columni], trialColumNames[columni]);&amp;#10;    }&amp;#10;&amp;#10;psychoJS.experiment.addData(&quot;X_Scale&quot;, &quot;X_Scale&quot;);&amp;#10;psychoJS.experiment.addData(&quot;Y_Scale&quot;, &quot;Y_Scale&quot;);&amp;#10;psychoJS.experiment.addData(&quot;IsFullScreen&quot;, &quot;IsFullScreen&quot;);&amp;#10;psychoJS.experiment.addData(&quot;window_width&quot;, &quot;window_width&quot;);&amp;#10;psychoJS.experiment.addData(&quot;window_height&quot;, &quot;window_height&quot;);&amp;#10;psychoJS.experiment.addData(&quot;browser&quot;, &quot;browser&quot;);&amp;#10;psychoJS.experiment.addData(&quot;browserZoomLevel&quot;, &quot;browserZoomLevel&quot;);&amp;#10;psychoJS.experiment.nextEntry();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="data_registry" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_passage">
      <TextComponent name="readPassageInstructions">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="readPassageInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In the next section, please try to read each article at your normal speed without reading aloud, re-reading, or taking breaks, and then press the button at the bottom of the screen when you are finished. Please sit 14 inches from the screen and try not to move your chair or move the distance of your head relative to the screen. Use your mouse or the up and down arrow keys to scroll through the articles and ensure you read the entire text. Do not refresh the browser as it will reset the test.&amp;#10;&amp;#10;• ﻿﻿Keep in mind you will answer questions after reading.&amp;#10;&amp;#10;﻿﻿• If you need to take a very short break please do so now.&amp;#10;&amp;#10;﻿• Verify that you are 14 inches from the screen using a ruler&amp;#10;&amp;#10;Once you are ready, please press the button below to continue.&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="readPassageInstructions.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_readingInstructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_readingInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseReadingInstructions">
        <Param val="nextButton_readingInstructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseReadingInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="setTrialParameters">
      <CodeComponent name="getTrialParameters">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// setup trial parameters&amp;#10;trialproperties         = thisStimulus_list[&quot;trialproperties&quot;] // cell that indicates the number of passages and questions&amp;#10;trialproperties         = trialproperties.split(&quot;;&quot;) &amp;#10;&amp;#10;//passage counts&amp;#10;passageCount            = trialproperties[0]&amp;#10;passageCount            = getItemCount(passageCount)&amp;#10;//passageCount = Number(passageCount[passageCount.length-1]) // get the last element (count)&amp;#10;&amp;#10;//question counts&amp;#10;questionCount           = trialproperties[1]&amp;#10;questionCount           = getItemCount(questionCount)&amp;#10;&amp;#10;//questionCount = Number(questionCount[questionCount.length-1]) // get the last element (count)&amp;#10;// proxy count&amp;#10;proxyCount              = trialproperties[2]&amp;#10;proxyCount              = getItemCount(proxyCount)&amp;#10;&amp;#10;//mini survey count&amp;#10;feedbackCount           = trialproperties[3]&amp;#10;feedbackCount           = getItemCount(feedbackCount)&amp;#10;&amp;#10;//feedbackSurveyCount = Number(feedbackSurveyCount[feedbackSurveyCount.length-1]) // get the last element (count)&amp;#10;//randomization of passages within a set (1= yes, 0=no)&amp;#10;randomizePassages       = trialproperties[3]&amp;#10;randomizePassages       = Number(randomizePassages[randomizePassages.length-1]) // get the last element (count)&amp;#10;//randomization of questions within a set (1= yes, 0=no)&amp;#10;randomizeQuestions      = trialproperties[4]&amp;#10;randomizeQuestions      = Number(randomizeQuestions[randomizeQuestions.length-1]) // get the last element (count)&amp;#10;&amp;#10;// create passage index array&amp;#10;rand_po = [];&amp;#10;for (var i = 0; i &lt; passageCount; i++){&amp;#10;    rand_po.push(i+1);&amp;#10;}&amp;#10;&amp;#10;// create question index array&amp;#10;rand_qo = [];&amp;#10;for (var i = 0; i &lt; questionCount; i++){&amp;#10;    rand_qo.push(i+1);&amp;#10;}&amp;#10;&amp;#10;// create proxy survey index array&amp;#10;rand_proxyo = [];&amp;#10;for (var i = 0; i &lt; proxyCount; i++){&amp;#10;    rand_proxyo.push(i+1);&amp;#10;}&amp;#10;&amp;#10;// create mini survey index array&amp;#10;rand_fo = [];&amp;#10;for (var i = 0; i &lt; feedbackCount; i++){&amp;#10;    rand_fo.push(i+1);&amp;#10;}&amp;#10;&amp;#10;//randomize passage and question orders&amp;#10;if (randomizePassages === 1) {&amp;#10;    rand_po             = randomArrayShuffle(rand_po);&amp;#10;    &amp;#10;}&amp;#10;&amp;#10;if (randomizeQuestions === 1) {&amp;#10;     rand_qo            = randomArrayShuffle(rand_qo);&amp;#10;     rand_fo            = randomArrayShuffle(rand_fo);&amp;#10;     rand_proxyo        = randomArrayShuffle(rand_proxyo);&amp;#10;}&amp;#10;&amp;#10;// what is this trial: practice or test?&amp;#10;trialType               = thisStimulus_list['trialType'];&amp;#10;// increase trial iteration index for each iteration of stimulus list&amp;#10;trialIteration          = trialIteration +1;&amp;#10;totalTrialIterationIndex = totalTrialIterationIndex+1;&amp;#10;&amp;#10;//console.log('trialIteration: ',trialIteration)&amp;#10;//console.log('leftTrialIndex: ',trialIteration + leftPassageTrial)&amp;#10;//console.log('blockConditionsForRegistry',blockConditionsForRegistry)&amp;#10;//console.log('blockConditionsForRegistry['+trialIteration+']',blockConditionsForRegistry[trialIteration])" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getTrialParameters" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="articleTrial">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="popupN = []&amp;#10;&amp;#10;popupN  = 0&amp;#10;wordN   = 0&amp;#10;&amp;#10;loopCount = 999&amp;#10;&amp;#10;articleid               = thisStimulus_list[&quot;setID&quot;];&amp;#10;&amp;#10;currentFont             = blockConditionsForDisplay[trialIteration][0];   &amp;#10;currentLink             = blockConditionsForDisplay[trialIteration][1];&amp;#10;&amp;#10;currentArticle          = &quot;stimuli/article_images/&quot;+articleid + &quot;_&quot; + currentFont +&quot;_&quot;+currentLink + &quot;.jpg&quot;&amp;#10;&amp;#10;&amp;#10;console.log('current font', currentFont)&amp;#10;console.log('current link', currentLink)&amp;#10;&amp;#10;if (currentLink === &quot;NoLink&quot;){&amp;#10;    // assign a dummy sheet to prevent error in popup_selection loop when &amp;#10;    // there is no links in the article. &amp;#10;    linksheet               = &quot;stimuli/link_sheets/article1_Times_links.xlsx&quot;;&amp;#10;    enableLinkClick         = 0&amp;#10;    } else {&amp;#10;        // assign the current article's link sheet if this article has linked words (blue words for popups)&amp;#10;          enableLinkClick         = 1&amp;#10;          linksheet               = &quot;stimuli/link_sheets/&quot;+articleid + &quot;_&quot;+ currentFont + &quot;_links.xlsx&quot;;&amp;#10;        }&amp;#10;&amp;#10;console.log('current linksheet', linksheet)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="articleTrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="displayQuestions">
      <CodeComponent name="questionCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// create the excel column name that represents the current question text&amp;#10;questionIdentifier              = ('ques'+((rand_qo[question_trials.thisN]).toString())+'text')&amp;#10;labelIdentifier                 = ('ques'+((rand_qo[question_trials.thisN]).toString())+'label')&amp;#10;itemIDIdentifier                = ('ques'+((rand_qo[question_trials.thisN]).toString())+'ID')&amp;#10;correctLabelIdentifier          = ('ques'+((rand_qo[question_trials.thisN]).toString())+'correct')&amp;#10;&amp;#10;console.log('current question ID: ',questionIdentifier)&amp;#10;&amp;#10;// call the question text &amp;#10;currentQuestion                 = thisStimulus_list[questionIdentifier];&amp;#10;currentlabel                    = thisStimulus_list[labelIdentifier];&amp;#10;&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID                          = thisStimulus_list[itemIDIdentifier];&amp;#10;&amp;#10;//what is the set ID&amp;#10;setID                           = thisStimulus_list[&quot;setID&quot;]&amp;#10;&amp;#10;// change additional question text's centering and style&amp;#10;questionText.setAlignHoriz('left')&amp;#10;questionText.bold = true;&amp;#10;questionPressInstruction.setAlignHoriz('left')&amp;#10;questionPressInstruction.bold = true;&amp;#10;&amp;#10;// adjust slider vertical size depending on the number of options &amp;#10;// get slider labels from the excel file&amp;#10;&amp;#10;sliderLabels                    = thisStimulus_list[labelIdentifier];&amp;#10;sliderLabels                    = sliderLabels.split(&quot;;&quot;); &amp;#10;&amp;#10;if (sliderLabels.length &gt; 2) {&amp;#10;    sliderLabels.push(&quot;I don't know&quot;);&amp;#10;}&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;// how many labels?&amp;#10;labelCount                      = sliderLabels.length;&amp;#10;&amp;#10;// call correct label no &amp;#10;correctLabelNo                  = thisStimulus_list[correctLabelIdentifier]&amp;#10;&amp;#10;if (correctLabelNo === undefined){&amp;#10;    // if there is no correct answer cell in the sheet, accept last label as correct&amp;#10;    correctLabelNo              = labelCount - 1 // (last label will be correct)&amp;#10;    &amp;#10;    &amp;#10;    }else {&amp;#10;        // if there is a cell that indicate correct answer for comp questions&amp;#10;        if (isNaN(correctLabelNo)){&amp;#10;            // if label number is a string, convert it to number&amp;#10;            correctLabelNo      = Number(correctLabelNo);&amp;#10;        }&amp;#10;        // subtract one from the label number because javascript starts to read from 0 &amp;#10;        correctLabelNo          = correctLabelNo -1;&amp;#10;        &amp;#10;        if (sliderLabels.length &gt; 2) {&amp;#10;            correctLabelNo -= 1;&amp;#10;        }&amp;#10;        &amp;#10;}&amp;#10;&amp;#10;// console.log('correct label indx: ',correctLabelNo)&amp;#10;&amp;#10;// if there are less then 3 options on the slider, &amp;#10;// decrease the vertical size of the slider by half&amp;#10;if (labelCount &lt; 3){ &amp;#10;        sliderSize[1] = (vsize*26/100)/2.5  &amp;#10;    } else {&amp;#10;         sliderSize[1] = vsize*26/100;&amp;#10;        }&amp;#10;&amp;#10;&amp;#10;// console.log('slider labels: ',sliderLabels)&amp;#10;// console.log('slider size: ',sliderSize)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="questionCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="questionText">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentQuestion" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="questionPressInstruction">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionPressInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Click on the dot to the left of the correct answer&amp;#10;&amp;#10;Please press the button on the right hand corner to continue after your choice" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="radiobutton_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="radiobutton_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="radiobutton_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="radiobutton_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="radiobutton_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="radiobutton_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="radiobutton_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="radiobutton_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="radiobutton_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="radiobutton_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="radiobutton_6">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="radiobutton_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="radiobutton_7">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="radiobutton_7" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="radiobutton_8">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="radiobutton_8" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="radiobutton_9">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="radiobutton_9" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SliderComponent name="questionSlider">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="Calibri" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="labelTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionSlider" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="sliderPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="updateAndRegister">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="positions                       = []&amp;#10;radiobutton_size                = 23 &amp;#10;&amp;#10;&amp;#10;// initialize colors for slider &amp;#10;col_white                       = new util.Color('white');&amp;#10;col_grey                        = new util.Color('grey');&amp;#10;col_red                         = new util.Color('red');&amp;#10;col_black                       = new util.Color('black');" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;////////////////////////////////////////////////&amp;#10;//// UPDATE SLIDER LABELS, SIZE, COLOR ETC. ////&amp;#10;////////////////////////////////////////////////&amp;#10;&amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels                    = thisStimulus_list[labelIdentifier];&amp;#10;sliderLabels                    = [...sliderLabels.split(&quot;;&quot;), &quot;I don't know&quot;];&amp;#10;&amp;#10;if (sliderLabels.length == 3 ) {&amp;#10;    sliderLabels.pop()&amp;#10;}&amp;#10;&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount                      = sliderLabels.length;&amp;#10;&amp;#10;// create tick marks so that data registry makes sense in terms of scores of each &amp;#10;// label: start from 1 not 0.&amp;#10;tickMarks                       = range(1,labelCount);&amp;#10;&amp;#10;&amp;#10;// get the correct answer which is indexed by correct question headers from the excel file&amp;#10;correctAnswer                   = sliderLabels[sliderLabels.length - 2]; // -1 because index starts with 0&amp;#10;&amp;#10;// print correct label&amp;#10;//console.log('correct answer: ',correctAnswer)&amp;#10;// shuffle slider labels after you get the correct answer&amp;#10;if (sliderLabels.length &gt; 2 ) {&amp;#10;    sliderLabels.pop()&amp;#10;}&amp;#10;shuffledLabels                  = randomArrayShuffle(sliderLabels)&amp;#10;&amp;#10;if (sliderLabels.length &gt; 2 ) {&amp;#10;    shuffledLabels = [&quot;I don't know&quot;, ...shuffledLabels]&amp;#10;}&amp;#10;&amp;#10;// display shuffled labels as tick marks &amp;#10;// console.log('slider labels shuffled', shuffledLabels)&amp;#10;questionSlider.setLabels(shuffledLabels);&amp;#10;&amp;#10;// change ticks of the slider&amp;#10;questionSlider.setTicks(tickMarks);    &amp;#10;&amp;#10;// change font of the slider text&amp;#10;// console.log('slider font size', labelTextSize*y_scale)&amp;#10;questionSlider.setFontSize(labelTextSize*y_scale);&amp;#10;&amp;#10;// adjust slider's position and size&amp;#10;questionSlider._pos             = sliderPosition;&amp;#10;questionSlider._size            = sliderSize;&amp;#10;// change slider's color and marker properties&amp;#10;questionSlider._lineColor       = col_white; // color of static circle ;&amp;#10;&amp;#10;labelPosition_y                 = Math.abs(sliderSize[1] / (labelCount-1));&amp;#10;positions                       = [];&amp;#10;&amp;#10;// what are the maximum amount of radio buttons of this slider&amp;#10;// count radiobutton_# components, now it is 9.&amp;#10;maxLabels                       = 9;&amp;#10;&amp;#10;radiobutton_size                = [sliderSize[0]* 1.15, sliderSize[0]* 1.15];&amp;#10;&amp;#10;evenLabelCount                  = ((labelCount % 2) === 0);&amp;#10;// name of radio components&amp;#10;radioComponentName              = 'radiobutton_'&amp;#10;&amp;#10;if (evenLabelCount) {&amp;#10;    // console.log('here even label')&amp;#10;    // there is no middle label, so get the half of the distance&amp;#10;    // of labels and move on from there while positioning the radio buttons &amp;#10;    labelPosition_y = labelPosition_y / 2;&amp;#10;&amp;#10;    // initialize label position coordinate multiplier&amp;#10;    positionMultiplier = 1;&amp;#10;&amp;#10;    // loop over number of labels&amp;#10;    for (var k = 0; k &lt; labelCount; k++){&amp;#10;        &amp;#10;        // initialize label number index&amp;#10;        var buttonNo = k + 1;&amp;#10;&amp;#10;        if ((k % 2) === 0) {&amp;#10;            // increase the position multipler at every odd number &amp;#10;            // this increases the distance from the middle label every third label&amp;#10;            if (k &gt; 1) {&amp;#10;&amp;#10;                positionMultiplier = positionMultiplier+2; &amp;#10;            }  &amp;#10;            positions[k] = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)];&amp;#10;&amp;#10;        } else{&amp;#10;&amp;#10;            positions[k] = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];&amp;#10;            &amp;#10;        }&amp;#10;        // enter the position and size values into individual label radio buttons  &amp;#10;        // position&amp;#10;        eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;        // draw the changes &amp;#10;        eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;        console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;    }    &amp;#10;    &amp;#10;} else {&amp;#10;        // if there are odd number of labels&amp;#10;        &amp;#10;        // there will be a middle label which should be placed at the &amp;#10;        // default position of the slider&amp;#10;        radiobutton_1._pos      = [sliderPosition[0], sliderPosition[1]];&amp;#10;        radiobutton_1._size     = radiobutton_size;&amp;#10;        eval(radioComponentName + 1 + '._pos' +'= ['+ sliderPosition[0] +','+ sliderPosition[1]+'];' );&amp;#10;        &amp;#10;        // size&amp;#10;        eval(radioComponentName + 1 + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );        &amp;#10;        // initialize label position coordinate multiplier&amp;#10;        positionMultiplier = 0;&amp;#10;        // loop over labels&amp;#10;        for (var k = 1; k &lt; labelCount; k++){            &amp;#10;            // initialize label number index&amp;#10;            var buttonNo = k + 1;&amp;#10;            &amp;#10;            if ((k % 2) === 0) {&amp;#10;&amp;#10;                positions[k] = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)]; &amp;#10;&amp;#10;            } else{&amp;#10;                // increase the position multipler at every odd number &amp;#10;                // this increases the distance from the middle label every third label&amp;#10;                positionMultiplier =positionMultiplier+1 &amp;#10;                positions[k] = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];   &amp;#10;                &amp;#10;            }&amp;#10;            console.log('uneven k',k)&amp;#10;            console.log('uneven positionMultiplier',positionMultiplier)&amp;#10;            // enter the position and size values into individual label radio buttons  &amp;#10;            // position&amp;#10;            eval(radioComponentName + buttonNo + '._pos' +'= ['+ positions[k][0] +','+ positions[k][1]+'];' );&amp;#10;            // size&amp;#10;            eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;            // draw the changes &amp;#10;            eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;&amp;#10;            console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;        }&amp;#10;    &amp;#10;    }&amp;#10;&amp;#10;&amp;#10;&amp;#10;// remove radio buttons of slider labels that do not exist&amp;#10;for (var i = labelCount; i &lt;= maxLabels-1 ; i++){&amp;#10;    console.log(i);&amp;#10;    var buttonNo = i + 1;&amp;#10;    positions[i] = [sliderPosition[0], sliderPosition[1]+labelPosition_y];&amp;#10;    eval(radioComponentName + buttonNo + '._pos'+'= ['+ 0 +','+ 0+'];' );&amp;#10;    eval(radioComponentName + buttonNo + '._size'+'='+1+';' );    &amp;#10;    eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;    &amp;#10;}&amp;#10;&amp;#10;&amp;#10;// console.log('comprehension slider', questionSlider)&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if thisIteration['itemType'] != None:&amp;#10;    sliderLabelsInPy = thisIteration['sliderLabels']; # for some reason it does not accept labels from excel, so I assign another variable for it&amp;#10;    sliderLabelsInPy = sliderLabelsInPy.split(&quot;;&quot;)&amp;#10;    #print(sliderLabelsInPy)&amp;#10;&amp;#10;    labelCount = len(sliderLabelsInPy)&amp;#10;    tickMarks = list(range(labelCount))&amp;#10;    tickMarks = [x+1 for x in tickMarks]&amp;#10;&amp;#10;        &amp;#10;    # create new slider with updated labels&amp;#10;    comp_question = visual.Slider(win=win, name='comp_question',&amp;#10;        startValue=None, size=(.01, .2), pos=(-.75, -.1), units=None,&amp;#10;        labels=sliderLabelsInPy, ticks=tickMarks, granularity=1.0,&amp;#10;        style='radio', styleTweaks=(), opacity=None,&amp;#10;        color='Black', fillColor='White', borderColor='Black', colorSpace='rgb',&amp;#10;        font='Arial', labelHeight=normFontSize,&amp;#10;        flip=True,labelWrapWidth = generalWrapWidth, depth=-3, readOnly=False)&amp;#10;    question_text.setAlignHoriz('left')&amp;#10;    #for label in comp_question.labelObjs:&amp;#10;           # label.height = generalFontSize  # Or whatever size you want    &amp;#10;            #label.wrapWidth = 5" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="compChoice = questionSlider.getRating();&amp;#10;&amp;#10;// create a for loop using length of labels and update these like that&amp;#10;for (let i = 0; i &lt; labelCount; i++) {&amp;#10;    //console.log('current label for wrapwidth',i)&amp;#10;    //console.log('type of I',typeof i.toString())&amp;#10;    questionSlider._pixiLabels[i.toString()]._style._wordWrap = true&amp;#10;    questionSlider._pixiLabels[i.toString()]._style._wordWrapWidth = wrapWidthText    &amp;#10;    questionSlider._pixiLabels[i.toString()]._style._align = &quot;left&quot;&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="&amp;#10;// get the selected option among the labels&amp;#10;compChoiceText = shuffledLabels[compChoice-1]; // -1 because label index starts with 0, tick mark starts with 1. &amp;#10;// check if selected answer matches the correct answer&amp;#10;if (correctAnswer === compChoiceText) {&amp;#10;        compAccuracy = 1;&amp;#10;        // console.log(&quot;CORRECT ANSWER TO COMP&quot;)&amp;#10;        &amp;#10;    } else {&amp;#10;        compAccuracy = 0;&amp;#10;        // console.log(&quot;WRONG ANSWER TO COMP&quot;)&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;&amp;#10;// console.log('mouse-comp: ',mouseComprehension)&amp;#10;// console.log('mouse-comp-time: ',mouseComprehension.time)&amp;#10;&amp;#10;&amp;#10;// get reaction time from psychopy's mouse component &amp;#10;&amp;#10;// get the amount of mouse clicks&amp;#10;mouselength         = comprehensionMouse.time.length&amp;#10;// get the start time of mouse click component&amp;#10;mouse_tStart        = comprehensionMouse.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart       = questionText.tStart &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick          = comprehensionMouse.time[mouselength-1]; &amp;#10;// add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;compRT              = validClick + mouse_tStart - button_tStart; &amp;#10;&amp;#10;// console.log('mouse time',validClick)&amp;#10;// console.log('mouse rt', compRT)    &amp;#10;&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom         = window.outerWidth*100 / window.innerWidth;&amp;#10;// format date&amp;#10;registeryDate       = util.MonotonicClock.getDateStr()&amp;#10;registeryDate       = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data into lists&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_passageSpacing.push(currentLink); // what was spacing used in this passage&amp;#10;data_passageType.push([]);// what is the type of this set (informative, narrative)?&amp;#10;data_passageLevel.push([]); // what is the grade level (2nd, 3rd)&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;&amp;#10;&amp;#10;&amp;#10;data_passageRT.push([]); // words per minute&amp;#10;data_passageWPM.push([]); // words per minute&amp;#10;data_passageWordCount.push([]); &amp;#10;data_feedbackRating.push([]) // rating of the likert scale&amp;#10;&amp;#10;data_compChoice.push(compChoiceText); // chosen option is registered as text&amp;#10;data_surveyRT.push(compRT); // time to respond to comprehension question&amp;#10;data_compAccuracy.push(compAccuracy); // empty because there is no accuracy during passages &amp;#10;&amp;#10;/* accuracy registery for fit-clash  */ &amp;#10;if (trialType != &quot;practice&quot;){&amp;#10;    &amp;#10;    // enable registery for test trials, exclude practice trials&amp;#10;    getFitClash_all[currentConditions].accuracy.push(compAccuracy) // push current accuracy for cond interaction registry&amp;#10;    getFitClash_spacing[currentLink].accuracy.push(compAccuracy) // push accuracy only for spacing conditions&amp;#10;    getFitClash_font[currentFont].accuracy.push(compAccuracy) // push accuracy for only font conditions &amp;#10;&amp;#10;}&amp;#10;&amp;#10;// remove radio buttons so that they won't appear at the center in next trial&amp;#10;for (var i = 0; i &lt; maxLabels; i++) {&amp;#10;    var buttonNo = i + 1;&amp;#10;    eval(radioComponentName + buttonNo + '._pos'+'= ['+ 0 +','+ 0+'];' );&amp;#10;    eval(radioComponentName + buttonNo + '._size'+'='+1+';' );    &amp;#10;    &amp;#10;    }" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="updateAndRegister" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="comprehensionButton">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="comprehensionButton" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionSlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="comprehensionMouse">
        <Param val="comprehensionButton" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="comprehensionMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionSlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="screenScale">
      <CodeComponent name="scaleCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="oldt=0&amp;#10;x_size=8.560&amp;#10;y_size=5.398&amp;#10;screen_height=0&amp;#10;print('below screen size') &amp;#10;print(win.size)&amp;#10;print(win.size[0])&amp;#10;print(win.size[1])&amp;#10;print(win.size[0]/win.size[1])&amp;#10;print(win.size[1]/win.size[0])&amp;#10;if win.units=='norm':&amp;#10;    x_scale=.05&amp;#10;    y_scale=.1&amp;#10;    dbase = .0001&amp;#10;    unittext=' norm units'&amp;#10;    vsize=2&amp;#10;elif win.units=='pix':&amp;#10;    x_scale=60&amp;#10;    y_scale=40&amp;#10;    dbase = .1&amp;#10;    unittext=' pixels'&amp;#10;    vsize=win.size[1]&amp;#10;else:&amp;#10;    x_scale=.05&amp;#10;    y_scale=.05&amp;#10;    dbase = .0001&amp;#10;    unittext=' height units'&amp;#10;    vsize=1&amp;#10;    &amp;#10;print(x_size*x_scale, y_size*y_scale)    " valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="&amp;#10;win=psychoJS.window;&amp;#10;console.log('below screen size')&amp;#10;console.log(&quot;whole window&quot;,win)&amp;#10;console.log(&quot;sizes&quot;,win.size[0],win.size[1])&amp;#10;hsize = 0;&amp;#10;vsize = 0;&amp;#10;// initialize screen scale bank for &amp;#10;// repeated scaling of the screen&amp;#10;scaleBank = {&quot;x&quot;: [NaN,NaN],&quot;y&quot;:[NaN,NaN]}&amp;#10;&amp;#10;snellenHeight= 0 &amp;#10;snellenWidth = 0&amp;#10;&amp;#10;oldt = 0;&amp;#10;x_size = 8.56;&amp;#10;y_size = 5.398;&amp;#10;x_size_pix = 640;&amp;#10;y_size_pix = 401;&amp;#10;screen_height = 0;&amp;#10;if ((psychoJS.window.units === &quot;norm&quot;)) {&amp;#10;    x_scale = 0.05;&amp;#10;    y_scale = 0.1;&amp;#10;    dbase = 0.0001;&amp;#10;    unittext = &quot; norm units&quot;;&amp;#10;    vsize = 2;&amp;#10;} else {&amp;#10;    if ((psychoJS.window.units === &quot;pix&quot;)) {&amp;#10;        x_scale = 60;&amp;#10;        y_scale = 40;&amp;#10;        dbase = 0.1;&amp;#10;        unittext = &quot; pixels&quot;;&amp;#10;    } else {&amp;#10;        x_scale = 0.05;&amp;#10;        y_scale = 0.05;&amp;#10;        dbase = 0.0001;&amp;#10;        unittext = &quot; height units&quot;;&amp;#10;        vsize = 1;&amp;#10;    }&amp;#10;}&amp;#10;console.log((x_size * x_scale), (y_size * y_scale));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.eventManager.clearEvents();&amp;#10;&amp;#10;console.log('this n value: ',screenScaleTrials.thisN)&amp;#10;&amp;#10;&amp;#10;oldt = 0;&amp;#10;ccStart = Date.now();&amp;#10;x_size = 8.56;&amp;#10;y_size = 5.398;&amp;#10;x_size_pix = 640;&amp;#10;y_size_pix = 401;&amp;#10;screen_height = 0;&amp;#10;if ((psychoJS.window.units === &quot;norm&quot;)) {&amp;#10;    x_scale = 0.05;&amp;#10;    y_scale = 0.1;&amp;#10;    dbase = 0.0001;&amp;#10;    unittext = &quot; norm units&quot;;&amp;#10;    vsize = 2;&amp;#10;} else {&amp;#10;    if ((psychoJS.window.units === &quot;pix&quot;)) {&amp;#10;        x_scale = 60;&amp;#10;        y_scale = 40;&amp;#10;        dbase = 0.1;&amp;#10;        unittext = &quot; pixels&quot;;&amp;#10;    } else {&amp;#10;        x_scale = 0.05;&amp;#10;        y_scale = 0.05;&amp;#10;        dbase = 0.0001;&amp;#10;        unittext = &quot; height units&quot;;&amp;#10;        vsize = 1;&amp;#10;    }&amp;#10;}&amp;#10;console.log((x_size * x_scale), (y_size * y_scale));&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="event.clearEvents()&amp;#10;textTop.setAlignHoriz('left')&amp;#10;text_bottom.setAlignHoriz('left')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="keys=event.getKeys()&amp;#10;    &amp;#10;if len(keys):&amp;#10;    if t-oldt&lt;.5:&amp;#10;        dscale=5*dbase&amp;#10;        oldt=t&amp;#10;    else:&amp;#10;        dscale=dbase&amp;#10;        oldt=t&amp;#10;    if 'space' in keys and t &gt; 1:&amp;#10;        continueRoutine=False&amp;#10;    elif 'up' in keys:&amp;#10;        y_scale=round((y_scale+dscale)*10000)/10000&amp;#10;    elif 'down' in keys:&amp;#10;        y_scale=round((y_scale-dscale)*10000)/10000&amp;#10;    elif 'left' in keys:&amp;#10;        x_scale=round((x_scale-dscale)*10000)/10000&amp;#10;    elif 'right' in keys:&amp;#10;        x_scale=round((x_scale+dscale)*10000)/10000&amp;#10;    screen_height=round(vsize*10/y_scale)/10&amp;#10;    text_bottom.text='X Scale = '+str(x_scale)+unittext+' per cm, Y Scale = '+str(y_scale)+unittext+' per cm\nScreen height = '+str(screen_height)+' cm\n\nPress the space bar when done'&amp;#10;    ccimage.size=[x_size*x_scale, y_size*y_scale]&amp;#10;    print(x_size*x_scale, y_size*y_scale)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;var scale_buttons            = {};&amp;#10;scale_buttons.up_button = {width: up_button._size[1], height: up_button._size[0], x: up_button._pos[0], y: up_button._pos[1]};&amp;#10;scale_buttons.down_button = {width: down_button._size[1], height: down_button._size[0], x: down_button._pos[0], y: down_button._pos[1]};&amp;#10;scale_buttons.right_button = {width: right_button._size[0], height: right_button._size[1], x: right_button._pos[0], y: right_button._pos[1]};&amp;#10;scale_buttons.left_button = {width: left_button._size[0], height: left_button._size[1], x: left_button._pos[0], y: left_button._pos[1]};&amp;#10;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (-1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;&amp;#10;function has_clicked_arrow() {&amp;#10;    &amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = psychoJS.eventManager.getKeys();&amp;#10;arrowClicked = screenScaleMouse.getPressed().some((key) =&gt; key != 0)&amp;#10;//rectangleClickCheckImage(clickPosition, underlined_words)&amp;#10;let buttonClicked = &quot;&quot;&amp;#10;if (arrowClicked) {&amp;#10;    let output = rectangleClickCheckImage(screenScaleMouse.getPos(), scale_buttons)&amp;#10;    &amp;#10;    arrowClicked = output[0]&amp;#10;    buttonClicked = output[1]&amp;#10; }&amp;#10;&amp;#10;if ((keys.length || arrowClicked) &amp;&amp; (Date.now() - ccStart) &gt; 1500) {&amp;#10;    console.log(rectangleClickCheckImage(screenScaleMouse.getPos(), scale_buttons))&amp;#10;    console.log({mouse: screenScaleMouse, pos: screenScaleMouse.getPos(), buttonClicked, right_button})&amp;#10;    if (((t - oldt) &lt; 0.5)) {&amp;#10;        dscale = (5 * dbase);&amp;#10;        oldt = t;&amp;#10;    } else {&amp;#10;        dscale = dbase;&amp;#10;        oldt = t;&amp;#10;    }&amp;#10;    if ((_pj.in_es6(&quot;space&quot;, keys)) &amp;&amp; (t &gt; 1)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;up&quot;, keys) || buttonClicked == &quot;up_button&quot;) {&amp;#10;            y_scale = (Math.round(((y_scale + dscale) * 10000)) / 10000);&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;down&quot;, keys) || buttonClicked == &quot;down_button&quot;) {&amp;#10;                y_scale = (Math.round(((y_scale - dscale) * 10000)) / 10000);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;left&quot;, keys) || buttonClicked == &quot;left_button&quot;) {&amp;#10;                    x_scale = (Math.round(((x_scale - dscale) * 10000)) / 10000);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;right&quot;, keys) || buttonClicked == &quot;right_button&quot;) {&amp;#10;                        x_scale = (Math.round(((x_scale + dscale) * 10000)) / 10000);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    screen_height = (Math.round(((vsize * 10) / y_scale)) / 10);&amp;#10;    textBottom.text = ((((((((&quot;X Scale = &quot; + x_scale.toString()) + unittext) + &quot; per cm, Y Scale = &quot;) + y_scale.toString()) + unittext) + &quot; per cm\nScreen height = &quot;) + screen_height.toString()) + &quot; cm\n\nPress the space bar when done&quot;);&amp;#10;    ccimage.size = [(x_size * x_scale), (y_size * y_scale)];&amp;#10;    console.log((x_size * x_scale), (y_size * y_scale));&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;X Scale&quot;, x_scale);&amp;#10;psychoJS.experiment.addData(&quot;Y Scale&quot;, y_scale);&amp;#10;&amp;#10;scaleBank[&quot;y&quot;][screenScaleTrials.thisN] = y_scale&amp;#10;scaleBank[&quot;x&quot;][screenScaleTrials.thisN] = y_scale&amp;#10;if (screenScaleTrials.thisN === 1){&amp;#10;        y_scale = (scaleBank[&quot;y&quot;][0]+scaleBank[&quot;y&quot;][1])/2&amp;#10;        x_scale = (scaleBank[&quot;x&quot;][0]+scaleBank[&quot;x&quot;][1])/2&amp;#10;        console.log('y_scale', y_scale)&amp;#10;        // get desired snellen chart height&amp;#10;        // 14.7 = iphone X screen height in cm&amp;#10;        // 7.9 = iphone X screen width in cm&amp;#10;        snellenHeight   = y_scale * 14.36;&amp;#10;        snellenWidth    = y_scale * 7.9;&amp;#10;        &amp;#10;        pelliWidth      = snellenWidth;&amp;#10;        pelliHeight     = pelliWidth * 1.1955;&amp;#10;        &amp;#10;        snellenY = (snellenHeight-vsize)/2&amp;#10;        &amp;#10;        &amp;#10;        //y_scale= y_scale/40;&amp;#10;        y_scale= y_scale/40;&amp;#10;        x_scale = x_scale / 60;        &amp;#10;        &amp;#10;        imagesize = [imagesize[0]*y_scale,imagesize[1]*y_scale]&amp;#10;&amp;#10;        popupsize = [popupsize[0]*y_scale,popupsize[1]*y_scale]&amp;#10;&amp;#10;        preferencesize = [1247,302]&amp;#10;        &amp;#10;        &amp;#10;&amp;#10;        halfimg_x = popupsize[0]/2&amp;#10;        halfscreen_y = vsize/2&amp;#10;&amp;#10;&amp;#10;        preference_y = (halfscreen_y-preferencesize[1])&amp;#10;        preference_question_y = preference_y-(vsize*.2)&amp;#10;        preference_slider_y   = preference_question_y-(vsize*.2)&amp;#10;&amp;#10;&amp;#10;        popup_buttons = {}&amp;#10;        popup_buttons.back_button = {}&amp;#10;        popup_buttons.back_text = {}&amp;#10;        popup_buttons.close_button = {}&amp;#10;        // register position and size of popup's back button &amp;#10;        popup_buttons.back_button.width  = 200&amp;#10;        popup_buttons.back_button.height = 50&amp;#10;        popup_buttons.back_button.x      = (-halfimg_x+(popup_buttons.back_button.width/2))&amp;#10;        popup_buttons.back_button.y      = (-halfscreen_y + (halfscreen_y*.1)) + popup_buttons.back_button.height&amp;#10;&amp;#10;&amp;#10;        // register position and size of popup's back text &amp;#10;        popup_buttons.back_text.width  = 200&amp;#10;        popup_buttons.back_text.height = 50&amp;#10;        popup_buttons.back_text.x      = popup_buttons.back_button.x + popup_buttons.back_button.width/2 +popup_buttons.back_text.width/2 &amp;#10;        popup_buttons.back_text.y      = popup_buttons.back_button.y&amp;#10;&amp;#10;&amp;#10;        // register position and size of popup's close button &amp;#10;        popup_buttons.close_button.width  = 25&amp;#10;        popup_buttons.close_button.height = 25&amp;#10;        popup_buttons.close_button.x      = (halfimg_x - (halfimg_x*.1)) &amp;#10;        popup_buttons.close_button.y      = (halfscreen_y-(halfscreen_y*.05)) - popup_buttons.close_button.height&amp;#10;&amp;#10;        // memory test buttons&amp;#10;        memory_button            = {}&amp;#10;        memory_button.yes_button = {}&amp;#10;        memory_button.no_button  = {}&amp;#10;&amp;#10;        memory_button.yes_button.width      = hsize/10&amp;#10;        memory_button.yes_button.height     = hsize/20&amp;#10;        memory_button.yes_button.x          = -hsize/10&amp;#10;        memory_button.yes_button.y          = -hsize/10&amp;#10;&amp;#10;        memory_button.no_button.width       = hsize/10&amp;#10;        memory_button.no_button.height      = hsize/20&amp;#10;        memory_button.no_button.x           = hsize/10&amp;#10;        memory_button.no_button.y           = -hsize/10&amp;#10;        console.log('y_scale-ratio', y_scale)&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="thisExp.addData('X Scale',x_scale)&amp;#10;thisExp.addData('Y Scale',y_scale)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="scaleCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textTop">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="20" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="textTop" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, topScreenInstruction)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Resize the Image: Grab a physical credit card for reference and adjust the image on the screen so that it matches the size of your physical credit card.&amp;#10;&amp;#10;Use the Arrow Keys for Resizing:&amp;#10;⬆ Up Arrow: Increase the height (make the image taller).&amp;#10;⬇ Down Arrow: Decrease the height (make the image shorter).&amp;#10;⬅ Left Arrow: Decrease the width (make the image narrower).&amp;#10;➡ Right Arrow: Increase the width (make the image wider)." valType="str" updates="constant" name="text"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="textBottom">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="20" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="textBottom" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,bottomScreenInstruction)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please press the SPACE BAR to advance to the next page when you are done." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="ccimage">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="bank-1300155_640.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="ccimage" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, ccImageY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(x_size*x_scale, y_size*y_scale)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="up_button">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="up_button" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="-90" valType="num" updates="constant" name="ori"/>
        <Param val="(ss_up_buttonX,ss_up_buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="down_button">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="down_button" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="90" valType="num" updates="constant" name="ori"/>
        <Param val="(ss_up_buttonX,-ss_up_buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_button">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_button" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="180" valType="num" updates="constant" name="ori"/>
        <Param val="(ss_left_buttonX,ss_right_buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_button">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_button" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="" valType="num" updates="constant" name="ori"/>
        <Param val="(ss_right_buttonX,ss_right_buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="screenScaleMouse">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="screenScaleMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="1" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="instructions_minisurvey"/>
    <Routine name="setTrialParametersDemographic">
      <CodeComponent name="getTrialParametersDemographic">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="demogBlockIndx = 0" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log('slider size demog init: ', sliderSize)&amp;#10;&amp;#10;// setup trial parameters&amp;#10;trialproperties         = thisStimulus_listD[&quot;trialproperties&quot;] // cell that indicates the number of passages and questions&amp;#10;//console.log('stim list D', thisStimulus_listD)&amp;#10;trialproperties         = trialproperties.split(&quot;;&quot;) &amp;#10;//console.log('trialdata',trialproperties)&amp;#10;// likert counts&amp;#10;likertCount             = trialproperties[0]&amp;#10;//console.log('likertCount text',likertCount)&amp;#10;likertCount             = getItemCount(likertCount)&amp;#10;//likertCount = Number(likertCount[likertCount.length-1]) // get the last element (count)&amp;#10;&amp;#10;// textbox counts &amp;#10;textboxCount            = trialproperties[1]&amp;#10;//console.log('textboxCount text',textboxCount)&amp;#10;textboxCount            = getItemCount(textboxCount)&amp;#10;&amp;#10;//textboxCount = Number(textboxCount[textboxCount.length-1]) // get the last element (count)&amp;#10;&amp;#10;&amp;#10;//randomization of questions within a set (1= yes, 0=no)&amp;#10;randomizeQuestions      = trialproperties[2]&amp;#10;randomizeQuestions      = Number(randomizeQuestions[randomizeQuestions.length-1]) // get the last element (count)&amp;#10;&amp;#10;// create likert questions' index array&amp;#10;rand_lo = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = range(0, likertCount), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    rand_lo.push(_pj_c+1);&amp;#10;}&amp;#10;//console.log(rand_lo)&amp;#10;// create textbox questions' index array&amp;#10;rand_to = [];//[1,2,3,4,5,6,7,8,9,10];&amp;#10;for (var i, _pj_c = 0, _pj_a = range(0, textboxCount), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    rand_to.push(_pj_c+1);&amp;#10;}&amp;#10;&amp;#10;if (randomizeQuestions === 1) {&amp;#10;     rand_lo            = randomArrayShuffle(rand_lo);&amp;#10;     rand_to            = randomArrayShuffle(rand_to);&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;// what is this trial: practice or test?&amp;#10;trialType               = thisStimulus_listD['trialType'];&amp;#10;&amp;#10;&amp;#10;blockName               = &quot;demographic_scale&quot;;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getTrialParametersDemographic" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="displayDemographicQuestions">
      <CodeComponent name="initiateQuestionDemographic">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// call the question text &amp;#10;let questions = [&amp;#10;  [&amp;#10;    &quot;hyperlkinkAwarenss&quot;,&amp;#10;    &quot;Have you heard of the word hyperlinks?&quot;,&amp;#10;    &quot;Yes;No&quot;&amp;#10;  ],&amp;#10;  [&amp;#10;    &quot;hyperlkinkKnowledge&quot;,&amp;#10;    &quot;Do you know what Hyperlinks are?&quot;,&amp;#10;    &quot;Yes;No&quot;&amp;#10;  ],&amp;#10;  [&amp;#10;    &quot;hyperlinkBenefit&quot;,&amp;#10;    &quot;If you read information in the hyperlinks, did they help you understand the main article better?&quot;,&amp;#10;    &quot;Strongly Agree;Agree;Neutral;Disagree;Strongly Disagree&quot;,&amp;#10;  ],&amp;#10;  [&amp;#10;    &quot;postAttention&quot;,&amp;#10;    &quot;To what extent did you pay attention to each question and consider your responses before answering?&quot;,&amp;#10;    &quot;Extremely attentive;Attentive;Neutral;Inattentive;Extremely Inattentive&quot;,&amp;#10;  ],&amp;#10;  [&amp;#10;    &quot;postRandomly&quot;,&amp;#10;    &quot;Did you provide responses randomly or without careful consideration during any part of the  experiment?&quot;,&amp;#10;    &quot;No all responses were thoughtful;Yes, a few responses were random;Yes, several responses were random;I'm not sure;Prefer not to say.&quot;,&amp;#10;  ],&amp;#10;];&amp;#10;&amp;#10;currentQuestionDescription = questions[post_survey_loop.thisN][0];&amp;#10;currentQuestionDemographic = questions[post_survey_loop.thisN][1];&amp;#10;sliderLabels = questions[post_survey_loop.thisN][2];&amp;#10;&amp;#10;&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID                          = currentQuestionDescription;&amp;#10;&amp;#10;//what is the set ID&amp;#10;setID = &quot;post_survey&quot;&amp;#10;&amp;#10;// change additional question text's centering and style&amp;#10;questionTextDemographic.setAlignHoriz('left')&amp;#10;questionTextDemographic.bold = true;&amp;#10;pressSpaceTextDemographic.setAlignHoriz('left')&amp;#10;pressSpaceTextDemographic.bold = true;&amp;#10;&amp;#10;// adjust slider vertical size depending on the number of options &amp;#10;// get slider labels from the excel file&amp;#10;console.log('slider size hyper pref before: ', sliderSize)&amp;#10;&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount = (sliderLabels.length);&amp;#10;// if there are less then 3 options on the slider, &amp;#10;// decrease the vertical size of the slider by half&amp;#10;if (labelCount &lt; 3){ &amp;#10;        sliderSize[1] = (vsize*26/100)/2.5  &amp;#10;    } else {&amp;#10;         sliderSize[1] = vsize*26/100;&amp;#10;        }&amp;#10;    &amp;#10;console.log('slider size hyper pref after: ', sliderSize)&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initiateQuestionDemographic" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="questionTextDemographic">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionTextDemographic" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentQuestionDemographic" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpaceTextDemographic">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpaceTextDemographic" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please press the button below to proceed after your choice." valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="dradiobutton_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="dradiobutton_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="dradiobutton_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="dradiobutton_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="dradiobutton_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="dradiobutton_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="dradiobutton_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="dradiobutton_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="dradiobutton_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="dradiobutton_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="dradiobutton_6">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="dradiobutton_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="dradiobutton_7">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="dradiobutton_7" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="dradiobutton_8">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="dradiobutton_8" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="dradiobutton_9">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="dradiobutton_9" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SliderComponent name="questionSliderDemographic">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionSliderDemographic" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="sliderPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="updateAndRegisterDemographic">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="////////////////////////////////////////////////&amp;#10;//// UPDATE SLIDER LABELS, SIZE, COLOR ETC. ////&amp;#10;////////////////////////////////////////////////&amp;#10;&amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels                        = sliderLabels.split(&quot;;&quot;);&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount                          = (sliderLabels.length);&amp;#10;sliderLabels                        = sliderLabels.reverse();&amp;#10;&amp;#10;// create tick marks so that data registry makes sense in terms of scores of each &amp;#10;// label: start from 1 not 0.&amp;#10;tickMarks                           = range(1,labelCount);&amp;#10;&amp;#10;// display shuffled labels as tick marks &amp;#10;questionSliderDemographic.setLabels(sliderLabels);&amp;#10;&amp;#10;// change ticks of the slider&amp;#10;questionSliderDemographic.setTicks(tickMarks);    &amp;#10;&amp;#10;// change font of the slider text&amp;#10;questionSliderDemographic.setFontSize(labelTextSize*y_scale);&amp;#10;&amp;#10;// adjust slider's position and size&amp;#10;questionSliderDemographic._pos      = sliderPosition;&amp;#10;questionSliderDemographic._size     = sliderSize;&amp;#10;&amp;#10;// change slider's color and marker properties&amp;#10;questionSliderDemographic._lineColor = col_white // color of static circle ;&amp;#10;&amp;#10;// what are the maximum amount of radio buttons of this slider&amp;#10;// count radiobutton_# components, now it is 9.&amp;#10;labelPosition_y                     = Math.abs(sliderSize[1] / (labelCount-1));&amp;#10;&amp;#10;positions                           = [];&amp;#10;&amp;#10;maxLabels                           = 9;&amp;#10;&amp;#10;radiobutton_size                    = [sliderSize[0]* 1.15, sliderSize[0]* 1.15];&amp;#10;&amp;#10;evenLabelCount                      = ((labelCount % 2) === 0);&amp;#10;// name of radio components&amp;#10;radioComponentName                  = 'dradiobutton_';&amp;#10;&amp;#10;if (evenLabelCount) {&amp;#10;    console.log('here even label')&amp;#10;    // there is no middle label, so get the half of the distance&amp;#10;    // of labels and move on from there while positioning the radio buttons &amp;#10;    labelPosition_y                 = labelPosition_y / 2;&amp;#10;&amp;#10;    // initialize label position coordinate multiplier&amp;#10;    positionMultiplier              = 1;&amp;#10;&amp;#10;    // loop over number of labels&amp;#10;    for (var k = 0; k &lt; labelCount; k++){&amp;#10;        &amp;#10;        // initialize label number index&amp;#10;        var buttonNo                = k + 1;                  &amp;#10;&amp;#10;        if ((k % 2) === 0) {&amp;#10;            // increase the position multipler at every odd number &amp;#10;            // this increases the distance from the middle label every third label&amp;#10;            if (k &gt; 1) {&amp;#10;&amp;#10;                positionMultiplier  = positionMultiplier+2; &amp;#10;            }  &amp;#10;            positions[k]            = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)];&amp;#10;&amp;#10;        } else{&amp;#10;&amp;#10;            positions[k]            = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];&amp;#10;            &amp;#10;        }&amp;#10;        // enter the position and size values into individual label radio buttons  &amp;#10;        // position&amp;#10;        eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;        // draw the changes &amp;#10;        eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;        // console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;    }    &amp;#10;    &amp;#10;} else {&amp;#10;        // if there are odd number of labels&amp;#10;        &amp;#10;        // there will be a middle label which should be placed at the &amp;#10;        // default position of the slider&amp;#10;        dradiobutton_1._pos         = [sliderPosition[0], sliderPosition[1]];&amp;#10;        dradiobutton_1._size        = radiobutton_size;&amp;#10;&amp;#10;        eval(radioComponentName + 1 + '._pos' +'= ['+ sliderPosition[0] +','+ sliderPosition[1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + 1 + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;&amp;#10;        // initialize label position coordinate multiplier&amp;#10;        positionMultiplier          = 0;&amp;#10;&amp;#10;        // loop over labels&amp;#10;        for (var k = 1; k &lt; labelCount; k++){            &amp;#10;            // initialize label number index&amp;#10;            var buttonNo = k + 1;&amp;#10;            &amp;#10;            if ((k % 2) === 0) {&amp;#10;&amp;#10;                positions[k]        = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)]; &amp;#10;&amp;#10;            } else{&amp;#10;                // increase the position multipler at every odd number &amp;#10;                // this increases the distance from the middle label every third label&amp;#10;                positionMultiplier  = positionMultiplier+1;&amp;#10;                positions[k]        = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];   &amp;#10;                &amp;#10;            }&amp;#10;            // console.log('uneven k',k);&amp;#10;            // console.log('uneven positionMultiplier',positionMultiplier);&amp;#10;            // enter the position and size values into individual label radio buttons  &amp;#10;            // position&amp;#10;            eval(radioComponentName + buttonNo + '._pos' +'= ['+ positions[k][0] +','+ positions[k][1]+'];' );&amp;#10;            // size&amp;#10;            eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;            // draw the changes &amp;#10;            eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;&amp;#10;            // console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;        }&amp;#10;    &amp;#10;    }&amp;#10;&amp;#10;&amp;#10;// remove radio buttons of slider labels that do not exist&amp;#10;for (var i = labelCount; i &lt;= maxLabels - 1 ; i++){&amp;#10;    console.log(i);&amp;#10;    var buttonNo = i + 1;&amp;#10;    positions[i] = [sliderPosition[0], sliderPosition[1]+labelPosition_y];&amp;#10;    eval(radioComponentName + buttonNo + '._pos'+'= ['+ 0 +','+ 0+'];' );&amp;#10;    eval(radioComponentName + buttonNo + '._size'+'='+1+';' );    &amp;#10;}&amp;#10;&amp;#10;&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if thisIteration['itemType'] != None:&amp;#10;    sliderLabelsInPy = thisIteration['sliderLabels']; # for some reason it does not accept labels from excel, so I assign another variable for it&amp;#10;    sliderLabelsInPy = sliderLabelsInPy.split(&quot;;&quot;)&amp;#10;    #print(sliderLabelsInPy)&amp;#10;&amp;#10;    labelCount = len(sliderLabelsInPy)&amp;#10;    tickMarks = list(range(labelCount))&amp;#10;    tickMarks = [x+1 for x in tickMarks]&amp;#10;&amp;#10;        &amp;#10;    # create new slider with updated labels&amp;#10;    comp_question = visual.Slider(win=win, name='comp_question',&amp;#10;        startValue=None, size=(.01, .2), pos=(-.75, -.1), units=None,&amp;#10;        labels=sliderLabelsInPy, ticks=tickMarks, granularity=1.0,&amp;#10;        style='radio', styleTweaks=(), opacity=None,&amp;#10;        color='Black', fillColor='White', borderColor='Black', colorSpace='rgb',&amp;#10;        font='Arial', labelHeight=normFontSize,&amp;#10;        flip=True,labelWrapWidth = generalWrapWidth, depth=-3, readOnly=False)&amp;#10;    question_text.setAlignHoriz('left')&amp;#10;    #for label in comp_question.labelObjs:&amp;#10;           # label.height = generalFontSize  # Or whatever size you want    &amp;#10;            #label.wrapWidth = 5" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="compChoice = questionSliderDemographic.getRating();&amp;#10;&amp;#10;// create a for loop using length of labels and update these like that&amp;#10;for (let i = 0; i &lt; labelCount; i++) {&amp;#10;    //console.log('current label for wrapwidth',i)&amp;#10;    //console.log('type of I',typeof i.toString())&amp;#10;    questionSliderDemographic._pixiLabels[i.toString()]._style._wordWrap = true&amp;#10;    questionSliderDemographic._pixiLabels[i.toString()]._style._wordWrapWidth = wrapWidthText    &amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// get the selected option among the labels&amp;#10;compChoiceText = sliderLabels[compChoice-1]; // -1 because label index starts with 0, tick mark starts with 1. &amp;#10;&amp;#10;isGender = currentQuestionDescription === &quot;gender&quot;;&amp;#10;isVision = currentQuestionDescription === &quot;visionCorrection&quot;;&amp;#10;&amp;#10;if (isGender === true){&amp;#10;        participantGender = (sliderLabels[compChoice-1]);&amp;#10;    }&amp;#10;&amp;#10;if (isVision === true) {&amp;#10;        participantVision = (sliderLabels[compChoice-1]);&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;// get reaction time from psychopy's mouse component &amp;#10;mouselength             = mouseDemographic.time.length;&amp;#10;// get the mouse component's starting second&amp;#10;mouse_tStart            = mouseDemographic.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart           = questionTextDemographic.tStart; &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick              = mouseDemographic.time[mouselength-1]; &amp;#10;// add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;demographicRT           = validClick + mouse_tStart - button_tStart; &amp;#10;&amp;#10;// get the zoom level of browser&amp;#10;var browserZoom     = window.outerWidth*100 / window.innerWidth;&amp;#10;// format date&amp;#10;registeryDate       = util.MonotonicClock.getDateStr();&amp;#10;registeryDate       = formatDateTime(registeryDate);&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(&quot;post_survey&quot;); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;data_passageSpacing.push([]); // what was the spacing used in this passage&amp;#10;&amp;#10;// reaction time&amp;#10;data_passageRT.push(demographicRT); &amp;#10;// words per minute&amp;#10;data_passageWPM.push([]); &amp;#10;data_passageWordCount.push([]); &amp;#10;&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;data_feedbackRating.push([]) // rating of the likert scale&amp;#10;&amp;#10;data_surveyRT.push(questionReactionTime); // time to respond to comprehension question&amp;#10;data_compChoice.push(compChoiceText) // chosen option is registered as text&amp;#10;// remove radio buttons so that they won't appear at the center in next trial&amp;#10;for (var i = 0; i &lt; maxLabels; i++) {&amp;#10;    var buttonNo = i + 1;&amp;#10;    eval(radioComponentName + buttonNo + '._pos'+'= ['+ 0 +','+ 0+'];' );&amp;#10;    eval(radioComponentName + buttonNo + '._size'+'='+1+';' );    &amp;#10;    &amp;#10;    }" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="updateAndRegisterDemographic" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_demographic">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_demographic" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionSliderDemographic.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseDemographic">
        <Param val="nextButton_demographic" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseDemographic" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionSliderDemographic.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="textBoxQuestions">
      <CodeComponent name="initiateTextbox">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// create the excel column name that represents the current question text&amp;#10;questionIdentifier              = ('textbox'+((rand_to[textbox_trials.thisN]).toString())+'text')&amp;#10;itemIDIdentifier                = ('textbox'+((rand_to[textbox_trials.thisN]).toString())+'ID')&amp;#10;// call the question text &amp;#10;currentTextboxItem              = thisStimulus_listD[questionIdentifier];&amp;#10;currentTextboxItem              = currentTextboxItem.split(&quot;;&quot;) &amp;#10;currentTextboxDescription       = currentTextboxItem[0] // label for this question, used for registry&amp;#10;currentTextboxTextDemographic   = currentTextboxItem[1] // question text itself&amp;#10;//console.log(&quot;text box items&quot;,currentTextboxItem);&amp;#10;&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID                          = currentTextboxDescription&amp;#10;&amp;#10;//what is the set ID&amp;#10;setID                           = thisStimulus_listD[&quot;setID&quot;];&amp;#10;&amp;#10;// determine which of the text box question is about to be displayed&amp;#10;// this is done to change the instructions regarding how to fill out &amp;#10;// the textbox depending on the question. &amp;#10;isMail                          = currentTextboxDescription === &quot;email&quot;;&amp;#10;isAge                           = currentTextboxDescription === &quot;age&quot;;&amp;#10;isOtherText                     = (isAge || isMail) === false;&amp;#10;//console.log(&quot;ismail&quot;,isMail,&quot;isAge&quot;,isAge,&quot;isOtherText&quot;,isOtherText);&amp;#10;&amp;#10;// change additional question text's centering and weight&amp;#10;pressSpaceTextTextbox.bold      = true;&amp;#10;question_textbox.bold           = true;&amp;#10;&amp;#10;pressSpaceTextTextbox.setAlignHoriz('left')&amp;#10;question_textbox.setAlignHoriz('left')&amp;#10;// start Timer for 500 ms periods to scan for the text &amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime                       = myClock.getTime();&amp;#10;&amp;#10;&amp;#10;// conditional instructions on how to fill out the text box &amp;#10;if (isMail === true) {&amp;#10;        // how to fill the mail textbox&amp;#10;        textBoxFill = &quot;&quot;;&amp;#10;        pressSpaceTextFill = &quot;Do not use spaces, enter a valid email format: example@gmail.com\n\n&quot;;&amp;#10;    }&amp;#10;if (isAge === true) {&amp;#10;        // how to fill the age textbox&amp;#10;        textBoxFill = &quot;&quot;;&amp;#10;        pressSpaceTextFill =&quot;Do not use spaces, enter your age in numbers; example: 31\n\n&quot;;&amp;#10;    }&amp;#10;if (isOtherText === true) {&amp;#10;        // how to fill other textboxes&amp;#10;        textBoxFill = &quot;&quot;;&amp;#10;        pressSpaceTextFill = &quot;Do not use paragraph breaks at the start or end of your response \n\n&quot;;&amp;#10;    }" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initiateTextbox" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="fill_textbox">
        <Param val="center-left" valType="str" updates="constant" name="alignment"/>
        <Param val="center-left" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="30" valType="num" updates="constant" name="borderWidth"/>
        <Param val="-0.5373, -0.5608, -0.5608" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="editable"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="25" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="fill_textbox" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="[xAxisCenter, -50]" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="textboxSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$textBoxFill" valType="str" updates="set every repeat" name="text"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <CodeComponent name="getTextFill">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;fill_textbox.refresh()&amp;#10;console.log(&quot;text box items&quot;,fill_textbox);&amp;#10;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// get the text inside the text box&amp;#10;sliderChoice = demoSlider.getRating();&amp;#10;textInput = fill_textbox._pixi.text;&amp;#10;textInput = textInput.trim();&amp;#10;&amp;#10;if (currentTextboxTextDemographic.includes('highest degree')) {&amp;#10;    textInput = demoSliderLabels[sliderChoice - 1] || '';&amp;#10;    console.error(textInput)&amp;#10;}&amp;#10;// check if text input contains &quot;@&quot; and &quot;.&quot; for mail input and not SPACES&amp;#10;//containsSpace = (textInput.indexOf(' ') === -1);&amp;#10;containsMail = ((textInput.indexOf('@') &gt; -1) &amp;&amp; (textInput.indexOf('.') &gt; -1) &amp;&amp;  (textInput.indexOf(&quot;example&quot;) === -1));&amp;#10;containsMail = containsMail;&amp;#10;//console.log('contains mail')&amp;#10;//console.log(containsMail);&amp;#10;// allow continue only if age input consists of two characters, does not check for number type&amp;#10;validAge = (textInput.length &gt;= 2); &amp;#10;anyCharacterTyped = (textInput.length &gt;= 1); &amp;#10;isNumber = isNaN(textInput) === false; //this condition returns true when input is a number&amp;#10;validAge = validAge &amp;&amp; isNumber; &amp;#10;&amp;#10;if (clearEventAfterChoice === 1){&amp;#10;    psychoJS.eventManager.clearEvents();    // clears keypress events&amp;#10;                                            // does not terminate the loop prematurely        &amp;#10;    }&amp;#10;&amp;#10;currentTime = myClock.getTime();&amp;#10;twoSecondElapsed = currentTime-startTime &gt;=keyboardPauseDuration;&amp;#10;if (twoSecondElapsed===true){&amp;#10;    if ((isMail &amp;&amp; containsMail) || (isAge &amp;&amp; validAge) || (isOtherText &amp;&amp; anyCharacterTyped)) {&amp;#10;        //fill_textbox.borderColor= [0, 1, 0];&amp;#10;        if (clearEventAfterChoice === 1){&amp;#10;            psychoJS.eventManager.clearEvents(); // clears keypress events after choice so that previous unrelated space &amp;#10;            clearEventAfterChoice=0;             // does not terminate the loop prematurely        &amp;#10;            }&amp;#10;        var _pj;&amp;#10;        function _pj_snippets(container) {&amp;#10;            function in_es6(left, right) {&amp;#10;                if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;                    return (right.indexOf(left) &gt; (- 1));&amp;#10;                } else {&amp;#10;                    if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                        return right.has(left);&amp;#10;                    } else {&amp;#10;                        return (left in right);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            container[&quot;in_es6&quot;] = in_es6;&amp;#10;            return container;&amp;#10;        }&amp;#10;&amp;#10;        _pj = {};&amp;#10;        _pj_snippets(_pj);&amp;#10;        keys = psychoJS.eventManager.getKeys();&amp;#10;        console.log(keys);&amp;#10;            if (keys.length) {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {         &amp;#10;                    continueRoutine = false;            &amp;#10;                } else {&amp;#10;                        psychoJS.eventManager.clearEvents();&amp;#10;                        questionReactionTime = myClock.getTime()-startTime&amp;#10;                    }&amp;#10;            }&amp;#10;    } else {&amp;#10;            //fill_textbox.borderColor= [1, 0, 0];&amp;#10;            psychoJS.eventManager.clearEvents(); &amp;#10;        }&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (isAge===true) {&amp;#10;        participantAge = textInput;&amp;#10;    }&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;// format date&amp;#10;registeryDate = util.MonotonicClock.getDateStr()&amp;#10;registeryDate = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_totalTrialIndex.push(&quot;demographic_trials&quot;); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;&amp;#10;data_passageRT.push([]); // words per minute&amp;#10;data_passageWPM.push([]); // words per minute&amp;#10;data_passageWordCount.push([]); &amp;#10;data_passageSpacing.push([]); // what was the spacing used in this passage&amp;#10;&amp;#10;&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;data_feedbackRating.push([]) // rating of the likert scale&amp;#10;&amp;#10;data_surveyRT.push(questionReactionTime); // time to respond to comprehension question&amp;#10;data_compChoice.push(textInput) // chosen option is registered as text&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="partAge = fill_textbox.text" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getTextFill" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="question_textbox">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="question_textbox" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter,questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentTextboxTextDemographic + &quot;\n(enter the text into the box below)&quot;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpaceTextTextbox">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpaceTextTextbox" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$(pressSpaceTextFill+ &quot;Please press the ENTER to advance to the next page after you type in.&quot;)" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="demoRadio_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="demoRadio_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="demoRadio_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="demoRadio_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="demoRadio_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="demoRadio_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="demoRadio_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="demoRadio_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="demoRadio_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="demoRadio_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="demoRadio_6">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="demoRadio_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SliderComponent name="demoSlider">
        <Param val="white" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="&quot;PhD/Doctoral Degree&quot;, &quot;Masters Degree&quot;,  &quot;Bachelor Degree&quot;, &quot;Associates Degree&quot;, &quot;Some College&quot;, &quot;High School&quot;" valType="list" updates="constant" name="labels"/>
        <Param val="labelTextSize*y_scale" valType="num" updates="constant" name="letterHeight"/>
        <Param val="demoSlider" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[sliderPosition[0]+125,sliderPosition[1]];" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="False" valType="bool" updates="constant" name="storeRating"/>
        <Param val="False" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3, 4, 5, 6)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="initDemoSlider">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="positions                       = []&amp;#10;radiobutton_size                = 23 &amp;#10;&amp;#10;&amp;#10;// initialize colors for slider &amp;#10;col_white                       = new util.Color('white');&amp;#10;col_grey                        = new util.Color('grey');&amp;#10;col_red                         = new util.Color('red');&amp;#10;col_black                       = new util.Color('black');&amp;#10;&amp;#10;&amp;#10;&amp;#10;demoRadios = [&amp;#10;    demoRadio_1,&amp;#10;    demoRadio_2,&amp;#10;    demoRadio_3,&amp;#10;    demoRadio_4,&amp;#10;    demoRadio_5,&amp;#10;    demoRadio_6,&amp;#10;];&amp;#10;&amp;#10;demoSliderLabels = [ &amp;#10;    &quot;PhD/Doctoral Degree&quot;, &amp;#10;    &quot;Masters Degree&quot;,  &amp;#10;    &quot;Bachelor Degree&quot;, &amp;#10;    &quot;Associates Degree&quot;, &amp;#10;    &quot;Some College&quot;, &amp;#10;    &quot;High School&quot;&amp;#10;];&amp;#10;    " valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;////////////////////////////////////////////////&amp;#10;//// UPDATE SLIDER LABELS, SIZE, COLOR ETC. ////&amp;#10;////////////////////////////////////////////////&amp;#10;&amp;#10;&amp;#10;&amp;#10;labelCount                      = 6;&amp;#10;&amp;#10;&amp;#10;// 5 (number of labels - 1)&amp;#10;labelPosition_y                 = Math.abs(sliderSize[1] / (5));&amp;#10;positions                       = [];&amp;#10;&amp;#10;demoSlider.setFontSize(labelTextSize*y_scale);&amp;#10;&amp;#10;// what are the maximum amount of radio buttons of this slider&amp;#10;// count radiobutton_# components, now it is 9.&amp;#10;radiobutton_size                = [sliderSize[0]* 1.15, sliderSize[0]* 1.15];&amp;#10;&amp;#10;// name of radio components&amp;#10;radioComponentName              = 'demoRadio_'&amp;#10;&amp;#10;&amp;#10;// console.log('here even label')&amp;#10;// there is no middle label, so get the half of the distance&amp;#10;// of labels and move on from there while positioning the radio buttons &amp;#10;labelPosition_y = labelPosition_y / 2;&amp;#10;&amp;#10;// initialize label position coordinate multiplier&amp;#10;positionMultiplier = 1;&amp;#10;&amp;#10;// loop over number of labels&amp;#10;for (var k = 0; k &lt; labelCount; k++){&amp;#10;    &amp;#10;    // initialize label number index&amp;#10;    var buttonNo = k + 1;&amp;#10;&amp;#10;    if ((k % 2) === 0) {&amp;#10;        // increase the position multipler at every odd number &amp;#10;        // this increases the distance from the middle label every third label&amp;#10;        if (k &gt; 1) {&amp;#10;&amp;#10;            positionMultiplier = positionMultiplier+2; &amp;#10;        }  &amp;#10;        positions[k] = [sliderPosition[0]+125, sliderPosition[1]+(positionMultiplier*labelPosition_y)];&amp;#10;&amp;#10;    } else{&amp;#10;&amp;#10;        positions[k] = [sliderPosition[0]+125, sliderPosition[1]-(positionMultiplier*labelPosition_y)];&amp;#10;        &amp;#10;    }&amp;#10;    // enter the position and size values into individual label radio buttons  &amp;#10;    // position&amp;#10;    eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' );&amp;#10;    // size&amp;#10;    eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;    // draw the changes &amp;#10;    eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;    console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;}    &amp;#10;    &amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;// remove radio buttons of slider labels that do not exist&amp;#10;for (var i = labelCount; i &lt;= maxLabels-1 ; i++){&amp;#10;    console.log(i);&amp;#10;    var buttonNo = i + 1;&amp;#10;    positions[i] = [sliderPosition[0]+125, sliderPosition[1]+labelPosition_y];&amp;#10;    eval(radioComponentName + buttonNo + '._pos'+'= ['+ 0 +','+ 0+'];' );&amp;#10;    eval(radioComponentName + buttonNo + '._size'+'='+1+';' );    &amp;#10;    eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;    &amp;#10;}&amp;#10;&amp;#10;&amp;#10;// console.log('comprehension slider', questionSlider)&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if thisIteration['itemType'] != None:&amp;#10;    sliderLabelsInPy = thisIteration['sliderLabels']; # for some reason it does not accept labels from excel, so I assign another variable for it&amp;#10;    sliderLabelsInPy = sliderLabelsInPy.split(&quot;;&quot;)&amp;#10;    #print(sliderLabelsInPy)&amp;#10;&amp;#10;    labelCount = len(sliderLabelsInPy)&amp;#10;    tickMarks = list(range(labelCount))&amp;#10;    tickMarks = [x+1 for x in tickMarks]&amp;#10;&amp;#10;        &amp;#10;    # create new slider with updated labels&amp;#10;    comp_question = visual.Slider(win=win, name='comp_question',&amp;#10;        startValue=None, size=(.01, .2), pos=(-.75, -.1), units=None,&amp;#10;        labels=sliderLabelsInPy, ticks=tickMarks, granularity=1.0,&amp;#10;        style='radio', styleTweaks=(), opacity=None,&amp;#10;        color='Black', fillColor='White', borderColor='Black', colorSpace='rgb',&amp;#10;        font='Arial', labelHeight=normFontSize,&amp;#10;        flip=True,labelWrapWidth = generalWrapWidth, depth=-3, readOnly=False)&amp;#10;    question_text.setAlignHoriz('left')&amp;#10;    #for label in comp_question.labelObjs:&amp;#10;           # label.height = generalFontSize  # Or whatever size you want    &amp;#10;            #label.wrapWidth = 5" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// create a for loop using length of labels and update these like that&amp;#10;for (let i = 0; i &lt; labelCount; i++) {&amp;#10;    //console.log('current label for wrapwidth',i)&amp;#10;    //console.log('type of I',typeof i.toString())&amp;#10;    demoSlider._pixiLabels[i.toString()]._style._wordWrap = true&amp;#10;    demoSlider._pixiLabels[i.toString()]._style._wordWrapWidth = wrapWidthText    &amp;#10;    demoSlider._pixiLabels[i.toString()]._style._align = &quot;left&quot;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;if (currentTextboxTextDemographic.includes('highest degree')) {&amp;#10;&amp;#10;    demoSlider.status = PsychoJS.Status.STARTED;&amp;#10;    demoSlider.setAutoDraw(true);&amp;#10;    &amp;#10;    fill_textbox.status = PsychoJS.Status.PAUSED;&amp;#10;    fill_textbox.setAutoDraw(false);&amp;#10;    &amp;#10;    for (let button of demoRadios) {&amp;#10;        button.status = PsychoJS.Status.STARTED;&amp;#10;        button.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;else { &amp;#10;&amp;#10;    demoSlider.status = PsychoJS.Status.PAUSED;&amp;#10;    demoSlider.setAutoDraw(false);&amp;#10;    &amp;#10;    fill_textbox.status = PsychoJS.Status.STARTED;&amp;#10;    fill_textbox.setAutoDraw(true);&amp;#10;    &amp;#10;    for (let button of demoRadios) {&amp;#10;        button.status = PsychoJS.Status.PAUSED;&amp;#10;        button.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initDemoSlider" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="writeDataToFile">
      <CodeComponent name="writeToFile">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="iterationCountTrials = data_totalTrialIndex.length;&amp;#10;trialColumNames = [&quot;trialNo&quot;,&quot;setID&quot;,&quot;itemID&quot; ,&quot;blockName&quot;, &quot;trialType&quot;,&quot;fontName&quot;,&quot;linkCondition&quot;,&quot;articleSkipType&quot;,&quot;wordCount&quot;,&quot;passageRT&quot;, &quot;wordsPerMinute&quot;, &quot;comprehensionAccuracy&quot;, &quot;comprehensionChoice&quot;,&quot;choiceRT&quot;,&quot;feedbackSurveyRating&quot;];&amp;#10;&amp;#10;// add headers right above the data &amp;#10;psychoJS.experiment.addData(&quot;dateTime&quot;, &quot;dateTime&quot;)&amp;#10;psychoJS.experiment.addData(trialColumNames[0], trialColumNames[0]);&amp;#10;psychoJS.experiment.addData(&quot;subid&quot;, &quot;subid&quot;)&amp;#10;psychoJS.experiment.addData(&quot;gender&quot;, &quot;gender&quot;)&amp;#10;psychoJS.experiment.addData(&quot;age&quot;, &quot;age&quot;)&amp;#10;psychoJS.experiment.addData(&quot;counterbalance_group&quot;, &quot;counterbalance_group&quot;)&amp;#10;for (let columni = 1; columni &lt; trialColumNames.length; columni++) {&amp;#10;    // loop over trialColumnNames and create headers for the datasheet&amp;#10;  psychoJS.experiment.addData(trialColumNames[columni], trialColumNames[columni]);&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;X_Scale&quot;, &quot;X_Scale&quot;);&amp;#10;psychoJS.experiment.addData(&quot;Y_Scale&quot;, &quot;Y_Scale&quot;);&amp;#10;psychoJS.experiment.addData(&quot;IsFullScreen&quot;, &quot;IsFullScreen&quot;)&amp;#10;psychoJS.experiment.addData(&quot;window_width&quot;, &quot;window_width&quot;)&amp;#10;psychoJS.experiment.addData(&quot;window_height&quot;, &quot;window_height&quot;)&amp;#10;psychoJS.experiment.addData(&quot;browser&quot;, &quot;browser&quot;)&amp;#10;psychoJS.experiment.addData(&quot;browserZoomLevel&quot;, &quot;browserZoomLevel&quot;)&amp;#10;psychoJS.experiment.nextEntry();&amp;#10;&amp;#10;//&amp;#10;// NOTE: REGISTER FASTEST FONT, SPACING, AND INTERACTION CONDITION TO ALL ROWS&amp;#10;//&amp;#10;&amp;#10;// write data in long format&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(0, iterationCountTrials), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];  &amp;#10;    psychoJS.experiment.addData(&quot;dateTime&quot;, data_dateTime[i])&amp;#10;    psychoJS.experiment.addData(trialColumNames[0], data_totalTrialIndex[i]);&amp;#10;    psychoJS.experiment.addData(&quot;subid&quot;, participantCode)    &amp;#10;    psychoJS.experiment.addData(&quot;gender&quot;, &quot;gender&quot;)&amp;#10;    psychoJS.experiment.addData(&quot;age&quot;, &quot;age&quot;)&amp;#10;    //psychoJS.experiment.addData(&quot;prolific_id&quot;, prolific_ID)&amp;#10;    psychoJS.experiment.addData(&quot;counterbalance_group&quot;, cb_group)&amp;#10;    psychoJS.experiment.addData(trialColumNames[1],  data_setID[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[2],  data_itemID[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[3],  data_blockName[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[4],  data_trialType[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[5],  data_passageFont[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[6],  data_passageSpacing[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[7],  data_articleSkipType[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[8],  data_passageWordCount[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[9],  data_passageRT[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[10],  data_passageWPM[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[11], data_compAccuracy[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[12], data_compChoice[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[13], data_surveyRT[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[14], data_feedbackRating[i]);       &amp;#10;    thisExp.addData(&quot;X_Scale&quot;, x_scale);&amp;#10;    thisExp.addData(&quot;Y_Scale&quot;, y_scale);&amp;#10;    psychoJS.experiment.addData(&quot;IsFullScreen&quot;, psychoJS.window._windowAlreadyInFullScreen)&amp;#10;    psychoJS.experiment.addData(&quot;window_width&quot;, psychoJS.window._size[0])&amp;#10;    psychoJS.experiment.addData(&quot;window_height&quot;, psychoJS.window._size[1])&amp;#10;    psychoJS.experiment.addData(&quot;browser&quot;, psychoJS._browser)&amp;#10;    psychoJS.experiment.addData(&quot;browserZoomLevel&quot;, data_zoomLevel[i])&amp;#10;    psychoJS.experiment.nextEntry();&amp;#10;}&amp;#10;&amp;#10;// add the date and time of completion to the database&amp;#10;currentDateTime = util.MonotonicClock.getDateStr();&amp;#10;currentDateTime = formatDateTime(currentDateTime);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;&amp;#10;#from os.path import exists&amp;#10;pathToFolder = &quot;E:\\Backups\\All Files\\Genel\\Is\\2022\\Upwork\\LabX\\readingExperiment2&quot;&amp;#10;outputFile = 'output.txt'&amp;#10;fullPath = pathToFolder+outputFile&amp;#10;#file_exists = exists(fullPath)&amp;#10;file_exists = 1&amp;#10;# register participant average data to all participant output file&amp;#10;if file_exists == 1:&amp;#10;    # append to existing data file &amp;#10;    with open(fullPath, 'a') as f:&amp;#10;        f.write('\t'.join(participantAverageData[0:]) + '\n')                  &amp;#10;elif file_exists == 0:&amp;#10;    # create new data file if there is no prior output data&amp;#10;    with open(fullPath, 'w') as f:&amp;#10;        f.write('\t'.join(averagedColumNames[0:]) + '\n')&amp;#10;        f.write('\t'.join(participantAverageData[0:]) + '\n')&amp;#10;               &amp;#10;        &amp;#10;# register trial by trial data of current participant&amp;#10;trialColumNames = ['trialNo','blockName','trialType','FontName','wordsPerMinute','comprehensionAccuracy','comprehensionChoice']&amp;#10;with open(pathToFolder+expInfo['participant']+'.txt', 'w') as f:&amp;#10;    numberRows = len(data_totalTrialIndex)&amp;#10;    f.write('\t'.join(trialColumNames[0:]) + '\n')&amp;#10;    for i in range(0,numberRows):        &amp;#10;        f.write(str(data_totalTrialIndex[i]) + &quot;\t&quot; + str(data_blockName[i]) + &quot;\t&quot; + str(data_trialType[i]) + &quot;\t&quot; +str(data_passageFont[i])+ &quot;\t&quot; +str(data_passageRT[i]) + &quot;\t&quot; +str(data_compAccuracy[i]) + &quot;\t&quot; +str(data_compChoice[i]) +&quot;\n&quot;)&amp;#10;        " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="writeToFile" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="finalInstructions">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="thanksText = &quot;Thank you for participating to this test!\n\n\n\n&quot;&amp;#10;&amp;#10;fitText = 'Your best ' +experimentType +' is ' + disp_fitCondition + ' with '+ disp_fitWpm + ' words per minute and %'+ disp_fitAcc + ' correct responses on comprehension questions.' + &quot;\n\n\n&quot;&amp;#10;clashText = 'Your worst ' +experimentType + ' is ' + disp_clashCondition + ' with '+ disp_clashWpm + ' words per minute and %'+ disp_clashAcc + ' correct responses on comprehension questions.' + &quot;\n\n\n\n&quot;&amp;#10;&amp;#10;pressSpace = &quot;You will be redirected to Prolific to receive your participation compensation.\n\nPress space to finish the experiment.&quot;&amp;#10;wholeFinalInstruction = thanksText+fitText+clashText + pressSpace;&amp;#10;finish_instructions.setAlignHoriz('left')" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="&amp;#10;    " valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="finish_instructions">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="finish_instructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$wholeFinalInstruction" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="1" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="9" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="general_instructions">
      <TextComponent name="generalInstructionsText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="generalInstructionsText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This test consists of 7 Newspaper Articles following a set of questions.&amp;#10;&amp;#10;During the reading sections, please read as quickly as you can, without reading out-loud or re-reading.&amp;#10;&amp;#10;However, be prepared to answer comprehension questions about the passage. You must select an answer to each question and press the button at the bottom of the screen to advance to the next page.&amp;#10;&amp;#10;If you want to take a break, please do so while on an instruction page, not during the reading rounds as the timer will be running.&amp;#10;&amp;#10;If you have questions, contact the primary investigator: Shalah Dean Thomas, 616-808-4832. &amp;#10;&amp;#10;Please press the button below to continue.&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="generalInstructionsText.setAlignHoriz(&quot;left&quot;);&amp;#10;&amp;#10;&amp;#10;console.log('slider size initial: ', sliderSize)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_Instructions_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_Instructions_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseInstructions_4">
        <Param val="nextButton_Instructions_4" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseInstructions_4" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="waitForNormalization">
      <CodeComponent name="normalizationCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="//// CAUTION ABOUT THE ORDER OF FONT FAMILY NAMES AND DIRECTORIES ////&amp;#10;&amp;#10;// place the family name and directory of the practice font in the first element ALWAYS&amp;#10;// in the example below the practice font is Arial&amp;#10;fontNames = ['ComicNormalized','ArialNormalized','GeorgiaNormalized','OpenSansNormalized','PoppinsNormalized','SourceSerifNormalized','RobotoNormalized','TimesNormalized','MerriweatherNormalized'];&amp;#10;fontDirectories = ['fonts/ComicSans.woff','fonts/ArialFont.woff','fonts/Georgia.woff','fonts/OpenSans.woff','fonts/Poppins.woff','fonts/SourceSerif.woff','fonts/Roboto.woff','fonts/TimesNew.woff','fonts/Merriweather.woff'];&amp;#10;howManyFonts = fontNames.length;&amp;#10;normalized_xsizes = {};&amp;#10;heightDifferences = {};" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="calibrationText.setAlignHoriz(&quot;center&quot;);&amp;#10;normiteration= normalizeFontTrials.thisN;&amp;#10;console.log('norm iteration', normiteration)&amp;#10;yourX = gen_normalization(fontDirectories[normiteration],fontNames[normiteration],fontNames[normiteration])&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="normXsize = yourX;&amp;#10;console.log('norm output',normXsize)&amp;#10;// create normalized font size &amp;#10;customXsize=[]&amp;#10;customXsize = Math.ceil(baseSizePixels * normXsize * passageSizeMultiplier); &amp;#10;console.log('custom norm size',customXsize)&amp;#10;&amp;#10;// register normalized font size (for display) in pixels&amp;#10;normalized_xsizes[fontNames[normiteration]] = customXsize;&amp;#10;console.log('normalized vector',normalized_xsizes)&amp;#10;// estimate the height difference for Y axis shift&amp;#10;HeightDif=[]&amp;#10;HeightDif = ((baseSizePixels)-Math.ceil(baseSizePixels * normXsize))*2;&amp;#10;&amp;#10;// adjust for Y axis shift after normalization&amp;#10;if (HeightDif &lt; 0) {&amp;#10;        HeightDif = Math.ceil(HeightDif);&amp;#10;    } else {&amp;#10;            HeightDif = Math.floor(-HeightDif);&amp;#10;        }        &amp;#10;heightDifferences[fontNames[normiteration]] = HeightDif;&amp;#10;console.log(fontNames[normiteration],'normSize',normXsize,'height difference',HeightDif);&amp;#10;console.log('height ddifferences',heightDifferences)&amp;#10;/*&amp;#10;if (normalizeFontTrials.thisN === 0) {&amp;#10;heightDifferences['Arial'] = 0;&amp;#10;normalized_xsizes['Arial'] = baseSizePixels*passageSizeMultiplier;&amp;#10;}&amp;#10;*/" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="normalizationCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_8">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_8" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="calibrationText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="constant" name="letterHeight"/>
        <Param val="calibrationText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="We are calibrating the test files for you. &amp;#10;&amp;#10;This shouldn't take more than 10 seconds.&amp;#10;&amp;#10;Please wait until the test instructions appear on the screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="waitFor10Seconds">
      <TextComponent name="waitFor10Secs">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="waitFor10Secs" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Experiment will start 10 seconds after this text disappears.&amp;#10;&amp;#10;Please wait for your next set of instructions to appear on the screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_7">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="waitFor10Secs.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_7" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="registerNormalization"/>
    <Routine name="generalInstructions2">
      <CodeComponent name="code_8">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="generalInstructionsText_2.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_8" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="generalInstructionsText_2">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="generalInstructionsText_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Thank you for agreeing to participate in this experiment. To receive compensation, please ensure you complete the following steps:&amp;#10;&amp;#10;1. Consent Form&amp;#10;2. Seating Instructions&amp;#10;3. Demographic Survey&amp;#10;4. Screening Activity&amp;#10;5. Read seven newspaper articles&amp;#10;6. Respond to all questions&amp;#10;&amp;#10;If you have questions, contact the primary investigator: Shalah Dean Thomas, 616-808-4832. &amp;#10;&amp;#10;Please press the button below to continue.&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="nextButton_GeneralInst">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_GeneralInst" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseGeneralInstructions">
        <Param val="nextButton_GeneralInst" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseGeneralInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="creditCardInstructions">
      <CodeComponent name="align_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (screenScaleTrials.thisN === 0){&amp;#10;        cardInstructions = &quot;Dear participant,\n\nYou will need to use your credit/debit card and adjust the size of a credit card image in the next step.\n\nYou will be asked to place your credit/debit card onto that image and will use arrow keys for resizing the image. Once the image is the same size as your credit/debit card, press space to confirm. You will do this twice for better measurement.\n\nPlease press the button below to advance to the next page.&quot;    &amp;#10;    } else {&amp;#10;        cardInstructions = &quot;Please resize the image once more.\n\nPlease press the button below to advance to the next page.&quot;&amp;#10;        }&amp;#10;&amp;#10;creditCardInstructionText.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="align_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="creditCardInstructionText">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="creditCardInstructionText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$cardInstructions" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="nextButton_card">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_card" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseCardInstructions">
        <Param val="nextButton_card" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseCardInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="displayFeedbackSurvey">
      <CodeComponent name="feedbackCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// create the excel column name that represents the current question text&amp;#10;feedbackSurveyIdentifier    = ('feedback'+((rand_fo[feedback_trials.thisN]).toString())+'text')&amp;#10;labelIdentifier             = ('feedback'+((rand_fo[feedback_trials.thisN]).toString())+'label')&amp;#10;itemIDIdentifier            = ('feedback'+((rand_fo[feedback_trials.thisN]).toString())+'ID')&amp;#10;&amp;#10;// console.log('rand_fo',rand_fo)&amp;#10;// console.log('feedback this N',feedback_trials.thisN)&amp;#10;// console.log('feedback survey identifier', feedbackSurveyIdentifier)&amp;#10;// console.log('feedback label identifier', labelIdentifier)&amp;#10;// console.log('feedback ID identifier', itemIDIdentifier)&amp;#10;&amp;#10;// call the question text &amp;#10;currentMiniQuestion         = thisStimulus_list[feedbackSurveyIdentifier];&amp;#10;currentMiniLabel            = thisStimulus_list[labelIdentifier];&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID                      = thisStimulus_list[itemIDIdentifier];&amp;#10;//what is the set ID&amp;#10;setID                       = thisStimulus_list[&quot;setID&quot;]&amp;#10;// change additional question text's centering and style&amp;#10;feedbackSurveyText.setAlignHoriz('left')&amp;#10;feedbackSurveyText.bold     = true;&amp;#10;pressFeedbackSpaceText.setAlignHoriz('left')&amp;#10;pressFeedbackSpaceText.bold = true;&amp;#10;&amp;#10;// adjust slider vertical size depending on the number of options &amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels                = thisStimulus_list[labelIdentifier];&amp;#10;sliderLabels                = sliderLabels.split(&quot;;&quot;);&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount                  = (sliderLabels.length);&amp;#10;// if there are less then 3 options on the slider, &amp;#10;// decrease the vertical size of the slider by half&amp;#10;if (labelCount &lt; 3){ &amp;#10;        sliderSize[1] = (vsize*26/100)/2.5  &amp;#10;    } else {&amp;#10;         sliderSize[1] = vsize*26/100;&amp;#10;        }&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="feedbackCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="feedbackSurveyText">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="feedbackSurveyText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentMiniQuestion" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressFeedbackSpaceText">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressFeedbackSpaceText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please press the button on the right hand corner to continue after your choice." valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="fradiobutton_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fradiobutton_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fradiobutton_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fradiobutton_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fradiobutton_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fradiobutton_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fradiobutton_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fradiobutton_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fradiobutton_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fradiobutton_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fradiobutton_6">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fradiobutton_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fradiobutton_7">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fradiobutton_7" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fradiobutton_8">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fradiobutton_8" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fradiobutton_9">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fradiobutton_9" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SliderComponent name="feedbackSurveySlider">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="Calibri" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="labelTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="feedbackSurveySlider" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="sliderPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3, 4, 5)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="updateAndRegisterFeedback">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="////////////////////////////////////////////////&amp;#10;//// UPDATE SLIDER LABELS, SIZE, COLOR ETC. ////&amp;#10;////////////////////////////////////////////////&amp;#10;&amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels = thisStimulus_list[labelIdentifier];&amp;#10;sliderLabels = sliderLabels.split(&quot;;&quot;);&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount = (sliderLabels.length);&amp;#10;sliderLabels = sliderLabels.reverse();&amp;#10;// create tick marks so that data registry makes sense in terms of scores of each &amp;#10;// label: start from 1 not 0.&amp;#10;tickMarks = range(1,labelCount);&amp;#10;&amp;#10;// display shuffled labels as tick marks &amp;#10;feedbackSurveySlider.setLabels(sliderLabels);&amp;#10;// change ticks of the slider&amp;#10;feedbackSurveySlider.setTicks(tickMarks);    &amp;#10;// change font of the slider text&amp;#10;feedbackSurveySlider.setFontSize(labelTextSize*y_scale);&amp;#10;// adjust slider's position and size&amp;#10;feedbackSurveySlider._pos = sliderPosition;&amp;#10;feedbackSurveySlider._size = sliderSize;&amp;#10;&amp;#10;// change slider's color and marker properties&amp;#10;feedbackSurveySlider._lineColor = col_white; // color of static circle ;&amp;#10;&amp;#10;labelPosition_y  = Math.abs(sliderSize[1] / (labelCount-1));&amp;#10;positions = [];&amp;#10;&amp;#10;// what are the maximum amount of radio buttons of this slider&amp;#10;// count radiobutton_# components, now it is 9.&amp;#10;maxLabels = 9;&amp;#10;&amp;#10;radiobutton_size = [sliderSize[0]* 1.15, sliderSize[0]* 1.15];&amp;#10;&amp;#10;evenLabelCount = ((labelCount % 2) === 0);&amp;#10;// name of radio components&amp;#10;radioComponentName = 'fradiobutton_'&amp;#10;&amp;#10;if (evenLabelCount) {&amp;#10;    console.log('here even label')&amp;#10;    // there is no middle label, so get the half of the distance&amp;#10;    // of labels and move on from there while positioning the radio buttons &amp;#10;    labelPosition_y = labelPosition_y / 2;&amp;#10;&amp;#10;    // initialize label position coordinate multiplier&amp;#10;    positionMultiplier = 1;&amp;#10;&amp;#10;    // loop over number of labels&amp;#10;    for (var k = 0; k &lt; labelCount; k++){&amp;#10;        &amp;#10;        // initialize label number index&amp;#10;        var buttonNo = k + 1;                  &amp;#10;&amp;#10;        if ((k % 2) === 0) {&amp;#10;            // increase the position multipler at every odd number &amp;#10;            // this increases the distance from the middle label every third label&amp;#10;            if (k &gt; 1) {&amp;#10;&amp;#10;                positionMultiplier =positionMultiplier+2; &amp;#10;            }  &amp;#10;            positions[k] = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)];&amp;#10;&amp;#10;        } else{&amp;#10;&amp;#10;            positions[k] = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];&amp;#10;            &amp;#10;        }&amp;#10;        // enter the position and size values into individual label radio buttons  &amp;#10;        // position&amp;#10;        eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;        // draw the changes &amp;#10;        eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;        console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;    }    &amp;#10;    &amp;#10;} else {&amp;#10;        // if there are odd number of labels&amp;#10;        &amp;#10;        // there will be a middle label which should be placed at the &amp;#10;        // default position of the slider&amp;#10;        fradiobutton_1._pos      = [sliderPosition[0], sliderPosition[1]];&amp;#10;        fradiobutton_1._size     = radiobutton_size;&amp;#10;        eval(radioComponentName + 1 + '._pos' +'= ['+ sliderPosition[0] +','+ sliderPosition[1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + 1 + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );        &amp;#10;        // initialize label position coordinate multiplier&amp;#10;        positionMultiplier = 0;&amp;#10;        // loop over labels&amp;#10;        for (var k = 1; k &lt; labelCount; k++){            &amp;#10;            // initialize label number index&amp;#10;            var buttonNo = k + 1;&amp;#10;            &amp;#10;            if ((k % 2) === 0) {&amp;#10;&amp;#10;                positions[k] = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)]; &amp;#10;&amp;#10;            } else{&amp;#10;                // increase the position multipler at every odd number &amp;#10;                // this increases the distance from the middle label every third label&amp;#10;                positionMultiplier =positionMultiplier+1 &amp;#10;                positions[k] = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];   &amp;#10;                &amp;#10;            }&amp;#10;            console.log('uneven k',k)&amp;#10;            console.log('uneven positionMultiplier',positionMultiplier)&amp;#10;            // enter the position and size values into individual label radio buttons  &amp;#10;            // position&amp;#10;            eval(radioComponentName + buttonNo + '._pos' +'= ['+ positions[k][0] +','+ positions[k][1]+'];' );&amp;#10;            // size&amp;#10;            eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;            // draw the changes &amp;#10;            eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;&amp;#10;            console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;        }&amp;#10;    &amp;#10;    }&amp;#10;&amp;#10;&amp;#10;// remove radio buttons of slider labels that do not exist&amp;#10;for (var i = labelCount; i &lt;= maxLabels - 1 ; i++){&amp;#10;    console.log(i);&amp;#10;    var buttonNo = i + 1;&amp;#10;    positions[i] = [sliderPosition[0], sliderPosition[1]+labelPosition_y];&amp;#10;    eval(radioComponentName + buttonNo + '._pos'+'= ['+ 0 +','+ 0+'];' );&amp;#10;    eval(radioComponentName + buttonNo + '._size'+'='+1+';' );    &amp;#10;    eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;}&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if thisIteration['itemType'] != None:&amp;#10;    sliderLabelsInPy = thisIteration['sliderLabels']; # for some reason it does not accept labels from excel, so I assign another variable for it&amp;#10;    sliderLabelsInPy = sliderLabelsInPy.split(&quot;;&quot;)&amp;#10;    #print(sliderLabelsInPy)&amp;#10;&amp;#10;    labelCount = len(sliderLabelsInPy)&amp;#10;    tickMarks = list(range(labelCount))&amp;#10;    tickMarks = [x+1 for x in tickMarks]&amp;#10;&amp;#10;        &amp;#10;    # create new slider with updated labels&amp;#10;    comp_question = visual.Slider(win=win, name='comp_question',&amp;#10;        startValue=None, size=(.01, .2), pos=(-.75, -.1), units=None,&amp;#10;        labels=sliderLabelsInPy, ticks=tickMarks, granularity=1.0,&amp;#10;        style='radio', styleTweaks=(), opacity=None,&amp;#10;        color='Black', fillColor='White', borderColor='Black', colorSpace='rgb',&amp;#10;        font='Arial', labelHeight=normFontSize,&amp;#10;        flip=True,labelWrapWidth = generalWrapWidth, depth=-3, readOnly=False)&amp;#10;    question_text.setAlignHoriz('left')&amp;#10;    #for label in comp_question.labelObjs:&amp;#10;           # label.height = generalFontSize  # Or whatever size you want    &amp;#10;            #label.wrapWidth = 5" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="feedbackChoice = feedbackSurveySlider.getRating();&amp;#10;&amp;#10;// create a for loop using length of labels and update wrap width of these labels&amp;#10;for (let i = 0; i &lt; labelCount; i++) {&amp;#10;    //console.log('current label for wrapwidth',i)&amp;#10;    //console.log('type of I',typeof i.toString())&amp;#10;    feedbackSurveySlider._pixiLabels[i.toString()]._style._wordWrap = true&amp;#10;    feedbackSurveySlider._pixiLabels[i.toString()]._style._wordWrapWidth = wrapWidthText    &amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="&amp;#10;// get the selected option among the labels&amp;#10;feedbackChoiceText = sliderLabels[feedbackChoice-1]; // -1 because label index starts with 0, tick mark starts with 1. &amp;#10;&amp;#10;// console.log('mouse-feedback: ',     mouseFeedback)&amp;#10;// console.log('mouse-feedback-time: ',mouseFeedback.time)&amp;#10;&amp;#10;// get reaction time from psychopy's mouse component &amp;#10;mouselength             = feedbackMouse.time.length;&amp;#10;// get the mouse component's starting second&amp;#10;mouse_tStart            = feedbackMouse.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart           = feedbackSurveyText.tStart; &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick              = feedbackMouse.time[mouselength-1]; &amp;#10;// add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;feedbackRT          = validClick + mouse_tStart - button_tStart; &amp;#10;&amp;#10;&amp;#10;// console.log('mouse time',validClick)&amp;#10;// console.log('mouse rt', feedbackRT)    &amp;#10;&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom             = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;// format date&amp;#10;registeryDate           = util.MonotonicClock.getDateStr()&amp;#10;registeryDate           = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_passageSpacing.push(currentLink); // what was spacing used in this passage&amp;#10;data_passageType.push([]);// what is the type of this set (informative, narrative)?&amp;#10;data_passageLevel.push([]); // what is the grade level (2nd, 3rd)&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;&amp;#10;data_passageRT.push([]); // words per minute&amp;#10;data_passageWPM.push([]); // words per minute&amp;#10;data_passageWordCount.push([]); &amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;&amp;#10;data_surveyRT.push(feedbackRT); // time to respond to comprehension question&amp;#10;data_compChoice.push(feedbackChoiceText) // chosen option is registered as text&amp;#10;data_feedbackRating.push(feedbackChoice) // rating of the likert scale&amp;#10;&amp;#10;&amp;#10;// remove radio buttons so that they won't appear at the center in next trial&amp;#10;for (var i = 0; i &lt; maxLabels; i++) {&amp;#10;    var buttonNo = i + 1;&amp;#10;    eval(radioComponentName + buttonNo + '._pos'+'= ['+ 0 +','+ 0+'];' );&amp;#10;    eval(radioComponentName + buttonNo + '._size'+'='+1+';' );    &amp;#10;    &amp;#10;    }" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="updateAndRegisterFeedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="feedbackButton">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="feedbackButton" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="feedbackSurveySlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="feedbackMouse">
        <Param val="feedbackButton" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="feedbackMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="feedbackSurveySlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="displayPassages">
      <CodeComponent name="passageCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// call font to be displayed in this trial&amp;#10;currentFont             = blockConditionsForDisplay[trialIteration][0];   &amp;#10;currentSpacing          = blockConditionsForDisplay[trialIteration][1];&amp;#10;stdSpacing              = spacingLabels[currentSpacing];&amp;#10;currentConditions       = blockConditionsForRegistry[trialIteration];&amp;#10;&amp;#10;//console.log('currentSize', currentFontSize);&amp;#10;// console.log('current font, spacing, and std spacing: ', currentFont, currentSpacing, stdSpacing)&amp;#10;// console.log('currentConditions: ', currentConditions)&amp;#10;&amp;#10;// create the excel column name that represents the current passage text&amp;#10;passageIdentifier       = ('pas'+((rand_po[passage_trials.thisN]).toString())+'text')&amp;#10;itemIDIdentifier        = ('pas'+((rand_po[passage_trials.thisN]).toString())+'ID')&amp;#10;&amp;#10;//what is the set ID&amp;#10;setID                   = thisStimulus_list[&quot;setID&quot;]&amp;#10;&amp;#10;// what is the passage ID (RX00001a etc.)&amp;#10;itemID                  = thisStimulus_list[itemIDIdentifier];&amp;#10;&amp;#10;// what is the set's topic &amp;#10;setType                 = thisStimulus_list[&quot;setType&quot;]&amp;#10;setLevel                = thisStimulus_list[&quot;gradeLevel&quot;]&amp;#10;&amp;#10;if(blockSpacingCount === 1)&amp;#10;{&amp;#10;    // omit spacing level name for the image file if there is only one spacing    &amp;#10;    currentPassageImage     = 'stimuli/'+setID+'/'+itemID+'_'+currentFont+'.jpg'&amp;#10;} else {&amp;#10;    // add spacing level name if there are multiple spacing levels which will be written in image file names&amp;#10;        currentPassageImage     = 'stimuli/'+setID+'/'+itemID+'_'+currentFont+'_'+stdSpacing+'.jpg'&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;&amp;#10;// call the passage text &amp;#10;currentPassage          = thisStimulus_list[passageIdentifier];&amp;#10;&amp;#10;// count how many words there are in this passage&amp;#10;wordCount               = currentPassage;&amp;#10;wordCount               = wordCount.replace(/'+/g, ''); // remove apostrophes&amp;#10;wordCount               = wordCount.replace(/-+/g, ' '); // turn dashes into sapce&amp;#10;wordCount               = wordCount.replace(/\s+/g, ' '); // turn more than one space into one space&amp;#10;wordCount               = wordCount.replace(/\n\n/g,&quot; &quot;); // turn line breaks into space&amp;#10;wordCount               = wordCount.replace(/[\W_]+/g,&quot; &quot;); // turn all non alphanumericals into space&amp;#10;wordCount               = wordCount.trim(); // remove spaces at the beginning and end &amp;#10;wordCount               = wordCount.split(&quot; &quot;); // split the text by spaces&amp;#10;wordCount               = wordCount.length // count how many words there are&amp;#10;&amp;#10;// center left &amp;#10;passageText.setAlignHoriz(&quot;left&quot;);&amp;#10;&amp;#10;// console.log('currentSize', currentFontSize*y_scale);&amp;#10;// console.log('yscale', y_scale);&amp;#10;// console.log('current image', currentPassageImage);&amp;#10;&amp;#10;//console.log('scaledsize', currentFontSize);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="passageCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="passageImage">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$currentPassageImage" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="passageImage" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(xaxis*y_scale, yaxis*y_scale)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".35" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="passageText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="50" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="passageText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenterPassages, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.35" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthPassages" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="passageKeyPress">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="passageKeyPress" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.35" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="passageRegistry">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="&amp;#10;// get reaction time from psychopy's mouse component &amp;#10;mouselength             = passageMouse.time.length&amp;#10;// get the mouse component's starting second&amp;#10;mouse_tStart            = passageMouse.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart           = passageButton.tStart &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick              = passageMouse.time[mouselength-1]; &amp;#10; // add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;passageReactionTime    = validClick + mouse_tStart - button_tStart;&amp;#10;// console.log('mouse time',validClick)&amp;#10;// console.log('mouse rt', validClickTime)    &amp;#10;&amp;#10;&amp;#10;// calculate words per minute&amp;#10;currentWPM              = (wordCount*(60/passageReactionTime));&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom             = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;// format date&amp;#10;registeryDate           = util.MonotonicClock.getDateStr()&amp;#10;registeryDate           = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_passageSpacing.push(currentSpacing); // what was the spacing used in this passage&amp;#10;data_passageRT.push(passageReactionTime); // reaction time&amp;#10;data_passageWPM.push(currentWPM); // words per minute&amp;#10;data_passageWordCount.push(wordCount); // how many words in this passage?&amp;#10;data_passageType.push(setType);// what is the type of this set (informative, narrative)?&amp;#10;data_passageLevel.push(setLevel); // what is the grade level (2nd, 3rd)&amp;#10;&amp;#10;data_feedbackRating.push([])        // rating of the likert scale&amp;#10;data_compChoice.push([]);           // chosen option is registered as text&amp;#10;data_surveyRT.push([]); // time to respond to comprehension question&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages&amp;#10;&amp;#10;/* words per minute registery for fit-clash  */ &amp;#10;if (trialType != &quot;practice&quot;){&amp;#10;&amp;#10;    // console.log('getFitClash_spacing: ', getFitClash_spacing)&amp;#10;    // console.log('getFitClash_spacing['+stdSpacing+']: ', getFitClash_spacing[stdSpacing])&amp;#10;    // console.log('getFitClash_spacing['+stdSpacing+'][wpm]: ', getFitClash_spacing[stdSpacing][&quot;wpm&quot;])&amp;#10;&amp;#10;    // console.log('getFitClashAll: ', getFitClash_all)&amp;#10;    // console.log('getFitClashAll['+currentConditions+']: ', getFitClash_all[currentConditions])&amp;#10;    // console.log('getFitClashAll['+currentConditions+'][wpm]: ', getFitClash_all[currentConditions][&quot;wpm&quot;])&amp;#10;&amp;#10;    // console.log('getFitClash_font: ', getFitClash_font)&amp;#10;    // console.log('getFitClash_font['+currentFont+']: ', getFitClash_font[currentFont])&amp;#10;    // console.log('getFitClash_font['+currentFont+'][wpm]: ', getFitClash_font[currentFont][&quot;wpm&quot;])    &amp;#10;        &amp;#10;    &amp;#10;    &amp;#10;    // enable registery for test trials, exclude practice trials&amp;#10;    getFitClash_all[currentConditions].wpm.push(currentWPM) // push current wpm for cond interaction registry    &amp;#10;    getFitClash_spacing[currentSpacing].wpm.push(currentWPM) // push wpm only for spacing conditions&amp;#10;    getFitClash_font[currentFont].wpm.push(currentWPM) // push wpm for only font conditions &amp;#10;    &amp;#10;    // register set ids&amp;#10;    getFitClash_all[currentConditions].setid.push(setID) // push SET ID for cond interaction registry&amp;#10;    getFitClash_spacing[currentSpacing].setid.push(setID) // push SET ID only for spacing conditions&amp;#10;    getFitClash_font[currentFont].setid.push(setID) // push SET ID for only font conditions &amp;#10;&amp;#10;}" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="passageRegistry" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="passageButton">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="passageButton" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".35" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="passageMouse">
        <Param val="passageButton" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="passageMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelay" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="informedConsent1">
      <TextComponent name="informedConsentText">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="informedConsentText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Hello, thank you for taking our online test!&amp;#10;&amp;#10;This is a readability tool that evaluates your best and worst reading performance on different fonts or letter spacings. &amp;#10;&amp;#10;In this test, you will be asked to read passages and press the button on right-hand corner whenever you finish reading them. Each passage will consist of two screens, making you press the button twice to finish one passage. After that, you will first encounter comprehension questions and then feedback questions about that passage. &amp;#10;&amp;#10;There will be a short survey about your gender, age, and reading habits at the end of this test. &amp;#10;&amp;#10;Please press the button on the right hand corner to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="scrolling_consent">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="&amp;#10;&amp;#10;&amp;#10;// register current Y position&amp;#10;oldY = consent_image.pos[1];&amp;#10;// estimate change in Y&amp;#10;deltaY = (mouseInstructions.getWheelRel()[1]);&amp;#10;&amp;#10;//Check for keyboard up/down&amp;#10;let skEvents = consent_keyboard.getEvents()&amp;#10;if(isKeyPressed(skEvents, 'up')) {&amp;#10;     deltaY = -25;&amp;#10;}&amp;#10;&amp;#10;if(isKeyPressed(skEvents, 'down')) {&amp;#10;     deltaY = 25;&amp;#10;}&amp;#10;// add to image position&amp;#10;imageY = (oldY + deltaY);&amp;#10;&amp;#10;&amp;#10;&amp;#10;if (scrolling_amount != 0) {&amp;#10;    const newY = scrolling_amount + article_image.pos[1]&amp;#10;    &amp;#10;    if ((newY &gt;= ydifference*3) &amp;&amp; (Math.abs(newY - ydifference) &lt;= (Math.abs(ydifference*4)))) {&amp;#10;        console.log('old y, new y: ',article_image.pos[1],newY)&amp;#10;         article_image.pos = [0, newY];&amp;#10;        underlined_words = changeWordPosition(scrolling_amount,underlined_words);&amp;#10;    }  &amp;#10;   &amp;#10;}&amp;#10;&amp;#10;scrolling_keyboard.clearEvents()&amp;#10;&amp;#10;&amp;#10;&amp;#10;if (imageY != oldY) {&amp;#10;    // print coordinates and bounds for debugging&amp;#10;//    console.log('new y, y difference, condition :', imageY, ydifference, imageY&gt;=ydifference*2)&amp;#10;//    console.log('abs(newy-oldy), abs(ydiff*2), condition :', Math.abs(imageY-oldY), Math.abs(ydifference*3), (Math.abs(imageY - oldY) &lt; (Math.abs(ydifference*2))))&amp;#10;    // change img position if 1) it does not exceed the upper limit, 2) lower limit of image&amp;#10;    if ((imageY &gt;= ydifference*2) &amp;&amp; (Math.abs(imageY - ydifference) &lt;= (Math.abs(ydifference*3)))) {&amp;#10;        // change image position&amp;#10;        consent_image.pos = [0, imageY];&amp;#10;        }  &amp;#10;}&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="scrolling_consent" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="set_position_consent">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="popupN = popupN + 1&amp;#10;&amp;#10;ydifference = (vsize - consentsize[1])/2&amp;#10;xdifference = (hsize - consentsize[0])/2&amp;#10;consentY = ydifference;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="document.body.style.zoom = &quot;100%&quot;;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_position_consent" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="consent_image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/prolific_consent.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="consent_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,consentY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="consentsize" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <CodeComponent name="align">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="informedConsentText.setAlignHoriz(&quot;left&quot;);&amp;#10;&amp;#10;//console.log(informedConsentText)&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="align" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <MouseComponent name="mouseInstructions">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <KeyboardComponent name="consent_keyboard">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="consent_keyboard" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="set_consent_image">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="const searchParams = new URLSearchParams(location.search);&amp;#10;&amp;#10;const imageParam = parseInt(searchParams.get('image')) || 0;&amp;#10;&amp;#10;let image = &quot;stimuli/&quot;;&amp;#10;&amp;#10;if ( imageParam == 0 ) {&amp;#10;    console.log(&quot;prolific&quot;)&amp;#10;    image += &quot;prolific_consent.png&quot;&amp;#10;} else {&amp;#10;    console.log(&quot;life&quot;)&amp;#10;    image += &quot;life_consent.png&quot;&amp;#10;}&amp;#10;&amp;#10;consent_image.setImage(image)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="c" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_consent_image" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="informedConsent2">
      <TextComponent name="informedConsentText_4">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="informedConsentText_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="The actual experiment is delivered over the internet using the study platform Pavlovia. You will first be asked to resize an image on the screen using a credit/debit card to calibrate the display size, prior to starting the study. You will be asked to read short passages and answer multiple-choice comprehension questions based on those reading passages. The text is written at a 12th-grade reading level. Your responses will be recorded using key presses on a keyboard (e.g., press the left, right, up, or down arrow key) or mouse click. You must use a desktop or laptop only. You will not be able to complete the study using a phone or tablet.&amp;#10;&amp;#10;This is a minimal risk study and does not present any more risk than your regular use of a computer. Participation is voluntary and you may withdraw at any time. There is no direct benefit to you from taking part in this study. However, the research has the potential to contribute to scientific knowledge of different modes of reading legibility and typefaces with variable fonts. All data will be collected digitally. The website will generate a random user ID and no personally identifiable information will be collected. All data will be stored in Google Drive for a minimum of 5 years after the study's closure. The data of google drive is password protected and will only have access to the study team members. Organizations that may access your information include the IRB, investigators, and research team members of this study.&amp;#10;&amp;#10;Please press the button on the right hand corner to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_11">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_11" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$keyboardPauseDuration" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="align_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="informedConsentText_4.setAlignHoriz(&quot;left&quot;);&amp;#10;&amp;#10;console.log(informedConsentText)&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="align_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_Instructions_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_Instructions_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseInstructions_2">
        <Param val="nextButton_Instructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseInstructions_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="informedConsent3">
      <CodeComponent name="code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="informedConsentText_2.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="informedConsentText_2">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="informedConsentText_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You must be 18 years of age or older and must speak and read in English in order to take part in this research study.&amp;#10; &amp;#10;Study contact for questions about the study or to report a problem: If you have questions, concerns, or complaints or think the research has hurt you, talk to the research team or in Industrial Engineering &amp; Management Systems, Dr. Ben D. Sawyer, 484-272-9937, sawyer@ucf.edu. You may also contact us via the Prolific system. If you would like a copy of this form, you can take a screenshot or contact us.&amp;#10;&amp;#10;IRB contact about your rights in this study or to report a complaint: If you have questions about your rights as a research participant, or have concerns about the conduct of this study, please contact Institutional Review Board (IRB), University of Central Florida, Office of Research, 12201 Research Parkway, Suite 501, Orlando, FL 32826-3246 or by telephone at (407) 823-2901, or email irb@ucf.edu.&amp;#10;&amp;#10;Please press the button on the right hand corner to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_7">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_7" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$keyboardPauseDuration" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ImageComponent name="nextButton_Instructions_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_Instructions_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseInstructions_3">
        <Param val="nextButton_Instructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseInstructions_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="scaleBlank">
      <TextComponent name="blankScreenForRefresh">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="10" valType="num" updates="constant" name="letterHeight"/>
        <Param val="blankScreenForRefresh" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="checkResources">
      <CodeComponent name="passageCode_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="fontIteration       = fontIteration+1&amp;#10;// call font to be displayed in this trial&amp;#10;currentFont         = allFonts[loop_fonts.thisN]&amp;#10;// call spacing to be displayed in this trial &amp;#10;currentSpacing      = testSpacings[loop_spacings.thisN];&amp;#10;// call spacing label &amp;#10;currentLink         = linkLabels[loop_spacings.thisN];&amp;#10;//console.log('currentSize', currentFontSize);&amp;#10;//console.log('currentFont', currentFont)&amp;#10;//console.log('current spacing: ', currentSpacing)&amp;#10;// create the excel column name that represents the current passage text&amp;#10;iterationString     = (screens.thisN+1).toString()&amp;#10;&amp;#10;passageIdentifier   = 'art1text'&amp;#10;itemIDIdentifier    = 'art1ID'&amp;#10;&amp;#10;//what is the set ID&amp;#10;setID               = thisSet_file_check[&quot;setID&quot;]&amp;#10;// what is the passage ID (RX00001a etc.)&amp;#10;itemID              = thisSet_file_check[itemIDIdentifier];&amp;#10;// get trial type&amp;#10;trialType           = thisSet_file_check[&quot;trialType&quot;];&amp;#10;&amp;#10;if ((currentLink === 'NoLink') &amp;&amp; (currentFont === 'Open Sans')  || (trialType === 'test') &amp;&amp; (currentFont === 'Open Sans') ||(trialType === 'practice') &amp;&amp; ((currentFont === 'Georgia') || (currentFont === 'Roboto') ||(currentFont === 'Times')) ){&amp;#10;        console.log('pass this image: ', setID+'_'+currentFont+'_'+currentLink+'.jpg')&amp;#10;        continueRoutine = false&amp;#10;    } else {&amp;#10;            console.log('test this image: ', setID+'_'+currentFont+'_'+currentLink+'.jpg')&amp;#10;            currentArticleImage = 'stimuli/article_images/'+setID+'_'+currentFont+'_'+currentLink+'.jpg'&amp;#10;        }&amp;#10;    &amp;#10;    " valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="passageCode_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="passageImage_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$currentArticleImage" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="passageImage_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="waitForCalibration">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="waitForCalibration" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="We are checking if all experiment resources are correctly downloaded.&amp;#10;&amp;#10;This may take up to 30 seconds.&amp;#10;&amp;#10;If there was a connection issue while downloading, you will encounter an &quot;Unknown resource error&quot; on this screen.&amp;#10;&amp;#10;If that error occurs, please go back and re-enter to the experiment.&amp;#10;&amp;#10;Otherwise, please wait until the test instructions appear on the screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="all_fonts"/>
    <Routine name="merge_fonts">
      <CodeComponent name="merge_font_names">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="fontIteration = 0" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/*bewary: this loop only uses the first row of &quot;blocks_file.xlsx&quot;.&amp;#10;Therefore, font names and labels should be specified within that first row. &amp;#10;Please adjust the &quot;Selected Rows&quot; value of this loop if it is not suitable for your design.*/&amp;#10;&amp;#10;/* below code extracts font names from the excel file&amp;#10;these names are then used for creating variables for the database */&amp;#10;testFonts = thisGet_font[&quot;testFonts&quot;]&amp;#10;&amp;#10;/* split font names and labels by &quot;;&quot; */ &amp;#10;testFonts = testFonts.split(&quot;;&quot;)   &amp;#10;&amp;#10;/* extracts spacing levels from the blocks excel file */&amp;#10;testSpacings = thisGet_font[&quot;testSpacings&quot;]&amp;#10;&amp;#10;/* split spacing levels by &quot;;&quot; */ &amp;#10;testSpacings = testSpacings.split(&quot;;&quot;)   &amp;#10;&amp;#10;/* get practice font and convert to string - split ddoes that for above */&amp;#10;practiceFonts = String(thisGet_font[&quot;practiceFonts&quot;]);&amp;#10;/* add practice font to fonts to be tested */ &amp;#10;testFonts.unshift(practiceFonts);&amp;#10;&amp;#10;/* store all fonts to a variable */&amp;#10;allFonts = testFonts&amp;#10;console.log('test fonts: ', testFonts)&amp;#10;console.log('practice fonts: ', practiceFonts)&amp;#10;console.log('all fonts: ', allFonts)&amp;#10;&amp;#10;/* count of fonts in the study */ &amp;#10;fontCount = allFonts.length&amp;#10;&amp;#10;/* get how many screens a passage is split to */&amp;#10;//screenCount = thisSet_file_check[&quot;trialproperties&quot;]&amp;#10;//screenCount = screenCount.split(&quot;;&quot;) &amp;#10;screenCount = 1&amp;#10;/* get the passage count number from stimulus sheet */&amp;#10;//screenCount = getItemCount(screenCount)&amp;#10;console.log('screen count', screenCount)&amp;#10;&amp;#10;// initialize link conditions &amp;#10;linkLabels                      = ['Link','NoLink']&amp;#10;practiceLink                    = ['NoLink']&amp;#10;linkCount                       = linkLabels.length&amp;#10;&amp;#10;&amp;#10;spacingCount = testSpacings.length;&amp;#10;spacingLabels = {};&amp;#10;spacingLevels = [];&amp;#10;/* below creates a dictionary to convert spacing levels in blocks file &amp;#10;to standardized spacing levels. Standardized ones used for naming images &amp;#10;and using them for display. Actual levels will be registered to sheet */&amp;#10;for (var fi = 0; fi &lt; spacingCount; fi++){&amp;#10;    spacingLevels.push(&quot;sp&quot;+(fi+1).toString())&amp;#10;    spacingLabels[testSpacings[fi]] = spacingLevels[fi]&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;/* print out spacing labels */&amp;#10;&amp;#10;console.log('spacing labels: ', spacingLabels)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="merge_font_names" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="preCheckScreen">
      <TextComponent name="waitForCalibration_2">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="waitForCalibration_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="time (s)" valType="str" updates="None" name="stopType"/>
        <Param val="15" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="We are checking if all experiment resources are correctly downloaded.&amp;#10;&amp;#10;This may take up to 30 seconds.&amp;#10;&amp;#10;If there was a connection issue while downloading, you will encounter an &quot;Unknown resource error&quot; on this screen.&amp;#10;&amp;#10;If that error occurs, please go back and re-enter to the experiment.&amp;#10;&amp;#10;Otherwise, please wait until the test instructions appear on the screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_10">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log(&quot;calibration text screen&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="console.log('calibration text screen')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_10" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="bugfix">
      <KeyboardComponent name="key_resp_10">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_10" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val=".5" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="skipSecondLoop">
      <CodeComponent name="escapeLoop">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="demogBlockIndx = demogBlockIndx+1&amp;#10;if (demogBlockIndx === 2) &amp;#10;  {&amp;#10;    stimulus_listD.finished = true;&amp;#10;  }" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="escapeLoop" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="findFastest">
      <CodeComponent name="fontWPM">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Register WPM of the fonts to the database */ &amp;#10;// console.log('getFitClash_spacing',getFitClash_spacing)&amp;#10;&amp;#10;endOfTest = passageSetOrder.length    // get the trial number of the last test trials&amp;#10;&amp;#10;if (trialIteration+1 === endOfTest) {&amp;#10;// initiate estimation of FIT-CLASH conditions at THE LAST TEST trial&amp;#10;     performanceConditions = blockConditionsForRegistry&amp;#10;     &amp;#10;     // remove the practice conditions from the fit-clash estimation conditions&amp;#10;     for (var i = 0; i &lt; practiceCount; i++){&amp;#10;        performanceConditions.shift()&amp;#10;        }&amp;#10;    &amp;#10;    // console.log('performanceConditions: ',performanceConditions)&amp;#10;    // store all fit-clash dictionaries into an array &amp;#10;    fitClashArray = []&amp;#10;    fitClashArray.push(getFitClash_all)&amp;#10;    fitClashArray.push(getFitClash_spacing)&amp;#10;    fitClashArray.push(getFitClash_font)&amp;#10;    // console.log('fitClashArray: ',fitClashArray)&amp;#10;    // store all conditions of individual fit-clash arrays into another array &amp;#10;    conditionArray = []&amp;#10;    conditionArray.push(performanceConditions)&amp;#10;    conditionArray.push(Object.values(spacingLabels)) // actual spacing levels (&quot;0&quot;,&quot;0.05&quot;,...) disrupt sorting algorithm, therefore we use std labels (sp1, sp2, ..., spN)&amp;#10;    conditionArray.push(blockFonts)&amp;#10;    // console.log('conditionArray: ',conditionArray)&amp;#10;&amp;#10;    // get average of all fit-clash dictionaries for estimation &amp;#10;    fitClashArray       = loopAverage(fitClashArray,conditionArray)    &amp;#10;    &amp;#10;    // sort conditions by accuracy ratings &amp;#10;    if (experimentType === 'all'){&amp;#10;        typeIndex = 0&amp;#10;        } else if (experimentType === 'spacing'){&amp;#10;            typeIndex = 1&amp;#10;            } else if (experimentType === 'font'){&amp;#10;                typeIndex = 2&amp;#10;                &amp;#10;                }&amp;#10;&amp;#10;    sortedObject        = sortObjects(fitClashArray[typeIndex],Object.keys(fitClashArray[typeIndex]).length,&quot;accuracy&quot;)    &amp;#10;    &amp;#10;    // estimate fit: first by accuracy (highest) then wpm (fastest)&amp;#10;    fitParameters       = getFit(sortedObject,&quot;wpm&quot;)&amp;#10;    // estimate clash: first by accuracy (lowest) then wpm (slowest)&amp;#10;    clashParameters     = getClash(sortedObject,&quot;wpm&quot;)&amp;#10;    &amp;#10;    disp_fitCondition   = fitParameters[0]&amp;#10;    disp_fitWpm         = Math.round(fitParameters[1]).toString()&amp;#10;    disp_fitAcc         = Math.round(fitParameters[2] * 100).toString()&amp;#10;    disp_clashCondition = clashParameters[0]&amp;#10;    disp_clashWpm       = Math.round(clashParameters[1]).toString()&amp;#10;    disp_clashAcc       = Math.round(clashParameters[2] * 100).toString()&amp;#10;}&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="fontWPM" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="setSessionParameters">
      <CodeComponent name="sessionParameters">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="sessionRow = []" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Get the row of this session&amp;#10;This will be used for blocks_file.xlsx rows. &amp;#10;Each row represents a different session in a &amp;#10;different time. */ &amp;#10;if (sessionIndex === 0){ &amp;#10;    /*  If this is the first session, attach a 'repeat' session&amp;#10;    as a separate block. This will add two trials to the end which&amp;#10;    will test the fastest and slowest fonts. */&amp;#10;    sessionRow = [0, sessionStimSetOrder[sessionIndex]]&amp;#10;    /* variable below is used for conditions where initial session is followed&amp;#10;     by a repeat session and exceptions have to be made. */ &amp;#10;    isThisDoubleSession = true&amp;#10;    } else {&amp;#10;        isThisDoubleSession = false&amp;#10;        sessionRow = sessionStimSetOrder[sessionIndex]&amp;#10;        }&amp;#10;&amp;#10;console.log('sessionRow', sessionRow)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="sessionParameters" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="teacherPassword">
      <CodeComponent name="passwordRequirement">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (loginMessageRow === 4)  {&amp;#10;    // ask for teacher password if the name is incorrect&amp;#10;        continueRoutine = true&amp;#10;    } else {&amp;#10;        continueRoutine = false&amp;#10;        }" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="passwordRequirement" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="passwordTextbox">
        <Param val="center-left" valType="str" updates="constant" name="alignment"/>
        <Param val="center-left" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="30" valType="num" updates="constant" name="borderWidth"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="editable"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*20" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="passwordTextbox" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="textboxPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="textboxSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <TextComponent name="passwordDescription">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="passwordDescription" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter,questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Wrong name entered! Please call in your teacher. Teachers should enter their password in the box below to proceed with name selection." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressEnter">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressEnter" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please press ENTER after you type in your password." valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="getPasswordText">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;passwordTextbox.refresh()&amp;#10;console.log(&quot;text box items&quot;,passwordTextbox);&amp;#10;passwordDescription.setAlignHoriz(&quot;left&quot;);&amp;#10;pressEnter.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="myClock.reset();&amp;#10;startTime = myClock.getTime();&amp;#10;// get the text inside the text box&amp;#10;textInput = passwordTextbox._pixi.text;&amp;#10;textInput = textInput.trim();&amp;#10;// check if the password is correct&amp;#10;validPassword = (textInput === teacherPassword); &amp;#10;&amp;#10;if (clearEventAfterChoice === 1){&amp;#10;    psychoJS.eventManager.clearEvents();    // clears keypress events&amp;#10;                                            // does not terminate the loop prematurely        &amp;#10;    }&amp;#10;&amp;#10;if (validPassword) {&amp;#10;    //fill_textbox.borderColor= [0, 1, 0];&amp;#10;    if (clearEventAfterChoice === 1){&amp;#10;        psychoJS.eventManager.clearEvents(); // clears keypress events after choice so that previous unrelated space &amp;#10;        clearEventAfterChoice=0;             // does not terminate the loop prematurely        &amp;#10;        }&amp;#10;    var _pj;&amp;#10;    function _pj_snippets(container) {&amp;#10;        function in_es6(left, right) {&amp;#10;            if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;                return (right.indexOf(left) &gt; (- 1));&amp;#10;            } else {&amp;#10;                if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                    return right.has(left);&amp;#10;                } else {&amp;#10;                    return (left in right);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        container[&quot;in_es6&quot;] = in_es6;&amp;#10;        return container;&amp;#10;    }&amp;#10;&amp;#10;    _pj = {};&amp;#10;    _pj_snippets(_pj);&amp;#10;    keys = psychoJS.eventManager.getKeys();&amp;#10;    console.log(keys);&amp;#10;        if (keys.length) {&amp;#10;            if (_pj.in_es6(&quot;return&quot;, keys)) {         &amp;#10;                continueRoutine = false;&amp;#10;                correctPassword = &quot;yes&quot;&amp;#10;            } else {&amp;#10;                    psychoJS.eventManager.clearEvents();&amp;#10;                    &amp;#10;                }&amp;#10;        }&amp;#10;} else {&amp;#10;        //fill_textbox.borderColor= [1, 0, 0];&amp;#10;        psychoJS.eventManager.clearEvents(); &amp;#10;        correctPassword = &quot;no&quot;&amp;#10;    }" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// get browser zoom&amp;#10;browserZoom = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="partAge = fill_textbox.text" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getPasswordText" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="loginAttempts">
      <CodeComponent name="processLogin">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (loginMessageRow === 4 &amp;&amp; correctPassword === &quot;yes&quot;){&amp;#10;    continueRoutine = true &amp;#10;    } else if (loginMessageRow === 4 &amp;&amp; correctPassword === &quot;no&quot;) {&amp;#10;        continueRoutine = false&amp;#10;        }&amp;#10;&amp;#10;&amp;#10;mainText            = thisLoginTrial[&quot;mainText&quot;];&amp;#10;largeButtonText     = thisLoginTrial[&quot;largeButtonText&quot;];&amp;#10;smallButtonText1    = thisLoginTrial[&quot;smallButtonText1&quot;];&amp;#10;smallButtonText2    = thisLoginTrial[&quot;smallButtonText2&quot;];&amp;#10;&amp;#10;&amp;#10;largeButtonColor    = thisLoginTrial[&quot;largeButtonColor&quot;];&amp;#10;smallButtonColor1   = thisLoginTrial[&quot;smallButtonColor1&quot;];&amp;#10;smallButtonColor2   = thisLoginTrial[&quot;smallButtonColor2&quot;];&amp;#10;&amp;#10;&amp;#10;smallButtonPosition1 = thisLoginTrial[&quot;smallButtonPosition1&quot;];&amp;#10;smallButtonPosition2 = thisLoginTrial[&quot;smallButtonPosition2&quot;];&amp;#10;&amp;#10;if (loginMessageRow === 2) {&amp;#10;    // if login status is to CONTINUE TO SESSION (adds session name to message)&amp;#10;        largeButtonText = thisLoginTrial[&quot;largeButtonText&quot;] + continueSessionMessage&amp;#10;    }&amp;#10;&amp;#10;if (loginMessageRow === 3) {&amp;#10;    // if login status is to START TO SESSION (adds session name to message)&amp;#10;        largeButtonText = thisLoginTrial[&quot;largeButtonText&quot;] + startSessionMessage&amp;#10;    }&amp;#10;&amp;#10;if (loginMessageRow === 4) {&amp;#10;    // INCORRECT NAME ENTRY&amp;#10;    smallButtonText1    = thisLoginTrial[&quot;smallButtonText1&quot;] + db_participantName;&amp;#10;    smallButtonText2    = thisLoginTrial[&quot;smallButtonText2&quot;] + ent_participantName;&amp;#10;    }" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (loginMessageRow === 4) {&amp;#10;    // if the NAME is incorrect and decision by click has to be made&amp;#10;        &amp;#10;    if (loginMouse.isPressedIn(smallButtonLeft)) {&amp;#10;        // selects the old name&amp;#10;        newName = db_participantName&amp;#10;        smallButtonLeft.setColor(new util.Color(&quot;red&quot;))&amp;#10;        continueRoutine= false&amp;#10;        changeName = true&amp;#10;        }&amp;#10;&amp;#10;&amp;#10;    if (loginMouse.isPressedIn(smallButtonRight)) {&amp;#10;        // selects the new name&amp;#10;        newName = ent_participantName&amp;#10;        smallButtonRight.setColor(new util.Color(&quot;red&quot;))&amp;#10;        continueRoutine= false&amp;#10;        changeName = true&amp;#10;        }&amp;#10;    &amp;#10;    &amp;#10;    } else if (loginMessageRow === 2 || loginMessageRow === 3) {&amp;#10;        // two scenarios: CONTINUE SESSION || START NEW SESSION&amp;#10;        if (loginMouse.isPressedIn(largeButton)){&amp;#10;            // pressed large button to START or CONTINUE to session,&amp;#10;            // no need for teacher password&amp;#10;            continueRoutine= false&amp;#10;            }&amp;#10;     &amp;#10;        }&amp;#10;&amp;#10;&amp;#10;    " valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (changeName){&amp;#10;    participantData[&quot;name&quot;] = newName&amp;#10;    psychoJS.shelf.setDictionaryFieldValue({key: participantList, fieldName: ent_participantID, fieldValue : participantData})    &amp;#10;    }&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="processLogin" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="login_mainText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="login_mainText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 200)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$mainText" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="largeButton">
        <Param val="$largeButtonColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="largeButton" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$largeButtonText" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="smallButtonLeft">
        <Param val="$smallButtonColor1" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="smallButtonLeft" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(smallButtonPosition1_x, smallButtonPosition1_y)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$smallButtonText1" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="smallButtonRight">
        <Param val="$smallButtonColor2" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="smallButtonRight" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(smallButtonPosition2_x, smallButtonPosition2_y)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$smallButtonText2" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="loginMouse">
        <Param val="largeButton,smallButtonLeft,smallButtonRight" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="loginMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="final" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <CodeComponent name="alignLeftLogin">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="login_mainText.setAlignHoriz(&quot;left&quot;);&amp;#10;largeButton.setAlignHoriz(&quot;left&quot;);&amp;#10;smallButtonLeft.setAlignHoriz(&quot;left&quot;);&amp;#10;smallButtonRight.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="alignLeftLogin" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="getWords">
      <CodeComponent name="store_words">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="underlined_words = {}              &amp;#10;init_temp_list = {}" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log('current word from sheet ', thisWord_list_loop[&quot;text&quot;])&amp;#10;&amp;#10;// create backup for word list&amp;#10;init_temp_list = thisWord_list_loop&amp;#10;&amp;#10;wordN = wordN + 1&amp;#10;// initialize dictionary for underlined word positions&amp;#10;if (wordN === 1){    &amp;#10;    underlined_words = {}          &amp;#10;    }&amp;#10;// initialize the key for this word&amp;#10;underlined_words[thisWord_list_loop[&quot;text&quot;]] = {}&amp;#10;&amp;#10;// process coordinates for screen alignment of words etc.&amp;#10;underlined_words[thisWord_list_loop[&quot;text&quot;]] = convertToNumber(init_temp_list,imagesize,vsize,y_scale)&amp;#10;&amp;#10;// print out for debugging&amp;#10;console.log('all underlined words: ', underlined_words)&amp;#10;console.log('current word ['+init_temp_list[&quot;text&quot;]+']', underlined_words[init_temp_list[&quot;text&quot;]])&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="store_words" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="displayArticle">
      <CodeComponent name="set_article">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// call font to be displayed in this trial&amp;#10;stdSpacing              = spacingLabels[currentSpacing];&amp;#10;currentConditions       = blockConditionsForRegistry[trialIteration];&amp;#10;&amp;#10;// create the excel column name that represents the current article's text&amp;#10;articleIdentifier       = 'art1text'&amp;#10;itemIDIdentifier        = 'art1ID'&amp;#10;&amp;#10;//what is the set ID&amp;#10;setID                   = thisStimulus_list[&quot;setID&quot;]&amp;#10;&amp;#10;// what is the passage ID (RX00001a etc.)&amp;#10;itemID                  = thisStimulus_list[itemIDIdentifier];&amp;#10;&amp;#10;if(blockSpacingCount === 1){&amp;#10;    // omit spacing level name for the image file if there is only one spacing    &amp;#10;    currentArticleImage     = 'stimuli/article_images/'+setID+'_'+currentFont+'_'+currentLink+'.jpg'&amp;#10;} else {&amp;#10;    // add spacing level name if there are multiple spacing levels which will be written in image file names&amp;#10;    currentArticleImage     = 'stimuli/article_images/'+setID+'_'+currentFont+'_'+currentLink+'_'+stdSpacing+'.jpg'&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;&amp;#10;// call the passage text &amp;#10;currentArticle          = thisStimulus_list[articleIdentifier];&amp;#10;console.log('current article text: ', currentArticle)&amp;#10;currentArticle          = currentArticle.split(':').join(&quot;&quot;)&amp;#10;currentArticle          = currentArticle.split('.').join(&quot;&quot;)&amp;#10;// count how many words there are in this passage&amp;#10;wordCount               = currentArticle;&amp;#10;wordCount               = wordCount.replace(/'+/g, ''); // remove apostrophes&amp;#10;wordCount               = wordCount.replace(/-+/g, ' '); // turn dashes into sapce&amp;#10;wordCount               = wordCount.replace(/\s+/g, ' '); // turn more than one space into one space&amp;#10;wordCount               = wordCount.replace(/\n\n/g,&quot; &quot;); // turn line breaks into space&amp;#10;wordCount               = wordCount.replace(/[\W_]+/g,&quot; &quot;); // turn all non alphanumericals into space&amp;#10;wordCount               = wordCount.trim(); // remove spaces at the beginning and end &amp;#10;wordCount               = wordCount.split(&quot; &quot;); // split the text by spaces&amp;#10;wordCount               = wordCount.length // count how many words there are&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_article" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="set_position">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="popupN = popupN + 1&amp;#10;&amp;#10;ydifference = (vsize - imagesize[1])/2&amp;#10;xdifference = (hsize - imagesize[0])/2&amp;#10;&amp;#10;// at first display, setup the article such that its borders &amp;#10;// meet screen's vertical size, then continue with the scrolled position&amp;#10;if (popupN === 1){&amp;#10;    imageY = ydifference;&amp;#10;    }&amp;#10;console.log('vertical size: ',vsize)&amp;#10;console.log('difference   : ',ydifference)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="document.body.style.zoom = &quot;100%&quot;;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_position" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="scrolling">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="&amp;#10;&amp;#10;// register current Y position&amp;#10;oldY = article_image.pos[1];&amp;#10;// estimate change in Y&amp;#10;deltaY = (article_mouse.getWheelRel()[1]);&amp;#10;// add to image position&amp;#10;imageY = (oldY + deltaY);&amp;#10;&amp;#10;if (imageY != oldY) {&amp;#10;    // print coordinates and bounds for debugging&amp;#10;//    console.log('new y, y difference, condition :', imageY, ydifference, imageY&gt;=ydifference*2)&amp;#10;//    console.log('abs(newy-oldy), abs(ydiff*2), condition :', Math.abs(imageY-oldY), Math.abs(ydifference*3), (Math.abs(imageY - oldY) &lt; (Math.abs(ydifference*2))))&amp;#10;    // change img position if 1) it does not exceed the upper limit, 2) lower limit of image&amp;#10;    if ((imageY &gt;= ydifference*3) &amp;&amp; (Math.abs(imageY - ydifference) &lt;= (Math.abs(ydifference*4)))) {&amp;#10;        console.log('old y, new y: ',oldY,imageY)&amp;#10;        // change image position&amp;#10;        article_image.pos = [0, imageY];&amp;#10;        // change position of clickable area of every underlined word after scrolling up/down&amp;#10;        underlined_words = changeWordPosition(deltaY,underlined_words)&amp;#10;        }  &amp;#10;}&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="scrolling" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="clicking_popup">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="enablePopup = 0&amp;#10;linkText = &quot;&quot;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (enableLinkClick){&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;//    console.log('popup click enabled')&amp;#10;    // register current Y position&amp;#10;    oldY = article_image.pos[1];&amp;#10;    // estimate change in Y&amp;#10;    mousePressed = article_mouse.getPressed()[0]&amp;#10;&amp;#10;    // debug&amp;#10;    if (mousePressed){&amp;#10;        clickPosition = article_mouse.getPos()         &amp;#10;        checkTime = myClock.getTime();&amp;#10;        &amp;#10;        if (checkTime - startTime &gt; 1){&amp;#10;            startTime = myClock.getTime();&amp;#10;            checkClick = rectangleClickCheck(clickPosition,underlined_words)  &amp;#10;            console.log('click position', clickPosition)&amp;#10;            console.log('check click - article var: ', checkClick)&amp;#10;            &amp;#10;            &amp;#10;            if (checkClick[0]) {        &amp;#10;                enablePopup = 1&amp;#10;                linkText = checkClick[1];&amp;#10;                continueRoutine = false;&amp;#10;            }&amp;#10;            &amp;#10;        }&amp;#10;&amp;#10;        }&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (enablePopup) {    &amp;#10;    currentKeys = Object.keys(underlined_words)&amp;#10;&amp;#10;    popupIndex  = currentKeys.indexOf(checkClick[1])&amp;#10;    &amp;#10;    console.log('currentKeys', currentKeys)&amp;#10;    console.log('clicked', checkClick[1])&amp;#10;    console.log('popupIndex', popupIndex)&amp;#10;&amp;#10;    // adjust back button and text Y axis based on paragraph length&amp;#10;    popup_buttons.back_text.y           = underlined_words[checkClick[1]].backY &amp;#10;    popup_buttons.back_button.y         = underlined_words[checkClick[1]].backY &amp;#10;    // register what the participant clicked&amp;#10;    pressedButtonArticle = &quot;toPopup&quot;&amp;#10;    &amp;#10;    console.log('popup buttons',popup_buttons)&amp;#10;} else {&amp;#10;    pressedButtonArticle = &quot;articleCompleted&quot;&amp;#10;    popup_loop.finished = true &amp;#10;    }" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="clicking_popup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="articleRegistry">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// get reaction time from psychopy's mouse component &amp;#10;mouselength             = article_mouse.time.length&amp;#10;// get the mouse component's starting second&amp;#10;mouse_tStart            = article_mouse.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart           = articleNextButton.tStart &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick              = article_mouse.time[mouselength-1] || 0; &amp;#10; // add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;passageReactionTime     = validClick + mouse_tStart - button_tStart;&amp;#10;&amp;#10;// console.log('mouse time',validClick)&amp;#10;// console.log('mouse rt', validClickTime)    &amp;#10;&amp;#10;&amp;#10;// calculate words per minute&amp;#10;currentWPM              = wordCount/(passageReactionTime/60);&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom             = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;// format date&amp;#10;registeryDate           = util.MonotonicClock.getDateStr()&amp;#10;registeryDate           = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_passageSpacing.push(currentLink); // what was the spacing used in this passage&amp;#10;data_passageRT.push(passageReactionTime); // reaction time&amp;#10;data_passageWPM.push(currentWPM); // words per minute&amp;#10;data_passageWordCount.push(wordCount); // how many words in this passage?&amp;#10;data_passageType.push([]);// what is the type of this set (informative, narrative)?&amp;#10;data_passageLevel.push([]); // what is the grade level (2nd, 3rd)&amp;#10;data_articleSkipType.push(pressedButtonArticle) // which button did they press (next or popup link)&amp;#10;&amp;#10;&amp;#10;data_feedbackRating.push([])        // rating of the likert scale&amp;#10;data_compChoice.push(linkText);           // chosen option is registered as text&amp;#10;data_surveyRT.push([]); // time to respond to comprehension question&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages&amp;#10;&amp;#10;&amp;#10;/* words per minute registery for fit-clash  */ &amp;#10;if (trialType != &quot;practice&quot;){&amp;#10;&amp;#10;    // console.log('getFitClash_spacing: ', getFitClash_spacing)&amp;#10;    // console.log('getFitClash_spacing['+stdSpacing+']: ', getFitClash_spacing[stdSpacing])&amp;#10;    // console.log('getFitClash_spacing['+stdSpacing+'][wpm]: ', getFitClash_spacing[stdSpacing][&quot;wpm&quot;])&amp;#10;&amp;#10;    // console.log('getFitClashAll: ', getFitClash_all)&amp;#10;    // console.log('getFitClashAll['+currentConditions+']: ', getFitClash_all[currentConditions])&amp;#10;    // console.log('getFitClashAll['+currentConditions+'][wpm]: ', getFitClash_all[currentConditions][&quot;wpm&quot;])&amp;#10;&amp;#10;    // console.log('getFitClash_font: ', getFitClash_font)&amp;#10;    // console.log('getFitClash_font['+currentFont+']: ', getFitClash_font[currentFont])&amp;#10;    // console.log('getFitClash_font['+currentFont+'][wpm]: ', getFitClash_font[currentFont][&quot;wpm&quot;])    &amp;#10;        &amp;#10;    &amp;#10;    &amp;#10;    // enable registery for test trials, exclude practice trials&amp;#10;    getFitClash_all[currentConditions].wpm.push(currentWPM) // push current wpm for cond interaction registry    &amp;#10;    getFitClash_spacing[currentLink].wpm.push(currentWPM) // push wpm only for spacing conditions&amp;#10;    getFitClash_font[currentFont].wpm.push(currentWPM) // push wpm for only font conditions &amp;#10;    &amp;#10;    // register set ids&amp;#10;    getFitClash_all[currentConditions].setid.push(setID) // push SET ID for cond interaction registry&amp;#10;    getFitClash_spacing[currentLink].setid.push(setID) // push SET ID only for spacing conditions&amp;#10;    getFitClash_font[currentFont].setid.push(setID) // push SET ID for only font conditions &amp;#10;&amp;#10;}" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="articleRegistry" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="button_scrolling">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="console.error(scrolling_keyboard.getKeys)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="let scrolling_amount = 0;&amp;#10;let skEvents = scrolling_keyboard.getEvents()&amp;#10;if(isKeyPressed(skEvents, 'up')) {&amp;#10;     scrolling_amount = -25;&amp;#10;}&amp;#10;&amp;#10;if(isKeyPressed(skEvents, 'down')) {&amp;#10;     scrolling_amount = 25;&amp;#10;}&amp;#10;&amp;#10;if (scrolling_amount != 0) {&amp;#10;    const newY = scrolling_amount + article_image.pos[1]&amp;#10;    &amp;#10;    if ((newY &gt;= ydifference*3) &amp;&amp; (Math.abs(newY - ydifference) &lt;= (Math.abs(ydifference*4)))) {&amp;#10;        console.log('old y, new y: ',article_image.pos[1],newY)&amp;#10;         article_image.pos = [0, newY];&amp;#10;        underlined_words = changeWordPosition(scrolling_amount,underlined_words);&amp;#10;    }  &amp;#10;   &amp;#10;}&amp;#10;&amp;#10;scrolling_keyboard.clearEvents()&amp;#10;&amp;#10;// Check if left mouse button is pressed&amp;#10;//if (scrolling_mouse.getPressed()[0]) {&amp;#10;//    const [result, clicked_button] = rectangleClickCheckImage(scrolling_mouse.getPos(),scrolling_buttons)&amp;#10;//    let deltaY = 0;&amp;#10;//    console.error(result, clicked_button)&amp;#10;//    if (result) {&amp;#10;//        if (clicked_button === 'up_button') {&amp;#10;//                console.error('scrolling up')&amp;#10;//                deltaY = 10&amp;#10;//        }&amp;#10;//        else if( clicked_button === 'down_button') {&amp;#10;//                console.error('scrolling down')&amp;#10;//                deltaY = -10&amp;#10;//        } else {&amp;#10;//                console.error('uknown button')&amp;#10;//&amp;#10;//        }&amp;#10;//    &amp;#10;//        article_image.pos = [0, article_image.pos[1] + deltaY];&amp;#10;//        underlined_words = changeWordPosition(deltaY,underlined_words)&amp;#10;//    }&amp;#10;//    &amp;#10;//}&amp;#10;//&amp;#10;//" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="button_scrolling" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="article_image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$currentArticleImage" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="article_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,imageY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="imagesize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="articleNextButton">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="articleNextButton" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="article_mouse">
        <Param val="articleNextButton" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="article_mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelay" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <KeyboardComponent name="scrolling_keyboard">
        <Param val="" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="scrolling_keyboard" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="displayPopup">
      <CodeComponent name="set_position_popup">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="ydifference_pop = (vsize - popupsize[1])/2&amp;#10;xdifference_pop = (hsize - popupsize[0])/2&amp;#10;&amp;#10;// at first display, setup the article such that its borders &amp;#10;// meet screen's vertical size, then continue with the scrolled position&amp;#10;if (popupN === 1){&amp;#10;    imageY_pop = ydifference_pop;&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;itemID = articleid + &quot;_&quot; + &quot;popup&quot; + (popupIndex+1).toString()&amp;#10;popupImageName = &quot;stimuli/popup_images/&quot; +itemID+&quot;_&quot;+currentFont+ &quot;.jpg&quot;&amp;#10;&amp;#10;console.log('popupimage: ',popupImageName)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="document.body.style.zoom = &quot;100%&quot;;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_position_popup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="clicking_buttons">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// estimate change in Y&amp;#10;mousePressed = popup_mouse.getPressed()[0]&amp;#10;&amp;#10;&amp;#10;// enable pressing buttons after 1 s &amp;#10;currentTime = myClock.getTime();&amp;#10;&amp;#10;if (currentTime - startTime &gt; 1){&amp;#10;    if (mousePressed){&amp;#10;        clickPosition = popup_mouse.getPos()&amp;#10;        checkClick = rectangleClickCheckImage(clickPosition,popup_buttons)    &amp;#10;        console.log('check click - popup var: ', checkClick)&amp;#10;        if (checkClick[0]) {&amp;#10;            continueRoutine = false;&amp;#10;            }&amp;#10;        }&amp;#10;}&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="clicking_buttons" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="popupRegistry">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// get reaction time from psychopy's mouse component &amp;#10;mouselength             = popup_mouse.time.length&amp;#10;// get the mouse component's starting second&amp;#10;mouse_tStart            = popup_mouse.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart           = back_button.tStart &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick              = popup_mouse.time[mouselength-1] || 0; &amp;#10; // add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;popupReactionTime       = validClick + mouse_tStart - button_tStart;&amp;#10;&amp;#10;// console.log('mouse time',validClick)&amp;#10;// console.log('mouse rt', validClickTime)    &amp;#10;&amp;#10;// register which button they have pressed &amp;#10;pressedButtonPopup      = checkClick[1]&amp;#10;&amp;#10;// calculate words per minute&amp;#10;currentWPM              = (wordCount/(popupReactionTime/60));&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom             = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;// format date&amp;#10;registeryDate           = util.MonotonicClock.getDateStr()&amp;#10;registeryDate           = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_passageSpacing.push(currentLink); // what was the spacing used in this passage&amp;#10;data_passageRT.push(popupReactionTime); // reaction time&amp;#10;data_passageWPM.push(currentWPM); // words per minute&amp;#10;data_passageWordCount.push(wordCount); // how many words in this passage?&amp;#10;data_passageType.push([]);// what is the type of this set (informative, narrative)?&amp;#10;data_passageLevel.push([]); // what is the grade level (2nd, 3rd)&amp;#10;data_articleSkipType.push(pressedButtonPopup) // which button did they press (next or popup link)&amp;#10;&amp;#10;&amp;#10;data_feedbackRating.push([])        // rating of the likert scale&amp;#10;data_compChoice.push([]);           // chosen option is registered as text&amp;#10;data_surveyRT.push([]); // time to respond to comprehension question&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages&amp;#10;&amp;#10;/* words per minute registery for fit-clash  */ &amp;#10;if (trialType != &quot;practice&quot;){&amp;#10;&amp;#10;    // console.log('getFitClash_spacing: ', getFitClash_spacing)&amp;#10;    // console.log('getFitClash_spacing['+stdSpacing+']: ', getFitClash_spacing[stdSpacing])&amp;#10;    // console.log('getFitClash_spacing['+stdSpacing+'][wpm]: ', getFitClash_spacing[stdSpacing][&quot;wpm&quot;])&amp;#10;&amp;#10;    // console.log('getFitClashAll: ', getFitClash_all)&amp;#10;    // console.log('getFitClashAll['+currentConditions+']: ', getFitClash_all[currentConditions])&amp;#10;    // console.log('getFitClashAll['+currentConditions+'][wpm]: ', getFitClash_all[currentConditions][&quot;wpm&quot;])&amp;#10;&amp;#10;    // console.log('getFitClash_font: ', getFitClash_font)&amp;#10;    // console.log('getFitClash_font['+currentFont+']: ', getFitClash_font[currentFont])&amp;#10;    // console.log('getFitClash_font['+currentFont+'][wpm]: ', getFitClash_font[currentFont][&quot;wpm&quot;])    &amp;#10;        &amp;#10;    &amp;#10;    &amp;#10;    // enable registery for test trials, exclude practice trials&amp;#10;    getFitClash_all[currentConditions].wpm.push(currentWPM) // push current wpm for cond interaction registry    &amp;#10;    getFitClash_spacing[currentLink].wpm.push(currentWPM) // push wpm only for spacing conditions&amp;#10;    getFitClash_font[currentFont].wpm.push(currentWPM) // push wpm for only font conditions &amp;#10;    &amp;#10;    // register set ids&amp;#10;    getFitClash_all[currentConditions].setid.push(setID) // push SET ID for cond interaction registry&amp;#10;    getFitClash_spacing[currentLink].setid.push(setID) // push SET ID only for spacing conditions&amp;#10;    getFitClash_font[currentFont].setid.push(setID) // push SET ID for only font conditions &amp;#10;&amp;#10;}" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="popupRegistry" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="popup_image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$popupImageName" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="popup_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, imageY_pop)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="popupsize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="close_button">
        <Param val="bottom-left" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="close_button.jpg" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="close_button" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(popup_buttons.close_button.x, popup_buttons.close_button.y)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(popup_buttons.close_button.width, popup_buttons.close_button.height)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="back_button">
        <Param val="bottom-left" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="back_button.jpg" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="back_button" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(popup_buttons.back_button.x, popup_buttons.back_button.y)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(popup_buttons.back_button.width, popup_buttons.back_button.height)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="back_text">
        <Param val="bottom-left" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="back_text.jpg" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="back_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(popup_buttons.back_text.x, popup_buttons.back_text.y)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(popup_buttons.back_text.width, popup_buttons.back_text.height)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="popup_mouse">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="popup_mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="waitPopup">
      <TextComponent name="waitPopupBlank">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="5" valType="num" updates="constant" name="letterHeight"/>
        <Param val="waitPopupBlank" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="trial_textbox">
      <CodeComponent name="initiateTextbox_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// create the excel column name that represents the current question text&amp;#10;questionIdentifier              = ('proxy'+((rand_proxyo[first_textbox_trials.thisN]).toString())+'text')&amp;#10;itemIDIdentifier                = ('proxy'+((rand_proxyo[first_textbox_trials.thisN]).toString())+'ID')&amp;#10;// call the question text &amp;#10;currentTextboxItem              = thisStimulus_list[questionIdentifier];&amp;#10;currentTextboxItem              = currentTextboxItem.split(&quot;;&quot;) &amp;#10;currentTextboxDescription       = currentTextboxItem[0] // label for this question, used for registry&amp;#10;currentTextboxTextDemographic   = currentTextboxItem[1] // question text itself&amp;#10;//console.log(&quot;text box items&quot;,currentTextboxItem);&amp;#10;&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID                          = thisStimulus_list[itemIDIdentifier]+currentTextboxDescription;&amp;#10;&amp;#10;//what is the set ID&amp;#10;setID                           = thisStimulus_list[&quot;setID&quot;];&amp;#10;&amp;#10;// determine which of the text box question is about to be displayed&amp;#10;// this is done to change the instructions regarding how to fill out &amp;#10;// the textbox depending on the question. &amp;#10;isMail                          = currentTextboxDescription === &quot;email&quot;;&amp;#10;isAge                           = currentTextboxDescription === &quot;Age&quot;;&amp;#10;isOtherText                     = (isAge || isMail) === false;&amp;#10;//console.log(&quot;ismail&quot;,isMail,&quot;isAge&quot;,isAge,&quot;isOtherText&quot;,isOtherText);&amp;#10;&amp;#10;// change additional question text's centering and weight&amp;#10;pressSpaceTextTextbox_2.bold      = true;&amp;#10;question_textbox_2.bold           = true;&amp;#10;&amp;#10;pressSpaceTextTextbox_2.setAlignHoriz('left')&amp;#10;question_textbox_2.setAlignHoriz('left')&amp;#10;// start Timer for 500 ms periods to scan for the text &amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime                       = myClock.getTime();&amp;#10;&amp;#10;&amp;#10;// conditional instructions on how to fill out the text box &amp;#10;if (isMail === true) {&amp;#10;        // how to fill the mail textbox&amp;#10;        textBoxFill = &quot;&quot;;&amp;#10;        pressSpaceTextFill = &quot;Do not use spaces, enter a valid email format: example@gmail.com\n\n&quot;;&amp;#10;    }&amp;#10;if (isAge === true) {&amp;#10;        // how to fill the age textbox&amp;#10;        textBoxFill = &quot;&quot;;&amp;#10;        pressSpaceTextFill =&quot;Do not use spaces, enter your age in numbers; example: 31\n\n&quot;;&amp;#10;    }&amp;#10;if (isOtherText === true) {&amp;#10;        // how to fill other textboxes&amp;#10;        textBoxFill = &quot;&quot;;&amp;#10;        pressSpaceTextFill = &quot;Do not use paragraph breaks at the start or end of your response \n\n&quot;;&amp;#10;    }" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initiateTextbox_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="fill_textbox_2">
        <Param val="center-left" valType="str" updates="constant" name="alignment"/>
        <Param val="center-left" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="30" valType="num" updates="constant" name="borderWidth"/>
        <Param val="-0.5373, -0.5608, -0.5608" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="editable"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="25" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="fill_textbox_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="textboxPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="textboxSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$textBoxFill" valType="str" updates="set every repeat" name="text"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <CodeComponent name="getTextFill_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;fill_textbox_2.refresh()&amp;#10;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// get the text inside the text box&amp;#10;textInput = fill_textbox_2._pixi.text;&amp;#10;textInput = textInput.trim();&amp;#10;// check if text input contains &quot;@&quot; and &quot;.&quot; for mail input and not SPACES&amp;#10;//containsSpace = (textInput.indexOf(' ') === -1);&amp;#10;containsMail = ((textInput.indexOf('@') &gt; -1) &amp;&amp; (textInput.indexOf('.') &gt; -1) &amp;&amp;  (textInput.indexOf(&quot;example&quot;) === -1));&amp;#10;containsMail = containsMail;&amp;#10;//console.log('contains mail')&amp;#10;//console.log(containsMail);&amp;#10;// allow continue only if age input consists of two characters, does not check for number type&amp;#10;validAge = (textInput.length &gt;= 2); &amp;#10;anyCharacterTyped = (textInput.length &gt;= 1); &amp;#10;isNumber = isNaN(textInput) === false; //this condition returns true when input is a number&amp;#10;validAge = validAge &amp;&amp; isNumber; &amp;#10;&amp;#10;if (clearEventAfterChoice === 1){&amp;#10;    psychoJS.eventManager.clearEvents();    // clears keypress events&amp;#10;                                            // does not terminate the loop prematurely        &amp;#10;    }&amp;#10;&amp;#10;currentTime = myClock.getTime();&amp;#10;twoSecondElapsed = currentTime-startTime &gt;=keyboardPauseDuration;&amp;#10;if (twoSecondElapsed===true){&amp;#10;    if ((isMail &amp;&amp; containsMail) || (isAge &amp;&amp; validAge) || (isOtherText &amp;&amp; anyCharacterTyped)) {&amp;#10;        //fill_textbox.borderColor= [0, 1, 0];&amp;#10;        if (clearEventAfterChoice === 1){&amp;#10;            psychoJS.eventManager.clearEvents(); // clears keypress events after choice so that previous unrelated space &amp;#10;            clearEventAfterChoice=0;             // does not terminate the loop prematurely        &amp;#10;            }&amp;#10;        var _pj;&amp;#10;        function _pj_snippets(container) {&amp;#10;            function in_es6(left, right) {&amp;#10;                if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;                    return (right.indexOf(left) &gt; (- 1));&amp;#10;                } else {&amp;#10;                    if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                        return right.has(left);&amp;#10;                    } else {&amp;#10;                        return (left in right);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            container[&quot;in_es6&quot;] = in_es6;&amp;#10;            return container;&amp;#10;        }&amp;#10;&amp;#10;        _pj = {};&amp;#10;        _pj_snippets(_pj);&amp;#10;        keys = psychoJS.eventManager.getKeys();&amp;#10;        console.log(keys);&amp;#10;            if (keys.length) {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {         &amp;#10;                    continueRoutine = false;            &amp;#10;                } else {&amp;#10;                        psychoJS.eventManager.clearEvents();&amp;#10;                        questionReactionTime = myClock.getTime()-startTime&amp;#10;                    }&amp;#10;            }&amp;#10;    } else {&amp;#10;            //fill_textbox.borderColor= [1, 0, 0];&amp;#10;            psychoJS.eventManager.clearEvents(); &amp;#10;        }&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (isAge===true) {&amp;#10;        participantAge = textInput;&amp;#10;    }&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;// format date&amp;#10;registeryDate = util.MonotonicClock.getDateStr()&amp;#10;registeryDate = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;&amp;#10;data_passageRT.push([]); // words per minute&amp;#10;data_passageWPM.push([]); // words per minute&amp;#10;data_passageWordCount.push([]); &amp;#10;data_passageSpacing.push(currentLink); // what was the spacing used in this passage&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;data_feedbackRating.push([]) // rating of the likert scale&amp;#10;&amp;#10;data_surveyRT.push(questionReactionTime); // time to respond to comprehension question&amp;#10;data_compChoice.push(textInput) // chosen option is registered as text&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="partAge = fill_textbox.text" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getTextFill_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="question_textbox_2">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="question_textbox_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter,questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentTextboxTextDemographic + &quot; (enter the text into the box below)&quot;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpaceTextTextbox_2">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpaceTextTextbox_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$(pressSpaceTextFill+ &quot;Please press the ENTER to advance to the next page after you type in.&quot;)" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="blank_interval">
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="font_preference">
      <CodeComponent name="preferenceCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// change additional question text's centering and style&amp;#10;preferenceText.setAlignHoriz('left')&amp;#10;preferenceText.bold     = true;&amp;#10;&amp;#10;// adjust slider vertical size depending on the number of options &amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels                = [&quot;I strongly prefer A&quot;,&quot;I prefer A&quot;, &quot;I strongly prefer B&quot;,&quot;I prefer B&quot;,&quot;I strongly prefer C&quot;,&quot;I prefer C&quot;,&quot;I don't prefer any of the font options&quot;]&amp;#10;sliderLabels                = sliderLabels.reverse();&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount                  = (sliderLabels.length);&amp;#10;&amp;#10;&amp;#10;&amp;#10;blockName = &quot;post_survey&quot;&amp;#10;setID = &quot;post_survey&quot;&amp;#10;itemID = &quot;fontPreference&quot;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="preferenceCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="preference_image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/preference_images/alltogether.jpg" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="preference_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,preference_y + 100)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="preferencesize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="preferenceText">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="preferenceText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, preference_question_y)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="The same paragraph is written in three different fonts. Please specify which font you prefer: " valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="pradiobutton_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="pradiobutton_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="pradiobutton_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="pradiobutton_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="pradiobutton_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="pradiobutton_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="pradiobutton_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="pradiobutton_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="pradiobutton_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="pradiobutton_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="pradiobutton_6">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="pradiobutton_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="pradiobutton_7">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="pradiobutton_7" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="pradiobutton_8">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="pradiobutton_8" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="pradiobutton_9">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="pradiobutton_9" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SliderComponent name="preferenceSlider">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="Calibri" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="labelTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="preferenceSlider" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="sliderPositionPreference" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1,2,3)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="updateSliderPreference">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// create tick marks so that data registry makes sense in terms of scores of each &amp;#10;// label: start from 1 not 0.&amp;#10;tickMarks = range(1,labelCount);&amp;#10;&amp;#10;// display shuffled labels as tick marks &amp;#10;preferenceSlider.setLabels(sliderLabels);&amp;#10;// change ticks of the slider&amp;#10;preferenceSlider.setTicks(tickMarks);    &amp;#10;// change font of the slider text&amp;#10;preferenceSlider.setFontSize(labelTextSize*y_scale);&amp;#10;// adjust slider's position and size&amp;#10;preferenceSlider._pos  = sliderPositionPreference&amp;#10;preferenceSlider._size = sliderSize;&amp;#10;&amp;#10;&amp;#10;console.log('slider size font pref: ', sliderSize)&amp;#10;// change slider's color and marker properties&amp;#10;preferenceSlider._lineColor = col_white; // color of static circle ;&amp;#10;&amp;#10;labelPosition_y  = Math.abs(sliderSize[1] / (labelCount-1));&amp;#10;positions = [];&amp;#10;&amp;#10;// what are the maximum amount of radio buttons of this slider&amp;#10;// count radiobutton_# components, now it is 9.&amp;#10;maxLabels = 9;&amp;#10;&amp;#10;pradiobutton_size = [sliderSize[0]* 1.15, sliderSize[0]* 1.15];&amp;#10;&amp;#10;evenLabelCount = ((labelCount % 2) === 0);&amp;#10;// name of radio components&amp;#10;radioComponentName = 'pradiobutton_'&amp;#10;&amp;#10;if (evenLabelCount) {&amp;#10;    console.log('here even label')&amp;#10;    // there is no middle label, so get the half of the distance&amp;#10;    // of labels and move on from there while positioning the radio buttons &amp;#10;    labelPosition_y = labelPosition_y / 2;&amp;#10;&amp;#10;    // initialize label position coordinate multiplier&amp;#10;    positionMultiplier = 1;&amp;#10;&amp;#10;    // loop over number of labels&amp;#10;    for (var k = 0; k &lt; labelCount; k++){&amp;#10;        &amp;#10;        // initialize label number index&amp;#10;        var buttonNo = k + 1;                  &amp;#10;&amp;#10;        if ((k % 2) === 0) {&amp;#10;            // increase the position multipler at every odd number &amp;#10;            // this increases the distance from the middle label every third label&amp;#10;            if (k &gt; 1) {&amp;#10;&amp;#10;                positionMultiplier =positionMultiplier+2; &amp;#10;            }  &amp;#10;            positions[k] = [sliderPositionPreference[0], sliderPositionPreference[1]+(positionMultiplier*labelPosition_y)];&amp;#10;&amp;#10;        } else{&amp;#10;&amp;#10;            positions[k] = [sliderPositionPreference[0], sliderPositionPreference[1]-(positionMultiplier*labelPosition_y)];&amp;#10;            &amp;#10;        }&amp;#10;        // enter the position and size values into individual label radio buttons  &amp;#10;        // position&amp;#10;        eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;        // draw the changes &amp;#10;        eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;        console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;    }    &amp;#10;    &amp;#10;} else {&amp;#10;        // if there are odd number of labels&amp;#10;        &amp;#10;        // there will be a middle label which should be placed at the &amp;#10;        // default position of the slider&amp;#10;        pradiobutton_1._pos      = [sliderPositionPreference[0], sliderPositionPreference[1]];&amp;#10;        pradiobutton_1._size     = pradiobutton_size;&amp;#10;        eval(radioComponentName + 1 + '._pos' +'= ['+ sliderPositionPreference[0] +','+ sliderPositionPreference[1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + 1 + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );        &amp;#10;        // initialize label position coordinate multiplier&amp;#10;        positionMultiplier = 0;&amp;#10;        // loop over labels&amp;#10;        for (var k = 1; k &lt; labelCount; k++){            &amp;#10;            // initialize label number index&amp;#10;            var buttonNo = k + 1;&amp;#10;            &amp;#10;            if ((k % 2) === 0) {&amp;#10;&amp;#10;                positions[k] = [sliderPositionPreference[0], sliderPositionPreference[1]+(positionMultiplier*labelPosition_y)]; &amp;#10;&amp;#10;            } else{&amp;#10;                // increase the position multipler at every odd number &amp;#10;                // this increases the distance from the middle label every third label&amp;#10;                positionMultiplier =positionMultiplier+1 &amp;#10;                positions[k] = [sliderPositionPreference[0], sliderPositionPreference[1]-(positionMultiplier*labelPosition_y)];   &amp;#10;                &amp;#10;            }&amp;#10;            console.log('uneven k',k)&amp;#10;            console.log('uneven positionMultiplier',positionMultiplier)&amp;#10;            // enter the position and size values into individual label radio buttons  &amp;#10;            // position&amp;#10;            eval(radioComponentName + buttonNo + '._pos' +'= ['+ positions[k][0] +','+ positions[k][1]+'];' );&amp;#10;            // size&amp;#10;            eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;            // draw the changes &amp;#10;            eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;&amp;#10;            console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;        }&amp;#10;    &amp;#10;    }&amp;#10;&amp;#10;&amp;#10;// remove radio buttons of slider labels that do not exist&amp;#10;for (var i = labelCount; i &lt;= maxLabels - 1 ; i++){&amp;#10;    console.log(i);&amp;#10;    var buttonNo = i + 1;&amp;#10;    positions[i] = [sliderPositionPreference[0], sliderPositionPreference[1]+labelPosition_y];&amp;#10;    eval(radioComponentName + buttonNo + '._pos'+'= ['+ 0 +','+ 0+'];' );&amp;#10;    eval(radioComponentName + buttonNo + '._size'+'='+1+';' );    &amp;#10;    eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;}&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="preferenceChoice = preferenceSlider.getRating();&amp;#10;&amp;#10;// create a for loop using length of labels and update wrap width of these labels&amp;#10;for (let i = 0; i &lt; labelCount; i++) {&amp;#10;    //console.log('current label for wrapwidth',i)&amp;#10;    //console.log('type of I',typeof i.toString())&amp;#10;    preferenceSlider._pixiLabels[i.toString()]._style._wordWrap = true&amp;#10;    preferenceSlider._pixiLabels[i.toString()]._style._wordWrapWidth = wrapWidthText    &amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="&amp;#10;// get the selected option among the labels&amp;#10;preferenceChoiceText = sliderLabels[preferenceChoice-1]; // -1 because label index starts with 0, tick mark starts with 1. &amp;#10;&amp;#10;// console.log('mouse-feedback: ',     mouseFeedback)&amp;#10;// console.log('mouse-feedback-time: ',mouseFeedback.time)&amp;#10;&amp;#10;// get reaction time from psychopy's mouse component &amp;#10;mouselength             = mousePreference.time.length;&amp;#10;// get the mouse component's starting second&amp;#10;mouse_tStart            = mousePreference.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart           = preferenceText.tStart; &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick              = mousePreference.time[mouselength-1]; &amp;#10;// add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;preferenceRT          = validClick + mouse_tStart - button_tStart; &amp;#10;&amp;#10;&amp;#10;// console.log('mouse time',validClick)&amp;#10;// console.log('mouse rt', feedbackRT)    &amp;#10;&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom             = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;// format date&amp;#10;registeryDate           = util.MonotonicClock.getDateStr()&amp;#10;registeryDate           = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_passageSpacing.push([]); // what was spacing used in this passage&amp;#10;data_passageType.push([]);// what is the type of this set (informative, narrative)?&amp;#10;data_passageLevel.push([]); // what is the grade level (2nd, 3rd)&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;&amp;#10;data_passageRT.push([]); // words per minute&amp;#10;data_passageWPM.push([]); // words per minute&amp;#10;data_passageWordCount.push([]); &amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;&amp;#10;data_surveyRT.push(preferenceRT); // time to respond to comprehension question&amp;#10;data_compChoice.push(preferenceChoiceText) // chosen option is registered as text&amp;#10;data_feedbackRating.push(preferenceChoice) // rating of the likert scale&amp;#10;&amp;#10;&amp;#10;// remove radio buttons so that they won't appear at the center in next trial&amp;#10;for (var i = 0; i &lt; maxLabels; i++) {&amp;#10;    var buttonNo = i + 1;&amp;#10;    eval(radioComponentName + buttonNo + '._pos'+'= ['+ 0 +','+ 0+'];' );&amp;#10;    eval(radioComponentName + buttonNo + '._size'+'='+1+';' );    &amp;#10;    &amp;#10;    }" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="updateSliderPreference" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="preferenceButton">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="preferenceButton" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="preferenceSlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mousePreference">
        <Param val="preferenceButton" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mousePreference" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="preferenceSlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="preferenceInstructionsRoutine">
      <TextComponent name="text_3">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You have finished reading all articles! &amp;#10;&amp;#10;Kindly respond to the post-survey questions.&amp;#10;&amp;#10;Please press the button on the right hand corner to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_6">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="text_3.setAlignHoriz('left')&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_6" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButtonDemographicInstructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButtonDemographicInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseDemographicInstructions">
        <Param val="nextButtonDemographicInstructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseDemographicInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="demographicInstructionsRoutine">
      <TextComponent name="text_4">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="text_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In this section, please answer all questions for the demographic survey.&amp;#10;&amp;#10;Please press the button on the right hand corner to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_9">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="text_4.setAlignHoriz('left')&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_9" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButtonDemographicInstructions_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButtonDemographicInstructions_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseDemographicInstructions_2">
        <Param val="nextButtonDemographicInstructions_2" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseDemographicInstructions_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="instruction_proxy">
      <TextComponent name="text_5">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="text_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Before delving into the articles, share your thoughts by answering a couple of questions related to the topic.&amp;#10;&amp;#10;Please press the button below to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_11">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="text_5.setAlignHoriz(&quot;left&quot;);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_11" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_questionInstructions_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_questionInstructions_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseQuestionInstructions_2">
        <Param val="nextButton_questionInstructions_2" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseQuestionInstructions_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="screening_instructions">
      <TextComponent name="screeningInstructions">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="screeningInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In this section, please use your daily corrected vision method to answer each question. &amp;#10;&amp;#10;Please use a tape measurer and sit 14 inches from the screen and try your best to not move.&amp;#10;&amp;#10;Please press the button below to continue." valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_12">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="screeningInstructions.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_12" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_screeningInstructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_screeningInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouse_screeningInstructions">
        <Param val="nextButton_screeningInstructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_screeningInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="snellen_instructions">
      <TextComponent name="snellenInstructions">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="snellenInstructions" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$screeningInstructionText" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="nextButton_snellenInstructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_snellenInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="snellen_mouse_instructions">
        <Param val="nextButton_snellenInstructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="snellen_mouse_instructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="1" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="snellen_test">
      <CodeComponent name="initiate_snellen">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// change additional question text's centering and weight&amp;#10;pressSpaceSnellen.bold                = true;&amp;#10;snellen_question.bold                 = true;&amp;#10;snellen_chart_instructions.bold       = true;&amp;#10; &amp;#10;pressSpaceSnellen.setAlignHoriz('left')&amp;#10;snellen_question.setAlignHoriz('left')&amp;#10;//snellen_chart_instructions.setAlignHoriz('left')&amp;#10;// start Timer for 500 ms periods to scan for the text &amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime                       = myClock.getTime();&amp;#10;&amp;#10;&amp;#10;screeningY = (screeningSize[1]/2) *1.2&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initiate_snellen" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="snellen_textbox">
        <Param val="center-left" valType="str" updates="constant" name="alignment"/>
        <Param val="center-left" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="30" valType="num" updates="constant" name="borderWidth"/>
        <Param val="-0.5373, -0.5608, -0.5608" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="editable"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="25" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="snellen_textbox" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="[snellenWidth*.7, 0]" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="[textboxSize[0]/2,textboxSize[1]]" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <CodeComponent name="getfill_snellen">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;snellen_textbox.refresh()&amp;#10;console.log(&quot;text box items&quot;,snellen_textbox);&amp;#10;&amp;#10;enableButton = false&amp;#10;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// get the text inside the text box&amp;#10;textInput               = snellen_textbox._pixi.text;&amp;#10;textInput               = textInput.trim();&amp;#10;&amp;#10;anyCharacterTyped       = (textInput.length &gt;= 1); &amp;#10;isNumber                = isNaN(textInput) === false; //this condition returns true when input is a number&amp;#10;&amp;#10;&amp;#10;&amp;#10;if (clearEventAfterChoice === 1){&amp;#10;    psychoJS.eventManager.clearEvents();    // clears keypress events&amp;#10;                                            // does not terminate the loop prematurely        &amp;#10;    }&amp;#10;&amp;#10;currentTime             = myClock.getTime();&amp;#10;twoSecondElapsed        = currentTime-startTime &gt;=2;&amp;#10;&amp;#10;if (twoSecondElapsed===true){&amp;#10;    &amp;#10;  enableButton          = (isNumber &amp;&amp; anyCharacterTyped)&amp;#10;  &amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// get browser zoom&amp;#10;browserZoom                 = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;// format date&amp;#10;registeryDate               = util.MonotonicClock.getDateStr()&amp;#10;registeryDate               = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_totalTrialIndex.push(&quot;screening_trials&quot;); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push([]); // what was the font used in this passage&amp;#10;&amp;#10;data_passageRT.push([]); // words per minute&amp;#10;data_passageWPM.push([]); // words per minute&amp;#10;data_passageWordCount.push([]); &amp;#10;data_passageSpacing.push([]); // what was the spacing used in this passage&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;data_feedbackRating.push([]) // rating of the likert scale&amp;#10;&amp;#10;data_surveyRT.push([]); // time to respond to comprehension question&amp;#10;data_compChoice.push(textInput) // chosen option is registered as text&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="partAge = fill_textbox.text" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getfill_snellen" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="snellen_chart_image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$screeningImage" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="snellen_chart_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="screeningSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="snellen_chart_instructions">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="snellen_chart_instructions" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[0, screeningY]" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$chartInstructions" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="snellen_question">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize/1.5" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="snellen_question" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[snellenWidth*.7, textboxSize[1]]" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Type in the number of the line you find comfortable reading." valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpaceSnellen">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize/1.5" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpaceSnellen" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[snellenWidth*.7, -textboxSize[1]]" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please press the button below to continue." valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="nextButton_snellen">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_snellen" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="snellen_mouse">
        <Param val="nextButton_snellen" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="snellen_mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$enableButton" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="memory_general_instructions">
      <TextComponent name="memoryGeneralInstructions">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="memoryGeneralInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will see a list of words and you will have 30 seconds to remember as many as you can.  Afterwards, you will be asked questions regarding the wordlist. " valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_13">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="memoryGeneralInstructions.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_13" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_memoryGenInstructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_memoryGenInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouse_memoryGenInstructions">
        <Param val="nextButton_memoryGenInstructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_memoryGenInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="memory_initialize">
      <CodeComponent name="setMemoryParameters">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="testid                  = thisMemory_trial[&quot;test_id&quot;]&amp;#10;currentList             = thisMemory_trial[&quot;word_list&quot;]&amp;#10;currentAnswers          = thisMemory_trial[&quot;answer_list&quot;]&amp;#10;currentInstruction      = thisMemory_trial[&quot;instructions&quot;]&amp;#10;&amp;#10;/* Separate fonts and spacings, then count  */&amp;#10;currentList                     = currentList.split(&quot;;&quot;)        &amp;#10;currentAnswers                  = currentAnswers.split(&quot;;&quot;)&amp;#10;listCount                       = currentList.length;&amp;#10;answerCount                     = currentAnswers.length;&amp;#10;&amp;#10;&amp;#10;// create two lists from the word list of excel file&amp;#10;displayList = [(currentList.slice(0,listCount/2)).join('\n'),(currentList.slice(listCount/2,listCount)).join('\n')]&amp;#10;&amp;#10;currentAnswers = randomArrayShuffle(currentAnswers)&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="setMemoryParameters" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="memory_specific_instructions">
      <TextComponent name="memorySpecificInstructions">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="memorySpecificInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$instructions" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_14">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="memorySpecificInstructions.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_14" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_memorySpecInstructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_memorySpecInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouse_memorySpecInstructions">
        <Param val="nextButton_memorySpecInstructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_memorySpecInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="memory_display_list">
      <TextComponent name="listInstruction">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="listInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, vsize/2.2)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Memorize the words displayed below" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="display_list1">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*1.7" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="display_list1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-listx, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$displayList[0]" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="display_list2">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*1.7" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="display_list2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(listx, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$displayList[1]" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param val="'m'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="memory_response">
      <CodeComponent name="memoryAnswerButton">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// check if current word was in the list &amp;#10;&amp;#10;currentWord = currentAnswers[memory_answer_loop.thisN]&amp;#10;&amp;#10;// check if the word is in the list (false not, true in the list)&amp;#10;checkWord = currentList.indexOf(currentWord) &gt;= 0 " valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// estimate change in Y&amp;#10;mousePressed = memory_mouse.getPressed()[0]&amp;#10;&amp;#10;// debug&amp;#10;if (mousePressed){&amp;#10;    clickPosition = memory_mouse.getPos()&amp;#10;    checkClick = rectangleClickCheckImage(clickPosition,memory_button)    &amp;#10;    console.log('check click - popup var: ', checkClick)&amp;#10;    if (checkClick[0]) {&amp;#10;        continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (((checkClick[1] === &quot;yes_button&quot;) &amp;&amp; checkWord) || ((checkClick[1] === &quot;no_button&quot;) &amp;&amp; !checkWord)){&amp;#10;    memoryResponse = 1&amp;#10;    console.log('correct')&amp;#10;    } else {&amp;#10;        memoryResponse = 0&amp;#10;        console.log('incorrect')&amp;#10;        }&amp;#10;&amp;#10;&amp;#10;if (checkClick[1] === &quot;yes_button&quot;){&amp;#10;    choiceText = 'yes'&amp;#10;    } else if (checkClick[1] === &quot;no_button&quot;){&amp;#10;        choiceText = 'no'&amp;#10;        }&amp;#10;// console.log('mouse-comp: ',mouseComprehension)&amp;#10;// console.log('mouse-comp-time: ',mouseComprehension.time)&amp;#10;&amp;#10;&amp;#10;// get reaction time from psychopy's mouse component &amp;#10;&amp;#10;// get the amount of mouse clicks&amp;#10;mouselength         = memory_mouse.time.length&amp;#10;// get the start time of mouse click component&amp;#10;mouse_tStart        = memory_mouse.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart       = yes_button.tStart &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick          = memory_mouse.time[mouselength-1]; &amp;#10;// add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;compRT              = validClick + mouse_tStart - button_tStart; &amp;#10;&amp;#10;// console.log('mouse time',validClick)&amp;#10;// console.log('mouse rt', compRT)    &amp;#10;&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom         = window.outerWidth*100 / window.innerWidth;&amp;#10;// format date&amp;#10;registeryDate       = util.MonotonicClock.getDateStr()&amp;#10;registeryDate       = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data into lists&amp;#10;data_setID.push(testid); // type of the set (AI or Human)&amp;#10;data_itemID.push(currentAnswers[memory_answer_loop.thisN]); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(&quot;test&quot;); // is this a test or a practice trial&amp;#10;data_blockName.push(&quot;memory_test&quot;); // what is the name of this block &amp;#10;data_totalTrialIndex.push(&quot;memory_trials&quot;); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push([]); // what was the font used in this passage&amp;#10;data_passageSpacing.push([]); // what was spacing used in this passage&amp;#10;data_passageType.push([]);// what is the type of this set (informative, narrative)?&amp;#10;data_passageLevel.push([]); // what is the grade level (2nd, 3rd)&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;&amp;#10;data_passageRT.push([]); // words per minute&amp;#10;data_passageWPM.push([]); // words per minute&amp;#10;data_passageWordCount.push([]); &amp;#10;data_feedbackRating.push([]) // rating of the likert scale&amp;#10;&amp;#10;data_compChoice.push(choiceText); // chosen option is registered as text&amp;#10;data_surveyRT.push(compRT); // time to respond to comprehension question&amp;#10;data_compAccuracy.push(memoryResponse); // empty because there is no accuracy during passages " valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="memoryAnswerButton" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="responseInstruction">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="responseInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, vsize/7)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Was this word on the list?" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="memory_word">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*1.7" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="memory_word" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentAnswers[memory_answer_loop.thisN]" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="yes_button">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/memory/yes.jpg" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="yes_button" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(memory_button.yes_button.x, memory_button.yes_button.y)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(memory_button.yes_button.width, memory_button.yes_button.height)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="no_button">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/memory/no.jpg" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="no_button" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(memory_button.no_button.x, memory_button.no_button.y)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(memory_button.no_button.width, memory_button.no_button.height)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="memory_mouse">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="memory_mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="memory_interval">
      <TextComponent name="memory_interval_text">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*2" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="memory_interval_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="practiceInstructions">
      <TextComponent name="generalInstructionsText_3">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="generalInstructionsText_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Consider this run as a practice trial to familiarize yourself with the task. &amp;#10;&amp;#10;Press the button below to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_15">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="generalInstructionsText_3.setAlignHoriz(&quot;left&quot;);&amp;#10;&amp;#10;&amp;#10;console.log('slider size initial: ', sliderSize)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_15" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_Instructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_Instructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseInstructions_5">
        <Param val="nextButton_Instructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseInstructions_5" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$mouseDelayOther" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="post_engagement">
      <CodeComponent name="post_engagement_questions">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="post_engagement_questions = [&amp;#10;  {&amp;#10;    text: &quot;I have fun looking at newspaper articles.&quot;,&amp;#10;    type: &quot;engagement&quot;,&amp;#10;  },&amp;#10;  {&amp;#10;    text: &quot;It is hard to pay attention to what I'm reading.&quot;,&amp;#10;    type: &quot;engagement&quot;,&amp;#10;  },&amp;#10;  {&amp;#10;    text: &quot;I think it is important to understand what I read.&quot;,&amp;#10;    type: &quot;attitude&quot;,&amp;#10;  },&amp;#10;  {&amp;#10;    text: &quot;I only read if I have to&quot;,&amp;#10;    type: &quot;engagement&quot;,&amp;#10;  },&amp;#10;  {&amp;#10;    text: &quot;I think reading is important.&quot;,&amp;#10;    type: &quot;engagement&quot;,&amp;#10;  },&amp;#10;  {&amp;#10;    text: &quot;I enjoy reading&quot;,&amp;#10;    type: &quot;attitude&quot;,&amp;#10;  },&amp;#10;];&amp;#10;&amp;#10;post_engagement_answers = [&amp;#10;  &quot;Not at all like me&quot;,&amp;#10;  &quot;Not much like me&quot;,&amp;#10;  &quot;Can't decide&quot;,&amp;#10;  &quot;Kind of like me&quot;,&amp;#10;  &quot;A lot like me&quot;,&amp;#10;].reverse();" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var question = post_engagement_questions[post_engagement_loop.thisN]&amp;#10;currentPostEngagementQuestion = question.text&amp;#10;currentPostEngagementType = question.type&amp;#10;sliderLabels = post_engagement_answers.join(&quot;;&quot;)&amp;#10;&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID                          = currentPostEngagementQuestion;&amp;#10;&amp;#10;//what is the set ID&amp;#10;setID = &quot;post_engagement&quot;&amp;#10;&amp;#10;// change additional question text's centering and style&amp;#10;questionTextPostEngagement.setAlignHoriz('left')&amp;#10;questionTextPostEngagement.bold = true;&amp;#10;pressSpacePostEngagement.setAlignHoriz('left')&amp;#10;pressSpacePostEngagement.bold = true;&amp;#10;&amp;#10;// adjust slider vertical size depending on the number of options &amp;#10;// get slider labels from the excel file&amp;#10;console.log('slider size hyper pref before: ', sliderSize)&amp;#10;&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount = sliderLabels.length;&amp;#10;// if there are less then 3 options on the slider, &amp;#10;// decrease the vertical size of the slider by half&amp;#10;if (labelCount &lt; 3){ &amp;#10;    sliderSize[1] = (vsize*26/100)/2.5  &amp;#10;} else {&amp;#10;    sliderSize[1] = vsize*26/100;&amp;#10;}&amp;#10;  " valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="post_engagement_questions" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="questionTextPostEngagement">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionTextPostEngagement" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentPostEngagementQuestion" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpacePostEngagement">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpacePostEngagement" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please press the button below to proceed after your choice." valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="peradiobutton_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="peradiobutton_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="peradiobutton_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="peradiobutton_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="peradiobutton_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="peradiobutton_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="peradiobutton_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="peradiobutton_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="peradiobutton_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="peradiobutton_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SliderComponent name="questionsSliderPostEngagement">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionsSliderPostEngagement" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="sliderPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="updateAndRegisterPostEngagement">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="////////////////////////////////////////////////&amp;#10;//// UPDATE SLIDER LABELS, SIZE, COLOR ETC. ////&amp;#10;////////////////////////////////////////////////&amp;#10;&amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels                        = sliderLabels.split(&quot;;&quot;);&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount                          = sliderLabels.length;&amp;#10;sliderLabels                        = sliderLabels.reverse();&amp;#10;&amp;#10;// create tick marks so that data registry makes sense in terms of scores of each &amp;#10;// label: start from 1 not 0.&amp;#10;tickMarks                           = range(1,labelCount);&amp;#10;&amp;#10;// display shuffled labels as tick marks &amp;#10;questionsSliderPostEngagement.setLabels(sliderLabels);&amp;#10;&amp;#10;// change ticks of the slider&amp;#10;questionsSliderPostEngagement.setTicks(tickMarks);    &amp;#10;&amp;#10;// change font of the slider text&amp;#10;questionsSliderPostEngagement.setFontSize(labelTextSize*y_scale);&amp;#10;&amp;#10;// adjust slider's position and size&amp;#10;questionsSliderPostEngagement._pos      = sliderPosition;&amp;#10;questionsSliderPostEngagement._size     = sliderSize;&amp;#10;&amp;#10;// change slider's color and marker properties&amp;#10;questionsSliderPostEngagement._lineColor = col_white // color of static circle ;&amp;#10;&amp;#10;// what are the maximum amount of radio buttons of this slider&amp;#10;// count radiobutton_# components, now it is 9.&amp;#10;labelPosition_y                     = Math.abs(sliderSize[1] / (labelCount-1));&amp;#10;&amp;#10;positions                           = [];&amp;#10;&amp;#10;maxLabels                           = 9;&amp;#10;&amp;#10;radiobutton_size                    = [sliderSize[0]* 1.15, sliderSize[0]* 1.15];&amp;#10;&amp;#10;evenLabelCount                      = ((labelCount % 2) === 0);&amp;#10;// name of radio components&amp;#10;radioComponentName                  = 'peradiobutton_';&amp;#10;&amp;#10;if (evenLabelCount) {&amp;#10;    console.log('here even label')&amp;#10;    // there is no middle label, so get the half of the distance&amp;#10;    // of labels and move on from there while positioning the radio buttons &amp;#10;    labelPosition_y                 = labelPosition_y / 2;&amp;#10;&amp;#10;    // initialize label position coordinate multiplier&amp;#10;    positionMultiplier              = 1;&amp;#10;&amp;#10;    // loop over number of labels&amp;#10;    for (var k = 0; k &lt; labelCount; k++){&amp;#10;        &amp;#10;        // initialize label number index&amp;#10;        var buttonNo                = k + 1;                  &amp;#10;&amp;#10;        if ((k % 2) === 0) {&amp;#10;            // increase the position multipler at every odd number &amp;#10;            // this increases the distance from the middle label every third label&amp;#10;            if (k &gt; 1) {&amp;#10;&amp;#10;                positionMultiplier  = positionMultiplier+2; &amp;#10;            }  &amp;#10;            positions[k]            = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)];&amp;#10;&amp;#10;        } else{&amp;#10;&amp;#10;            positions[k]            = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];&amp;#10;            &amp;#10;        }&amp;#10;        // enter the position and size values into individual label radio buttons  &amp;#10;        // position&amp;#10;        eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;        // draw the changes &amp;#10;        eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;        // console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;    }    &amp;#10;    &amp;#10;} else {&amp;#10;        // if there are odd number of labels&amp;#10;        &amp;#10;        // there will be a middle label which should be placed at the &amp;#10;        // default position of the slider&amp;#10;        peradiobutton_1._pos         = [sliderPosition[0], sliderPosition[1]];&amp;#10;        peradiobutton_1._size        = radiobutton_size;&amp;#10;&amp;#10;        eval(radioComponentName + 1 + '._pos' +'= ['+ sliderPosition[0] +','+ sliderPosition[1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + 1 + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;&amp;#10;        // initialize label position coordinate multiplier&amp;#10;        positionMultiplier          = 0;&amp;#10;&amp;#10;        // loop over labels&amp;#10;        console.error(&quot;label count&quot;, {labelCount})&amp;#10;        for (var k = 1; k &lt; labelCount; k++){            &amp;#10;            // initialize label number index&amp;#10;            var buttonNo = k + 1;&amp;#10;            &amp;#10;            if ((k % 2) === 0) {&amp;#10;&amp;#10;                positions[k]        = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)]; &amp;#10;&amp;#10;            } else{&amp;#10;                // increase the position multipler at every odd number &amp;#10;                // this increases the distance from the middle label every third label&amp;#10;                positionMultiplier  = positionMultiplier+1;&amp;#10;                positions[k]        = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];   &amp;#10;                &amp;#10;            }&amp;#10;            // console.log('uneven k',k);&amp;#10;            // console.log('uneven positionMultiplier',positionMultiplier);&amp;#10;            // enter the position and size values into individual label radio buttons  &amp;#10;            // position&amp;#10;            eval(radioComponentName + buttonNo + '._pos' +'= ['+ positions[k][0] +','+ positions[k][1]+'];' );&amp;#10;            // size&amp;#10;            eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;            // draw the changes &amp;#10;            eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;&amp;#10;            // console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;        }&amp;#10;    &amp;#10;    }&amp;#10;&amp;#10;&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if thisIteration['itemType'] != None:&amp;#10;    sliderLabelsInPy = thisIteration['sliderLabels']; # for some reason it does not accept labels from excel, so I assign another variable for it&amp;#10;    sliderLabelsInPy = sliderLabelsInPy.split(&quot;;&quot;)&amp;#10;    #print(sliderLabelsInPy)&amp;#10;&amp;#10;    labelCount = len(sliderLabelsInPy)&amp;#10;    tickMarks = list(range(labelCount))&amp;#10;    tickMarks = [x+1 for x in tickMarks]&amp;#10;&amp;#10;        &amp;#10;    # create new slider with updated labels&amp;#10;    comp_question = visual.Slider(win=win, name='comp_question',&amp;#10;        startValue=None, size=(.01, .2), pos=(-.75, -.1), units=None,&amp;#10;        labels=sliderLabelsInPy, ticks=tickMarks, granularity=1.0,&amp;#10;        style='radio', styleTweaks=(), opacity=None,&amp;#10;        color='Black', fillColor='White', borderColor='Black', colorSpace='rgb',&amp;#10;        font='Arial', labelHeight=normFontSize,&amp;#10;        flip=True,labelWrapWidth = generalWrapWidth, depth=-3, readOnly=False)&amp;#10;    question_text.setAlignHoriz('left')&amp;#10;    #for label in comp_question.labelObjs:&amp;#10;           # label.height = generalFontSize  # Or whatever size you want    &amp;#10;            #label.wrapWidth = 5" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="compChoice = questionsSliderPostEngagement.getRating();&amp;#10;&amp;#10;// create a for loop using length of labels and update these like that&amp;#10;for (let i = 0; i &lt; labelCount; i++) {&amp;#10;    //console.log('current label for wrapwidth',i)&amp;#10;    //console.log('type of I',typeof i.toString())&amp;#10;    questionsSliderPostEngagement._pixiLabels[i.toString()]._style._wordWrap = true&amp;#10;    questionsSliderPostEngagement._pixiLabels[i.toString()]._style._wordWrapWidth = wrapWidthText    &amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// get the selected option among the labels&amp;#10;compChoiceText = sliderLabels[compChoice-1]; // -1 because label index starts with 0, tick mark starts with 1. &amp;#10;&amp;#10;&amp;#10;&amp;#10;// get reaction time from psychopy's mouse component &amp;#10;mouselength             = mousePostEngagement.time.length;&amp;#10;// get the mouse component's starting second&amp;#10;mouse_tStart            = mousePostEngagement.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart           = questionTextPostEngagement.tStart; &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick              = mousePostEngagement.time[mouselength-1]; &amp;#10;// add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;demographicRT           = validClick + mouse_tStart - button_tStart; &amp;#10;&amp;#10;// get the zoom level of browser&amp;#10;var browserZoom     = window.outerWidth*100 / window.innerWidth;&amp;#10;// format date&amp;#10;registeryDate       = util.MonotonicClock.getDateStr();&amp;#10;registeryDate       = formatDateTime(registeryDate);&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(currentPostEngagementType); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;data_passageSpacing.push([]); // what was the spacing used in this passage&amp;#10;&amp;#10;// reaction time&amp;#10;data_passageRT.push(demographicRT); &amp;#10;// words per minute&amp;#10;data_passageWPM.push([]); &amp;#10;data_passageWordCount.push([]); &amp;#10;&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;data_feedbackRating.push([]) // rating of the likert scale&amp;#10;&amp;#10;data_surveyRT.push(questionReactionTime); // time to respond to comprehension question&amp;#10;data_compChoice.push(compChoiceText) // chosen option is registered as text&amp;#10;// remove radio buttons so that they won't appear at the center in next trial&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="updateAndRegisterPostEngagement" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_postEngagement">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_postEngagement" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionsSliderPostEngagement.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mousePostEngagement">
        <Param val="nextButton_postEngagement" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mousePostEngagement" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionsSliderPostEngagement.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="post_engagement_2"/>
    <Routine name="hyperlink_benefit_2"/>
    <Routine name="hyperlink_preference">
      <CodeComponent name="hyperlink_preference_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="hyperlink_preference_answers = [&amp;#10;  &quot;I strongly prefer hyperlinks&quot;,&amp;#10;  &quot;I prefer hyperlinks&quot;,&amp;#10;  &quot;I don’t have a preference&quot;,&amp;#10;  &quot;I do not prefer hyperlinks&quot;,&amp;#10;  &quot;I strongly do not prefer hyperlinks&quot;,&amp;#10;].reverse();" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="currenHyperlinkPrefernceQuestion = &quot;My hyperlink preference is...&quot;&amp;#10;&amp;#10;sliderLabels = hyperlink_preference_answers.join(&quot;;&quot;)&amp;#10;&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID                          = currenHyperlinkPrefernceQuestion;&amp;#10;&amp;#10;//what is the set ID&amp;#10;setID = &quot;hyperlink_preference&quot;&amp;#10;&amp;#10;// change additional question text's centering and style&amp;#10;questionTextHyperlinkPreference.setAlignHoriz('left')&amp;#10;questionTextHyperlinkPreference.bold = true;&amp;#10;pressSpaceHyperlinkPreference.setAlignHoriz('left')&amp;#10;pressSpaceHyperlinkPreference.bold = true;&amp;#10;&amp;#10;// adjust slider vertical size depending on the number of options &amp;#10;// get slider labels from the excel file&amp;#10;console.log('slider size hyper pref before: ', sliderSize)&amp;#10;&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount = sliderLabels.length;&amp;#10;// if there are less then 3 options on the slider, &amp;#10;// decrease the vertical size of the slider by half&amp;#10;if (labelCount &lt; 3){ &amp;#10;    sliderSize[1] = (vsize*26/100)/2.5  &amp;#10;} else {&amp;#10;    sliderSize[1] = vsize*26/100;&amp;#10;}&amp;#10;  " valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="hyperlink_preference_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="questionTextHyperlinkPreference">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionTextHyperlinkPreference" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currenHyperlinkPrefernceQuestion" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpaceHyperlinkPreference">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpaceHyperlinkPreference" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please press the button below to proceed after your choice." valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="hpbutton_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="hpbutton_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="hpbutton_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="hpbutton_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="hpbutton_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="hpbutton_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="hpbutton_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="hpbutton_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="hpbutton_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="hpbutton_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(radiobutton_size, radiobutton_size)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SliderComponent name="questionsSliderHyperlinkPreference">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionsSliderHyperlinkPreference" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="sliderPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="updateAndRegisterHyperlinkPreference">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="////////////////////////////////////////////////&amp;#10;//// UPDATE SLIDER LABELS, SIZE, COLOR ETC. ////&amp;#10;////////////////////////////////////////////////&amp;#10;&amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels                        = sliderLabels.split(&quot;;&quot;);&amp;#10;//sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount                          = sliderLabels.length;&amp;#10;sliderLabels                        = sliderLabels.reverse();&amp;#10;&amp;#10;// create tick marks so that data registry makes sense in terms of scores of each &amp;#10;// label: start from 1 not 0.&amp;#10;tickMarks                           = range(1,labelCount);&amp;#10;&amp;#10;// display shuffled labels as tick marks &amp;#10;questionsSliderHyperlinkPreference.setLabels(sliderLabels);&amp;#10;&amp;#10;// change ticks of the slider&amp;#10;questionsSliderHyperlinkPreference.setTicks(tickMarks);    &amp;#10;&amp;#10;// change font of the slider text&amp;#10;questionsSliderHyperlinkPreference.setFontSize(labelTextSize*y_scale);&amp;#10;&amp;#10;// adjust slider's position and size&amp;#10;questionsSliderHyperlinkPreference._pos      = sliderPosition;&amp;#10;questionsSliderHyperlinkPreference._size     = sliderSize;&amp;#10;&amp;#10;// change slider's color and marker properties&amp;#10;questionsSliderHyperlinkPreference._lineColor = col_white // color of static circle ;&amp;#10;&amp;#10;// what are the maximum amount of radio buttons of this slider&amp;#10;// count radiobutton_# components, now it is 9.&amp;#10;labelPosition_y                     = Math.abs(sliderSize[1] / (labelCount-1));&amp;#10;&amp;#10;positions                           = [];&amp;#10;&amp;#10;maxLabels                           = 9;&amp;#10;&amp;#10;radiobutton_size                    = [sliderSize[0]* 1.15, sliderSize[0]* 1.15];&amp;#10;&amp;#10;evenLabelCount                      = ((labelCount % 2) === 0);&amp;#10;// name of radio components&amp;#10;radioComponentName                  = 'hpbutton_';&amp;#10;&amp;#10;if (evenLabelCount) {&amp;#10;    console.log('here even label')&amp;#10;    // there is no middle label, so get the half of the distance&amp;#10;    // of labels and move on from there while positioning the radio buttons &amp;#10;    labelPosition_y                 = labelPosition_y / 2;&amp;#10;&amp;#10;    // initialize label position coordinate multiplier&amp;#10;    positionMultiplier              = 1;&amp;#10;&amp;#10;    // loop over number of labels&amp;#10;    for (var k = 0; k &lt; labelCount; k++){&amp;#10;        &amp;#10;        // initialize label number index&amp;#10;        var buttonNo                = k + 1;                  &amp;#10;&amp;#10;        if ((k % 2) === 0) {&amp;#10;            // increase the position multipler at every odd number &amp;#10;            // this increases the distance from the middle label every third label&amp;#10;            if (k &gt; 1) {&amp;#10;&amp;#10;                positionMultiplier  = positionMultiplier+2; &amp;#10;            }  &amp;#10;            positions[k]            = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)];&amp;#10;&amp;#10;        } else{&amp;#10;&amp;#10;            positions[k]            = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];&amp;#10;            &amp;#10;        }&amp;#10;        // enter the position and size values into individual label radio buttons  &amp;#10;        // position&amp;#10;        eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;        // draw the changes &amp;#10;        eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;        // console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;    }    &amp;#10;    &amp;#10;} else {&amp;#10;        // if there are odd number of labels&amp;#10;        &amp;#10;        // there will be a middle label which should be placed at the &amp;#10;        // default position of the slider&amp;#10;        peradiobutton_1._pos         = [sliderPosition[0], sliderPosition[1]];&amp;#10;        peradiobutton_1._size        = radiobutton_size;&amp;#10;&amp;#10;        eval(radioComponentName + 1 + '._pos' +'= ['+ sliderPosition[0] +','+ sliderPosition[1]+'];' );&amp;#10;        // size&amp;#10;        eval(radioComponentName + 1 + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;&amp;#10;        // initialize label position coordinate multiplier&amp;#10;        positionMultiplier          = 0;&amp;#10;&amp;#10;        // loop over labels&amp;#10;        console.error(&quot;label count&quot;, {labelCount})&amp;#10;        for (var k = 1; k &lt; labelCount; k++){            &amp;#10;            // initialize label number index&amp;#10;            var buttonNo = k + 1;&amp;#10;            &amp;#10;            if ((k % 2) === 0) {&amp;#10;&amp;#10;                positions[k]        = [sliderPosition[0], sliderPosition[1]+(positionMultiplier*labelPosition_y)]; &amp;#10;&amp;#10;            } else{&amp;#10;                // increase the position multipler at every odd number &amp;#10;                // this increases the distance from the middle label every third label&amp;#10;                positionMultiplier  = positionMultiplier+1;&amp;#10;                positions[k]        = [sliderPosition[0], sliderPosition[1]-(positionMultiplier*labelPosition_y)];   &amp;#10;                &amp;#10;            }&amp;#10;            // console.log('uneven k',k);&amp;#10;            // console.log('uneven positionMultiplier',positionMultiplier);&amp;#10;            // enter the position and size values into individual label radio buttons  &amp;#10;            // position&amp;#10;            eval(radioComponentName + buttonNo + '._pos' +'= ['+ positions[k][0] +','+ positions[k][1]+'];' );&amp;#10;            // size&amp;#10;            eval(radioComponentName + buttonNo + '._size' +'= ['+sliderSize[0]* 1.15+', '+sliderSize[0]* 1.15+'];' );&amp;#10;            // draw the changes &amp;#10;            eval(radioComponentName + buttonNo + '._autoDraw' +'='+true+';');&amp;#10;&amp;#10;            // console.log('comprehension radio button'+buttonNo.toString(),eval(radioComponentName + buttonNo + '._pos' +'= ['+positions[k][0] +', '+positions[k][1]+'];' ));&amp;#10;        }&amp;#10;    &amp;#10;    }&amp;#10;&amp;#10;&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if thisIteration['itemType'] != None:&amp;#10;    sliderLabelsInPy = thisIteration['sliderLabels']; # for some reason it does not accept labels from excel, so I assign another variable for it&amp;#10;    sliderLabelsInPy = sliderLabelsInPy.split(&quot;;&quot;)&amp;#10;    #print(sliderLabelsInPy)&amp;#10;&amp;#10;    labelCount = len(sliderLabelsInPy)&amp;#10;    tickMarks = list(range(labelCount))&amp;#10;    tickMarks = [x+1 for x in tickMarks]&amp;#10;&amp;#10;        &amp;#10;    # create new slider with updated labels&amp;#10;    comp_question = visual.Slider(win=win, name='comp_question',&amp;#10;        startValue=None, size=(.01, .2), pos=(-.75, -.1), units=None,&amp;#10;        labels=sliderLabelsInPy, ticks=tickMarks, granularity=1.0,&amp;#10;        style='radio', styleTweaks=(), opacity=None,&amp;#10;        color='Black', fillColor='White', borderColor='Black', colorSpace='rgb',&amp;#10;        font='Arial', labelHeight=normFontSize,&amp;#10;        flip=True,labelWrapWidth = generalWrapWidth, depth=-3, readOnly=False)&amp;#10;    question_text.setAlignHoriz('left')&amp;#10;    #for label in comp_question.labelObjs:&amp;#10;           # label.height = generalFontSize  # Or whatever size you want    &amp;#10;            #label.wrapWidth = 5" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="compChoice = questionsSliderHyperlinkPreference.getRating();&amp;#10;&amp;#10;// create a for loop using length of labels and update these like that&amp;#10;for (let i = 0; i &lt; labelCount; i++) {&amp;#10;    //console.log('current label for wrapwidth',i)&amp;#10;    //console.log('type of I',typeof i.toString())&amp;#10;    questionsSliderHyperlinkPreference._pixiLabels[i.toString()]._style._wordWrap = true&amp;#10;    questionsSliderHyperlinkPreference._pixiLabels[i.toString()]._style._wordWrapWidth = wrapWidthText    &amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// get the selected option among the labels&amp;#10;compChoiceText = sliderLabels[compChoice-1]; // -1 because label index starts with 0, tick mark starts with 1. &amp;#10;&amp;#10;&amp;#10;&amp;#10;// get reaction time from psychopy's mouse component &amp;#10;mouselength             = mouseHyperlinkPreference.time.length;&amp;#10;// get the mouse component's starting second&amp;#10;mouse_tStart            = mouseHyperlinkPreference.tStart; &amp;#10;// get 'next button's starting second&amp;#10;button_tStart           = questionTextHyperlinkPreference.tStart; &amp;#10;// get the latest mouse click-- which terminates the loop    &amp;#10;validClick              = mouseHyperlinkPreference.time[mouselength-1]; &amp;#10;// add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;demographicRT           = validClick + mouse_tStart - button_tStart; &amp;#10;&amp;#10;// get the zoom level of browser&amp;#10;var browserZoom     = window.outerWidth*100 / window.innerWidth;&amp;#10;// format date&amp;#10;registeryDate       = util.MonotonicClock.getDateStr();&amp;#10;registeryDate       = formatDateTime(registeryDate);&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(setID); // type of the set (AI or Human)&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(setID); // what is the name of this block &amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;data_passageSpacing.push([]); // what was the spacing used in this passage&amp;#10;&amp;#10;// reaction time&amp;#10;data_passageRT.push(demographicRT); &amp;#10;// words per minute&amp;#10;data_passageWPM.push([]); &amp;#10;data_passageWordCount.push([]); &amp;#10;&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;data_feedbackRating.push([]) // rating of the likert scale&amp;#10;&amp;#10;data_surveyRT.push(questionReactionTime); // time to respond to comprehension question&amp;#10;data_compChoice.push(compChoiceText) // chosen option is registered as text&amp;#10;// remove radio buttons so that they won't appear at the center in next trial&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="updateAndRegisterHyperlinkPreference" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_hyperlinkPreference">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_hyperlinkPreference" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionsSliderHyperlinkPreference.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseHyperlinkPreference">
        <Param val="nextButton_hyperlinkPreference" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseHyperlinkPreference" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionsSliderHyperlinkPreference.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="pre_snellen">
      <CodeComponent name="initiateSnellenInstructions_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="currentEye = []" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="eyes = [&quot;right&quot;, &quot;left&quot;, &quot;both&quot;];&amp;#10;&amp;#10;trialType = &quot;test_screening&quot;;&amp;#10;blockName = &quot;screening&quot;;&amp;#10;snellenInstructions.setAlignHoriz(&quot;left&quot;);&amp;#10;&amp;#10;screeningInstructionText = &quot;&quot;&amp;#10;chartInstructions = &quot;&quot;&amp;#10;itemID = &quot;&quot;&amp;#10;setID = &quot;&quot;&amp;#10;screeningSize = []&amp;#10;screeningImage = &quot;&quot;&amp;#10;&amp;#10;switch (snellen_trials.thisN) {&amp;#10;  case 0:&amp;#10;  case 1:{&amp;#10;        currentEye = eyes[snellen_trials.thisN];&amp;#10;        chartInstructions =&amp;#10;        &quot;Make sure you are 14 inches away from the screen.\n\nCover your &quot; +&amp;#10;        currentEye +&amp;#10;        &quot; eye with your hand and identify the line on the chart that you can comfortably read.&quot;;&amp;#10;        screeningInstructionText = chartInstructions;&amp;#10;&amp;#10;        itemID = &quot;snellen_&quot; + currentEye;&amp;#10;        //what is the set ID&amp;#10;        setID = &quot;snellen_test&quot;;&amp;#10;        screeningSize = [snellenWidth, snellenHeight];&amp;#10;        screeningImage = &quot;stimuli/screening_images/snellen_numbered.png&quot;;&amp;#10;        continueRoutine = false&amp;#10;        break;&amp;#10;    }&amp;#10;    case 2: {&amp;#10;        currentEye = eyes[snellen_trials.thisN];&amp;#10;        chartInstructions = &quot;Make sure you are 14 inches away from the screen.\n\nWith no eyes covered, identify the line on the chart that you can comfortably read&quot;;&amp;#10;        screeningInstructionText = chartInstructions;&amp;#10;        &amp;#10;        itemID = &quot;snellen_&quot; + currentEye;&amp;#10;        //what is the set ID&amp;#10;        setID = &quot;snellen_test&quot;;&amp;#10;        screeningSize = [snellenWidth, snellenHeight];&amp;#10;        screeningImage = &quot;stimuli/screening_images/snellen_numbered.png&quot;;&amp;#10;        continueRoutine = false&amp;#10;        break;&amp;#10;    }&amp;#10;    case 3: {&amp;#10;        screeningInstructionText = &quot;Please reuse your tape measurer to ensure you are still sited 14 inches from the screen and try your best to not move.\n\nPress the button below to continue when ready.&quot;    &amp;#10;        chartInstructions           = &quot;Identify the line on the chart that you can comfortably read.&quot;&amp;#10;        itemID                          = &quot;pelli-robson_test&quot;&amp;#10;        //what is the set ID&amp;#10;        setID                           = &quot;pelli-robson_test&quot;&amp;#10;        screeningSize                   = [pelliWidth, pelliHeight]&amp;#10;        screeningImage                  = &quot;stimuli/screening_images/pelli_robson_numbered.jpg&quot;&amp;#10;        break;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;console.error({screeningInstructionText});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initiateSnellenInstructions_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="seatingInstructions">
      <KeyboardComponent name="seating_key_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="seating_key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="seatingInstructionsCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="seatingInstructionsText.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="seatingInstructionsCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="seatingInstructionsText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="seatingInstructionsText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This experiment must be completed 14 inches from the screen.&amp;#10;&amp;#10;At this time, please use a ruler to ensure you are positioned 14 inches away from the screen.&amp;#10;&amp;#10;Once you have measured, remain at this distance throughout the experiment.&amp;#10;&amp;#10;Press the space button to continue " valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="trouble_with_test">
      <TextboxComponent name="troubleFillBox">
        <Param val="center-left" valType="str" updates="constant" name="alignment"/>
        <Param val="center-left" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="30" valType="num" updates="constant" name="borderWidth"/>
        <Param val="-0.5373, -0.5608, -0.5608" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="editable"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="25" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="troubleFillBox" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="textboxPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="textboxSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <CodeComponent name="getTroubleText">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;//troubleFillBox.refresh()&amp;#10;&amp;#10;troubleWithTest.setAlignHoriz('left')&amp;#10;pressSpaceTrouble.setAlignHoriz('left')&amp;#10;&amp;#10;&amp;#10;// start Timer for question reaction time&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// get the text inside the text box&amp;#10;textInput = troubleFillBox._pixi.text;&amp;#10;textInput = textInput.trim();&amp;#10;&amp;#10;&amp;#10;anyCharacterTyped = (textInput.length &gt;= 1);&amp;#10;&amp;#10;currentTime = myClock.getTime();&amp;#10;twoSecondElapsed = currentTime-startTime &gt;=keyboardPauseDuration;&amp;#10;if (twoSecondElapsed===true){&amp;#10;    if (anyCharacterTyped) {&amp;#10;        var _pj;&amp;#10;        &amp;#10;        function _pj_snippets(container) {&amp;#10;            function in_es6(left, right) {&amp;#10;                if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;                    return (right.indexOf(left) &gt; (- 1));&amp;#10;                } else {&amp;#10;                    if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                        return right.has(left);&amp;#10;                    } else {&amp;#10;                        return (left in right);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            container[&quot;in_es6&quot;] = in_es6;&amp;#10;            return container;&amp;#10;        }&amp;#10;&amp;#10;        _pj = {};&amp;#10;        _pj_snippets(_pj);&amp;#10;        keys = psychoJS.eventManager.getKeys();&amp;#10;        console.log(keys);&amp;#10;            if (keys.length) {&amp;#10;                if (_pj.in_es6(&quot;return&quot;, keys)) {         &amp;#10;                    continueRoutine = false;            &amp;#10;                } else {&amp;#10;                        psychoJS.eventManager.clearEvents();&amp;#10;                    }&amp;#10;            }&amp;#10;    } else {&amp;#10;            psychoJS.eventManager.clearEvents(); &amp;#10;        }&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// get browser zoom&amp;#10;browserZoom = window.outerWidth*100 / window.innerWidth;&amp;#10;&amp;#10;// format date&amp;#10;registeryDate = util.MonotonicClock.getDateStr()&amp;#10;registeryDate = formatDateTime(registeryDate)&amp;#10;&amp;#10;// register data&amp;#10;data_setID.push(&quot;troubleWithTest&quot;); // type of the set (AI or Human)&amp;#10;data_itemID.push(&quot;troubleWithTest&quot;); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_blockName.push(&quot;troubleWithTest&quot;); // what is the name of this block &amp;#10;data_totalTrialIndex.push(&quot;troubleWithTest&quot;); // what is the trial number (total across all blocks)&amp;#10;&amp;#10;data_dateTime.push(registeryDate); // date and time &amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_articleSkipType.push([]) // which button did they press (next or popup link)&amp;#10;&amp;#10;data_passageRT.push([]); // words per minute&amp;#10;data_passageWPM.push([]); // words per minute&amp;#10;data_passageWordCount.push([]); &amp;#10;data_passageSpacing.push([]); // what was the spacing used in this passage&amp;#10;&amp;#10;&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;data_feedbackRating.push([]) // rating of the likert scale&amp;#10;&amp;#10;data_surveyRT.push(questionReactionTime); // time to respond to comprehension question&amp;#10;data_compChoice.push(textInput) // chosen option is registered as text&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="partAge = fill_textbox.text" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getTroubleText" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="troubleWithTest">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="troubleWithTest" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter,questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Did you encounter any issues or have any feedback you’d like to share about your experience completing the experiment?" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpaceTrouble">
        <Param val="$textColor" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$textFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpaceTrouble" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="&quot;Please press the ENTER to advance to the next page after you type in.&quot;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="teaching_links">
      <CodeComponent name="teachingScrolling">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="ydifference = (vsize - imagesize[1])/2&amp;#10;xdifference = (hsize - imagesize[0])/2&amp;#10;&amp;#10;// at first display, setup the article such that its borders &amp;#10;// meet screen's vertical size, then continue with the scrolled position&amp;#10;&amp;#10;imageY = ydifference;&amp;#10; " valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="document.body.style.zoom = &quot;100%&quot;;&amp;#10;&amp;#10;// register current Y position&amp;#10;oldY = teaching_example_image.pos[1];&amp;#10;// estimate change in Y&amp;#10;deltaY = (teaching_link_mouse.getWheelRel()[1]);&amp;#10;// add to image position&amp;#10;imageY = (oldY + deltaY);&amp;#10;&amp;#10;if (imageY != oldY) {&amp;#10;    // print coordinates and bounds for debugging&amp;#10;//    console.log('new y, y difference, condition :', imageY, ydifference, imageY&gt;=ydifference*2)&amp;#10;//    console.log('abs(newy-oldy), abs(ydiff*2), condition :', Math.abs(imageY-oldY), Math.abs(ydifference*3), (Math.abs(imageY - oldY) &lt; (Math.abs(ydifference*2))))&amp;#10;    // change img position if 1) it does not exceed the upper limit, 2) lower limit of image&amp;#10;    if ((imageY &gt;= ydifference*3) &amp;&amp; (Math.abs(imageY - ydifference) &lt;= (Math.abs(ydifference*4)))) {&amp;#10;        console.log('old y, new y: ',oldY,imageY)&amp;#10;        // change image position&amp;#10;        teaching_example_image.pos = [0, imageY];&amp;#10;        }  &amp;#10;}&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="teachingScrolling" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="teaching_link_mouse">
        <Param val="teachingLinksButton" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="teaching_link_mouse" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <ImageComponent name="teaching_example_image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/teaching_link.jpg" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="teaching_example_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,imageY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="[2560, 2020]" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="teachingLinksButton">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="teachingLinksButton" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="get_teaching_words">
      <CodeComponent name="storeTeachingWords">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="underlined_words = {}              &amp;#10;init_temp_list = {}" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log('current word from sheet ', thisTeaching_links_loop[&quot;text&quot;])&amp;#10;&amp;#10;// create backup for word list&amp;#10;init_temp_list = thisTeaching_links_loop&amp;#10;&amp;#10;wordN = wordN + 1&amp;#10;// initialize dictionary for underlined word positions&amp;#10;if (wordN === 1){    &amp;#10;    underlined_words = {}          &amp;#10;    }&amp;#10;// initialize the key for this word&amp;#10;underlined_words[thisTeaching_links_loop[&quot;text&quot;]] = {}&amp;#10;&amp;#10;// process coordinates for screen alignment of words etc.&amp;#10;underlined_words[thisTeaching_links_loop[&quot;text&quot;]] = convertToNumber(init_temp_list,[2560, 2020],vsize,y_scale)&amp;#10;&amp;#10;// print out for debugging&amp;#10;console.log('all underlined words: ', underlined_words)&amp;#10;console.log('current word ['+init_temp_list[&quot;text&quot;]+']', underlined_words[init_temp_list[&quot;text&quot;]])&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="storeTeachingWords" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="initialize"/>
    <Routine name="preCheckScreen"/>
    <LoopInitiator loopType="TrialHandler" name="set_file_check">
      <Param name="Selected rows" updates="None" val="0:7" valType="str"/>
      <Param name="conditions" updates="None" val="[{'setID': 'GRD12_SET0009', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000009a', 'pas2ID': 'RX000009b', 'pas3ID': 'RX000009c', 'pas4ID': 'RX000009d', 'pas1text': 'Between 13,000 and 12,600 years ago, members of the Clovis culture appeared in North America, where they made and used distinctive stone-tipped spears to hunt mammoth, bison and mastodon. Until recently, all that archeologists knew about the Clovis people came from studying their tools, which have been unearthed at wide-ranging sites across the country. Now, DNA analysis of a single human skeleton -that of a one-year-old boy buried', 'pas2text': 'in a rocky field in modern-day Montana has allowed scientists to link the Clovis culture to Native Americans throughout the Western Hemisphere. Construction crews first discovered the ancient remains of an infant in 1968 on private property owned by the Anzick family in western Montana. Dubbed Anzick-1, the one-year-old boy is the only human skeleton that has been identified as a member of the widespread, sophisticated Ice-Age', 'pas3text': 'culture known as Clovis. Now, a team of scientists has succeeded in mapping the infant’s DNA, in the oldest genome sequence of an American individual ever performed. According to their findings, published in the journal Nature in February 2014, the Clovis people are direct ancestors of many Native Americans now living in North America, and can be linked to many native peoples in Central and South America as well. Up to this point,', 'pas4text': 'all scientists studying the Clovis culture had to go on were the stone and bone tools that have been found at sites ranging from Washington State to Florida, along with many states in between. By sequencing the genome of the infant recovered at the Anzick site, the international team of researchers gained the most vivid insight yet about who these people might actually have been.', 'ques1ID': 'QX000009a', 'ques2ID': 'QX000009b', 'ques3ID': 'QX000009c', 'ques4ID': 'QX000009d', 'ques5ID': 'QX000009e', 'ques1text': 'What were the Clovis people known for?', 'ques2text': 'What did the discovery of Anzick-1 tell scientists about the Clovis people?', 'ques3text': 'How did scientists determine that the Clovis people are ancestors of Native Americans?', 'ques4text': 'Where were the stone and bone tools used by the Clovis culture found?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Their use of furs and skins from mammoth, bison, and mastodon; Their use of cloves in cooking and medicinal recipes; Their use of stone-tipped spears to hunt mammoth, bison, and mastodon; Their extensive skills at farming and gathering', 'ques2label': ' The Anzick family are direct descendants from the Clovis people.; The Clovis culture is linked to Native Americans.; The Clovis people were alive in 1968.; The Clovis people and Native Americans once lived together in Montana.', 'ques3label': 'By linking DNA from different Native American groups to each other; By comparing DNA from modern humans to that of the Clovis people; By unearthing similar tools used by both groups of people; By mapping the genome of an infant from Clovis descent', 'ques4label': 'In every state in the US; In Montana and Texas; In Florida and Washington state only; Across the country', 'ques5label': 'The DNA sequencing of Anzick-1 was the oldest genome sequence of an American individual ever performed.; Members of the Clovis culture appeared in North America 13,000-12,600 years ago. ; Construction crews found ancient infant remains in Montana.; DNA analysis has linked the Clovis culture to Native Americans through the body of a one-year-old boy found in Montana.', 'ques1correct': 3, 'ques2correct': 2, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000009a', 'feedback2ID': 'FQX000009b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0010', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000010a', 'pas2ID': 'RX000010b', 'pas3ID': 'RX000010c', 'pas4ID': 'RX000010d', 'pas1text': 'It was a light, spring Sunday in Brooklyn, New York. Doug and his wife, Eve, were enjoying it with their copy of the Sunday New York Times newspaper, which they would pleasingly read section by section over a hearty breakfast of eggs, bacon, and, of course, some warm and soft New York City bagels. Both Doug and Eve were hard working people, having to commute by subway throughout the week into different parts of their neighboring', 'pas2text': 'borough of Manhattan where both of their offices were located. Therefore, they usually took full advantage of their days off by lounging around their apartment, reading and watching television. This was especially true throughout the winter, when temperatures were too cold and the skies too cloudy in New York to make Doug and Eve leave their place if they did not absolutely have to. They could rest and recover from their long', 'pas3text': 'workweek indoors, away from the snow and chilly temperatures, just as well as they could outside, and probably even better so! However, this was the first clear and relatively warm day of the year that Doug and Eve could go outside and enjoy wholeheartedly, without having to bundle up and pile on layers of clothing. Eve became anxious as the morning neared a close and the afternoon came upon them. She desperately wanted to go', 'pas4text': 'outside exploring and snap photos with her brand-new digital camera, which she had bought just the day before. She was worried that Doug would not be up for such a trip and he would give the excuse that he was too tired. Eve was also hoping she could coax Doug into becoming a little more enthusiastic about photography himself, so they could plan fun photo excursions together.', 'ques1ID': 'QX000010a', 'ques2ID': 'QX000010b', 'ques3ID': 'QX000010c', 'ques4ID': 'QX000010d', 'ques5ID': 'QX000010e', 'ques1text': 'What do Doug and Eve do on Sundays?', 'ques2text': 'How do Doug and Eve usually take advantage of their days off?', 'ques3text': 'Why does Eve want to leave the apartment?', 'ques4text': 'Why is Eve worried that Doug would not want to go out with her?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Commute by subway to their offices; Work from home so they do not have to go outside; Go for long walks in the park; Read the Sunday New York Times and have a hearty breakfast', 'ques2label': ' By staying home and lounging in their apartment; By only leaving their place when it is warm outside; By leaving their place whenever they get the opportunity; By doing absolutely nothing', 'ques3label': 'She needs to pick up bagels for breakfast.; She does not like being home in the afternoon.; She wants to go out and play in the snow.; It is the first relatively warm day of the year.', 'ques4label': 'He is still reading the paper.; He is not finished with breakfast.; He does not like photography.; He may be too tired.', 'ques5label': 'Doug and Eve use their weekends to the fullest by always making sure to get out and enjoy nature.; Doug and Eve like to eat bagels and eggs on Sundays.; Doug and Eve work in Manhattan during the week.; Doug and Eve usually spend their weekends in, relaxing and enjoying a big breakfast on Sunday.', 'ques1correct': 4, 'ques2correct': 1, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000010a', 'feedback2ID': 'FQX000010b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0011', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000011a', 'pas2ID': 'RX000011b', 'pas3ID': 'RX000011c', 'pas4ID': 'RX000011d', 'pas1text': &quot;Two very famous American comedians have something very interesting in common with a former American president. Stephen Colbert and Conan O'Brien, who, as of 2013, are considered two of the funniest Americans, host their own late night talk shows and are among the funniest men in the country. They each also have ancestors who were Irish and both have publicly commented on their Irish pride. President John F. Kennedy was often&quot;, 'pas2text': 'recognized as the first Irish-Catholic man to be the president, and he remains the lone Catholic president in American history. However, not only do all three men have Irish roots, but each of their respective families also left their homeland for America during one of the most devastating eras in the history of the small island country of Ireland: The Great Famine. In the year 1845, the diets of one-third of the people of Ireland', 'pas3text': 'were entirely made up of potatoes. This illustrates the fact that Ireland was already a country that had greater than its fair share of poverty even before The Great Famine, which is often referred to as The Irish Potato Famine in countries outside of Ireland. When a disease often referred to as &quot;potato blight&quot; started to destroy potato crops, not only in Ireland, but also throughout Europe, the weight of worry quickly altered the', 'pas4text': &quot;Irish people's outlook. In 1845, roughly one-third of the potatoes grown in Ireland were lost and that was just the start. The next year, three-quarters of the crops were wiped out by the blight. The farming was so poor that year that in 1847 many pessimistic potato farmers did not even attempt to grow crops. 1848 saw one-third of the pre-famine average crop haul. And on-and-on it went.&quot;, 'ques1ID': 'QX000011a', 'ques2ID': 'QX000011b', 'ques3ID': 'QX000011c', 'ques4ID': 'QX000011d', 'ques5ID': 'QX000011e', 'ques1text': &quot;What do Stephen Colbert and Conan O'Brien have in common?&quot;, 'ques2text': 'What makes John F. Kennedy different from all other presidents?', 'ques3text': 'What was responsible for The Great Famine?', 'ques4text': 'What happened as the famine continued?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' They both host late night comedy shows.; They were both born in Ireland.; They are both Catholic.; They have both been president of the United States.', 'ques2label': ' His favorite comedian was Stephen Colbert.; He was the first Catholic president.; He was the only president with Irish heritage.; He was the only one who liked potatoes.', 'ques3label': 'People in Europe ate too many potatoes.; A Catholic took over Ireland.; People in Ireland ate too many potatoes.; A disease named &quot;potato blight.&quot;', 'ques4label': 'The crops stayed at about 75% loss each year of the famine.; The crops fared better and better each year of the famine.; The Irish people began to plant other crops besides potatoes.; The crops fared worse and worse each year of the famine.', 'ques5label': 'President John F. Kennedy was the first Irish-Catholic president of the United States.; The Irish Potato Famine was caused by a disease that attacked potato crops.; Diets in Ireland consisted of mostly potatoes.; The families of several famous Americans with Irish roots left Ireland because of The Great Famine.', 'ques1correct': 1, 'ques2correct': 2, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000011a', 'feedback2ID': 'FQX000011b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0012', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000012a', 'pas2ID': 'RX000012b', 'pas3ID': 'RX000012c', 'pas4ID': 'RX000012d', 'pas1text': &quot;Water makes up nearly three-quarters of the Earth's surface, but it does more than just cover our planet - it also plays a vital role in shaping it. Consider the Grand Canyon. Measuring 277 miles long, 18 miles wide and more than 1 mile deep, it is considered one of the Seven Natural Wonders of the World and attracts more than 5 million visitors per year. This geological marvel was created by the waters of the Colorado River through&quot;, 'pas2text': 'the processes of weathering and erosion. Weathering is the process by which moving water breaks down soil, rock and minerals, and erosion is the process by which the flowing water transports soil and rock from one spot and deposits it elsewhere. The two processes often occur in conjunction. Weathering and erosion are very slow processes. Geologists believe the Colorado River has been flowing through the Grand Canyon for at least 17', 'pas3text': 'million years, and it has been gradually shaping the canyon this entire time. The flowing water of the river and its tributaries has carved away at the rock of the Colorado Plateau, creating the sight we are familiar with today. Caves and caverns are another example of weathering and erosion. Limestone caves, such as the Carlsbad Caverns in New Mexico, are formed when rainwater mixes with carbon dioxide in the ground and wears away', 'pas4text': &quot;at the limestone. Sea caves, which can be found along coastlines, are formed when powerful waves crash against the shore and break away chunks of rock. Ice caves are formed when glaciers melt, and the ice melt flows across the ground as a stream. You don't have to travel very far to see the effects of weathering and erosion for yourself, though.&quot;, 'ques1ID': 'QX000012a', 'ques2ID': 'QX000012b', 'ques3ID': 'QX000012c', 'ques4ID': 'QX000012d', 'ques5ID': 'QX000012e', 'ques1text': 'How long is the Grand Canyon?', 'ques2text': 'Which best explains the relationship between weathering and erosion?', 'ques3text': 'How are caves and caverns formed?', 'ques4text': 'What can happen when glaciers melt?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' 18 miles; 5 million miles; 277 miles; 7 miles', 'ques2label': ' Weathering and erosion happen at the same time.; Erosion happens before weathering.; Weathering only happens if erosion does not happen.; Weathering happens before erosion.', 'ques3label': 'By heavy rainfall; By the Colorado Plateau; By carbon dioxide; By weathering and erosion', 'ques4label': 'Rock caves form.; Sea caves form.; Powerful waves form.; Ice caves form.', 'ques5label': 'The Grand Canyon is considered one of the Seven Natural Wonders of the World.; The Carlsbad Caverns in New Mexico are made out of limestone.; When glaciers melt, ice caves are formed.; Weathering and erosion work together to break down and reform parts of the Earth.', 'ques1correct': 3, 'ques2correct': 1, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000012a', 'feedback2ID': 'FQX000012b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0013', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000013a', 'pas2ID': 'RX000013b', 'pas3ID': 'RX000013c', 'pas4ID': 'RX000013d', 'pas1text': 'You are most basically a blend of your biological parents. Your genetic material is a combination of their genetic material. A human typically has 46 chromosomes that contain his or her DNA, commonly referred to as genes. 23 chromosomes are provided by the maternal egg and 23 chromosomes are provided by the paternal sperm. Whether fertilization &quot;the combining of an egg and a sperm cell&quot; happens naturally or in a laboratory setting,', 'pas2text': 'the egg and sperm must be added together. Only once the egg is fertilized, with a complete set of genetic material, will it begin to divide and grow into an unborn fetus. This combination of two incomplete sets of genetic materials accounts for trait variation and change (or evolution) across a sexually reproducing population. Charles Darwin, an English naturalist who lived and studied during the 19th century, was among the first', 'pas3text': &quot;scientists to observe and identify this phenomenon. For Darwin, his observations were ultimately clarified on a globe-spanning voyage aboard the HMS (Her Majesty's Ship) Beagle. It was captain Robert Fitzroy who brought Darwin on board for what was, in fact, the second voyage of the Beagle (from December 27, 1831 to October 2, 1836). The Beagle's mission was to survey the coastlines of South America, in order to render more accurate&quot;, 'pas4text': &quot;charts and maps. Darwin took advantage of these trips to explore the South American inland, and catalogue the various flora and fauna (plant and animal life) and various geological conditions. The Beagle's visit to the Galapagos Islands proved to be the most important for Darwin's studies. It was on the various Galapagos Islands that Darwin first noted what are now classically referred to as Darwin's finches.&quot;, 'ques1ID': 'QX000013a', 'ques2ID': 'QX000013b', 'ques3ID': 'QX000013c', 'ques4ID': 'QX000013d', 'ques5ID': 'QX000013e', 'ques1text': 'Where do the 46 chromosomes from a human come from?', 'ques2text': 'How does trait variation occur across a population?', 'ques3text': 'What ship did Darwin board?', 'ques4text': 'Where did Darwin classify flora and fauna?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' 23 chromosomes come from their mother and 23 chromosomes are from their father.; 23 chromosomes are formed before an egg is fertilized, and 23 are formed after.; Scientists are unsure how a human gets all 46 chromosomes.; All 46 chromosomes come from the biological mother.', 'ques2label': &quot; A mother's chromosomes are responsible for trait variation.; Trait variation occurs entirely by chance within a population.; The division of genetic material causes trait variation.; The combination of two incomplete sets of genetic materials allows for trait variation.&quot;, 'ques3label': &quot;The Her Majesty's Ship; The South America; The Robert Fitzroy; The HMS Beagle&quot;, 'ques4label': 'The United States; The HMS Beagle; England; The Galapagos Islands', 'ques5label': &quot;Humans are made up of 46 chromosomes from two sets of 23.; Darwin lived and studied during the 19th century.; The HMS Beagle sailed along the coast of South America in the 1800's.; Darwin was one of the first scientists to observe how trait variation and evolution occurs.&quot;, 'ques1correct': 1, 'ques2correct': 4, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000013a', 'feedback2ID': 'FQX000013b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0014', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000014a', 'pas2ID': 'RX000014b', 'pas3ID': 'RX000014c', 'pas4ID': 'RX000014d', 'pas1text': &quot;When two organisms create a third organism through reproduction, a number of variables come into play. It's a sort of complex lottery in which the third organism'the offspring of the first two inherits a combination of the parent organisms' genetic material. The possible variations inherent in recombining the parents' DNA are very, very broad and infinitely larger than the pool of entries in the state lotto jackpot! That's why we&quot;, 'pas2text': &quot;get so much variation even within the population of a particular sexually reproducing species. Each new organism receives two of each chromosome, and within those chromosomes, two versions of each parents' set of genes. These genes contain instructions for protein production within the body of the offspring, and the way those proteins are prescribed determines the traits of the offspring. So, although your unique collection of&quot;, 'pas3text': &quot;traits, the combination of characteristics, physical and otherwise, that make you uniquely yourself are originally the product of chance, there are machinations going on behind the scenes to which every freckle, hair and character trait can be traced. Personality traits are another story altogether. When we think about how our personalities are formed, we can certainly think about genes we acquired from our parents' but we also have&quot;, 'pas4text': &quot;to think about other complexly intertwined factors like environment and upbringing. For now, we'll simplify things by just focusing on the physical aspect of inherited traits. For example, if both parents exhibit the trait of red hair, their offspring have a greater chance of acquiring the genes that code for red hair. Certain traits are characteristically dominant or recessive, depending on the makeup of their alleles.&quot;, 'ques1ID': 'QX000014a', 'ques2ID': 'QX000014b', 'ques3ID': 'QX000014c', 'ques4ID': 'QX000014d', 'ques5ID': 'QX000014e', 'ques1text': 'What does an offspring inherit from its parents?', 'ques2text': 'What do genes contain?', 'ques3text': 'How do personality traits differ from physical traits?', 'ques4text': 'What increases the chance of offspring having a particular physical trait?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Only genetic material from one parent; A combination of their genetic material; The state lottery; The gender that they will be', 'ques2label': ' Two different versions of chromosomes; Two chromosomes; Instructions for protein production; Instructions for carbohydrate production', 'ques3label': 'Personality traits are not connected to genetic material at all.; Physical traits are more important than personality traits.; Personality traits are completely disconnected from parental genes.; Physical traits can be traced back because of machinations that take place.', 'ques4label': 'When only one of their parents have the particular physical trait; When genetic material has been altered to increase the availability of the particular trait; When neither parent has the particular physical trait; When both parents have the particular physical trait', 'ques5label': &quot;Personality traits have a genetic component but are widely a product of an offspring's environment.; There is very little genetic variation possible during reproduction from two parents.; If both parents have a specific physical trait, their offspring is guaranteed to inherit that trait.; When two parents reproduce, their offspring receives genetic material through chromosomes from each parent.&quot;, 'ques1correct': 2, 'ques2correct': 3, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000014a', 'feedback2ID': 'FQX000014b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0015', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000015a', 'pas2ID': 'RX000015b', 'pas3ID': 'RX000015c', 'pas4ID': 'RX000015d', 'pas1text': 'Sergei Bobunets, lead singer of a Russian rock band, had just stepped outside when the sky fell apart. I looked up, and suddenly the sky lit up with a bright light, and something that looked like the sun fell, Bobunets said, trying to make sense of one of the most powerful events on Earth: a meteor strike. Bobunets was standing 125 miles north of Chelyabinsk, a city in Russia which on February 15, 2013, witnessed perhaps the', 'pas2text': 'best-documented meteor fall in human history. Eyewitnesses recorded the fireball with their phones and digital cameras. A European weather satellite took a photo of the meteor as it streaked through the atmosphere, and a Chinese satellite captured the meteor\'s vapor plume. Thousands of people saw the flash of light and felt the shock wave after the meteor crashed into Earth. &quot;I looked out the window and saw a huge line of smoke,', 'pas3text': 'like you get from a plane, but many times bigger,&quot; Sergei Serskov, an office worker in Chelyabinsk, told the BBC. &quot;A few minutes later the window suddenly came open, and there was a huge explosion, followed by lots of little explosions. It felt like a war zone.&quot; The meteor was not very big. It was about 57 feet long, a little longer than a normal city bus. But it was super dense, weighing about 11,000 tons more than the Eiffel', 'pas4text': 'Tower. And it was moving extremely fast. Scientists estimated its speed at 41,000 miles per hour, or about 50 times the speed of sound. Its tremendous speed was the main factor in its enormous destructive power. When the meteor exploded 14 miles above the Earth it released a bright flash of light, a powerful heat wave, and a shock wave with roughly 20 to 30 times more energy than the atomic bomb detonated at Hiroshima.', 'ques1ID': 'QX000015a', 'ques2ID': 'QX000015b', 'ques3ID': 'QX000015c', 'ques4ID': 'QX000015d', 'ques5ID': 'QX000015e', 'ques1text': 'Where was Bobunets during the meteor strike?', 'ques2text': 'What did the meteor strike cause?', 'ques3text': 'How long was the meteor?', 'ques4text': 'When did the meteor explode?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' China; Russia; Chelyabinsk; Sergei', 'ques2label': ' A weather satellite was destroyed.; It caused a vapor plume and shock wave.; Many people died as a result.; People began to build bunkers for protection.', 'ques3label': '110 feet long; 570 feet long; 11,000 feet long; 57 feet long', 'ques4label': 'When it detonated in space; When it was shot out of the sky; When it hit Earth after falling from space; When it was 14 miles above the Earth', 'ques5label': 'A Russian rock musician witnessed a meteor strike in 2013.; A meteor strike in 2013 took many people by surprise.; A meteor strike can cause many explosions and is considered very dangerous.; In 2013, a meteor strike lit up the sky over Russia and China before crashing into Earth.', 'ques1correct': 2, 'ques2correct': 2, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000015a', 'feedback2ID': 'FQX000015b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0016', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000016a', 'pas2ID': 'RX000016b', 'pas3ID': 'RX000016c', 'pas4ID': 'RX000016d', 'pas1text': 'There is nothing puzzling about the puzzlement, but why should the mysterious arrival of beings from a floating island require the women of the story to prepare houses for them, as is their custom when new guests arrive? For the Innu, as for most eastern Native Americans, a vast range of persons comprised the universe, and only a small minority were humans like us; most were what anthropologists call other-than-human persons.', 'pas2text': 'These included such elemental forces as the sun, the rain, the four winds, and the earth itself, along with animals, plants, streams, mountains, and any number of other actors. Such persons could affect humans lives in a variety of visible and invisible ways. The results could be good or ill, or, better put, either advantageous or disadvantageous not so much because other-than-human persons were inherently good or evil but simply', 'pas3text': 'because they were persons who had their own purposes and who might or might not find themselves obligated to work with others. Thus the sun might either encourage other-than-human food plants to grow, or burn them out. Those plants in turn might bear fruit that human persons could eat, or refuse to do so. Similarly, deer and other animals might voluntarily give themselves up to be eaten, or make themselves scarce. Blurring the line', 'pas4text': &quot;between such clearly other-than-human persons and human persons were, in endless cultural variety, gods with complicated personalities, ancestral progenitors who descended from the sky or emerged from the earth, and culture heroes or trickster figures who might intervene in history at any time. Another kind of blurring involved persons whose languages, customs, or behavior differed markedly from one's own.&quot;, 'ques1ID': 'QX000016a', 'ques2ID': 'QX000016b', 'ques3ID': 'QX000016c', 'ques4ID': 'QX000016d', 'ques5ID': 'QX000016e', 'ques1text': 'What did the Innu consider &quot;persons&quot;?', 'ques2text': &quot;How did persons affect humans' lives?&quot;, 'ques3text': 'How did the sun impact a humans life?', 'ques4text': 'What else impacted human lives besides animals and natural forces?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Humans and spiritual beings; Animals who have human features; humans and &quot;other- than- human persons&quot;; Only humans', 'ques2label': &quot; In good or bad ways; in bad ways only; in good ways only; they did not affect humans' lives&quot;, 'ques3label': 'By making it rain or snow; By burning humans or letting them stay cool; By deciding to shine or not shine; By encouraging plants to grow or not grow', 'ques4label': 'Their food; Their dwellings; other humans; Gods', 'ques5label': 'The Innu people believed that they could control the natural forces and persons that surrounded them.; The Innu people believed that animals had more impact on their lives than other humans.; The Innu people recognized humans and animals as persons, and respected their impact on their lives.; The Innu people belived that persons also consisted of &quot;other-than-human persons&quot; such as natural forces and animals, which impacted their lives.', 'ques1correct': 3, 'ques2correct': 1, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000016a', 'feedback2ID': 'FQX000016b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0017', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000017a', 'pas2ID': 'RX000017b', 'pas3ID': 'RX000017c', 'pas4ID': 'RX000017d', 'pas1text': 'If you think planting false memories only happens in the movies, think again. False memories happen all the time in humans we frequently misremember how, when, and why certain things happened. We misremember small details, but also major events. Often we misremember things that happened only recently. Now scientists are on the path to finding a better means of understanding why false memories happen to people, by learning how to', 'pas2text': 'plant them in the first place. According to James Gorman in an article in the New York Times in 2013, researchers are already able in experiments to convince humans to remember certain words and images inaccurately. A recent study by scientists at the Massachusetts Institute of Technology (MIT) took this process a step further by planting entirely false memories in mice. Though mice and humans are very different creatures, their', 'pas3text': 'memory formation processes are similar. Studying the memories of mice has helped researchers understand exactly what goes on in the brain during the formation of fake memories. A team of scientists at MIT, who published their findings in the journal Science, found that mice could be convinced of having been shocked in a certain location when they had not in fact been shocked there. The scientists first allowed a group of mice to', 'pas4text': 'become comfortable in a certain area without being shocked. They then introduced the mice to a second area where they received shocks, while stimulating the parts of their brains that had become activated while exploring the first area in peace. Next they put the mice back in the original area. The mice froze in fear of being shocked, though they had no actual memory of being shocked there.', 'ques1ID': 'QX000017a', 'ques2ID': 'QX000017b', 'ques3ID': 'QX000017c', 'ques4ID': 'QX000017d', 'ques5ID': 'QX000017e', 'ques1text': 'What do people misremember?', 'ques2text': 'How have some researchers studied memories?', 'ques3text': 'What were scientists able to convince mice of?', 'ques4text': 'What did the scientists do to the mice to implant false memories?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Only small and inconsequential details; Small details and major events; False memories and movies; Only major and important events', 'ques2label': ' By helping people to remember words and images; By studying mice who have good memories; By researching people who have bad memories; By convincing people to misremember words and images', 'ques3label': 'The mice would be shocked in the future when they would never be shocked.; The mice had never been shocked when they were actually shocked repeatedly.; The mice had not been shocked somewhere that they had actually been shocked.; The mice had been shocked somewhere that they had actually not been shocked.', 'ques4label': 'The scientists took away their water.; The scientists showed them a video.; The scientists witheld food.; The scientists stimulated their brains.', 'ques5label': 'Mice have extraordinary memories and rarely misremember events.; Only some people experience false memories around small details in their lives.; Most people misremember only major events that happened a while ago.; Scientists are studying why false memories are so common in humans and mice.', 'ques1correct': 2, 'ques2correct': 4, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000017a', 'feedback2ID': 'FQX000017b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0018', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000018a', 'pas2ID': 'RX000018b', 'pas3ID': 'RX000018c', 'pas4ID': 'RX000018d', 'pas1text': &quot;Born in Litchfield, Connecticut, Harriet Beecher was the seventh child of the Reverend Lyman Beecher, a Congregational minister and moral reformer, and Roxanna Foote Beecher. She was schooled at the Pierce Academy and at her sister Catharine Beecher's Hartford Female Seminary, where she also taught. She moved with the family to Cincinnati in 1832, when her father was appointed president of Lane Theological Seminary. The spectacle of&quot;, 'pas2text': &quot;chattel slavery across the Ohio River in Kentucky and its effects on the acquiescent commercial interests of white Cincinnati moved her deeply. In 1836, she married Calvin Ellis Stowe, professor of biblical literature at Lane. The death of a son in 1849 led her away from her father's Calvinism and gave supremacy in her views to the redemptive spirit of Christian love. By 1850, the family had moved to Maine, where, in response to the&quot;, 'pas3text': &quot;Fugitive Slave Act of that year, Stowe wrote Uncle Tom's Cabin (1852), her most celebrated work. Sentimental and realistic by turns, the novel explored the cruelties of chattel slavery in the Upper and Lower South and exposed the moral ironies in the legal, religious, and social arguments of white apologists. The immense impact of the novel (it sold 300,000 copies in its first year) was unexpected. Antislavery fiction had never sold&quot;, 'pas4text': &quot;well; Stowe was not an established writer, and few would have expected a woman to gain a popular hearing on the great political question of the day. Some female abolitionists had shocked decorum in the 1840s by speaking at public gatherings, but they were widely resented. The success of Uncle Tom's Cabin went far toward legitimizing, if not indeed creating, a role for women in public affairs.&quot;, 'ques1ID': 'QX000018a', 'ques2ID': 'QX000018b', 'ques3ID': 'QX000018c', 'ques4ID': 'QX000018d', 'ques5ID': 'QX000018e', 'ques1text': 'Why did Harriet Beecher move to Cincinnati?', 'ques2text': 'What did Harriet turn away from in 1849?', 'ques3text': &quot;What was Uncle Tom's Cabin about?&quot;, 'ques4text': &quot;How did Uncle Tom's Cabin impact the role of women?&quot;, 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Her father was appointed president of Lane Theological Seminary.; She no longer wanted to live in Connecticut.; She was going to attend Hartford Female Seminary.; Her family was going through a separation.', 'ques2label': &quot; Her husband Calvin; Chattel slavery; Her father's Calvinism; Biblical literature&quot;, 'ques3label': &quot;The death of her Harriet's son; Life in Maine; The Fugitive Slave Act; The cruelties of slavery in the South&quot;, 'ques4label': 'After it was published, women were given more speaking roles at public gatherings.; Women were suddenly considered good writers by much of society.; Women were subsequently banned from writing novels.; The success of the book helped legitimize women in public affairs.', 'ques5label': &quot;Reverend Lyman Beecher was named the president of Lane Theological Seminary in 1832.; The death of her son in 1849 led Harriet Beecher Stowe to write Uncle Tom's Cabin.; In 1836, Harriet Beecher Stowe married Calvin Ellis Stowe, a professor at Lane Theological Seminary.; After moving to Ohio, Harriet Beecher Stowe was exposed to slavery, which moved her deeply.&quot;, 'ques1correct': 1, 'ques2correct': 3, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000018a', 'feedback2ID': 'FQX000018b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0027', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000027a', 'pas2ID': 'RX000027b', 'pas3ID': 'RX000027c', 'pas4ID': 'RX000027d', 'pas1text': 'Settlement house founder and peace activist Jane Addams (1860-1935) was one of the most distinguished of the first generation of college-educated women, rejecting marriage and motherhood in favor of a lifetime commitment to the poor and social reform. Inspired by English reformers who intentionally resided in lower-class slums, Addams, along with a college friend, Ellen Starr, moved in 1889 into an old mansion in an immigrant', 'pas2text': &quot;neighborhood of Chicago. Hull-House, which remained Addams's home for the rest of her life and became the center of an experiment in philanthropy, political action, and social science research, was a model for settlement work among the poor. Addams responded to the needs of the community by establishing a nursery, dispensary, kindergarten, playground, gymnasium, and cooperative housing for young working women. As an experiment in&quot;, 'pas3text': &quot;group living, Hull-House attracted male and female reformers dedicated to social service. Addams always insisted that she learned as much from the neighborhood's residents as she taught them. Having quickly found that the needs of the neighborhood could not be met unless city and state laws were reformed, Addams challenged both boss rule in the immigrant neighborhood of Hull-House and indifference to the needs of the poor in the&quot;, 'pas4text': &quot;state legislature. She and other Hull-House residents sponsored legislation to abolish child labor, establish juvenile courts, limit the hours of working women, recognize labor unions, make school attendance compulsory, and ensure safe working conditions in factories. The Progressive party adopted many of these reforms as part of its platform in 1912. At the party's national convention, Addams seconded the nomination of Theodore&quot;, 'ques1ID': 'QX000027a', 'ques2ID': 'QX000027b', 'ques3ID': 'QX000027c', 'ques4ID': 'QX000027d', 'ques5ID': 'QX000027e', 'ques1text': 'Which best describes Jane Addams?', 'ques2text': &quot;How did Addams respond to the community's needs at Hull-House?&quot;, 'ques3text': 'What did Addams insist on?', 'ques4text': 'What type of legislation did Addams support?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Committed to the poor and social reform; Committed to education and learning; Committed to marriage and motherhood; Comitted to nursing and health', 'ques2label': ' She provided education for young men.; She provided experimental treatments for the sick.; She provided nursing for the elderly.; She provided services for young working women.', 'ques3label': 'That the residents of Hull-House obey her in all ways; That the reformers submit to the boss rule in the immigrant neighborhoods where they worked; That everyone always obey the city and state laws as they were written; That she learned just as much from the residents of Hull-House as she taught them', 'ques4label': 'Legislation that required housing to be built for the homeless in Chicago; Legislation that required juvenile males be treated as adults in the court system; Legislation that made it illegal for women to work; Legislation that improved the lives of children and working women', 'ques5label': &quot;Jane Addams made history by being one of the first women to go to college.; Jane Addams did not believe in getting married or having children and advocated against it.; Jane Addams lived with reformers in a group home.; Jane Addams was a committed advocate for women's and children's rights through her work at Hull-House in Chicago.&quot;, 'ques1correct': 1, 'ques2correct': 4, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000027a', 'feedback2ID': 'FQX000027b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0028', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000028a', 'pas2ID': 'RX000028b', 'pas3ID': 'RX000028c', 'pas4ID': 'RX000028d', 'pas1text': 'Ibrahima Sillah arrived in Italy three years ago on a rickety boat. He says he is illiterate and speaks virtually no Italian. A farmer back home in Gambia, Mr. Sillah has only occasionally managed to find work picking fruit, for less than 3 euros ($3.54) an hour, despite having a work permit. He lives in a tent city behind a Rome train station. &quot;I can\'t do anything without a job,&quot; said Mr. Sillah, 30 years old. &quot;It\'s too important.&quot;', 'pas2text': 'Italy is facing a daunting challenge integrating refugees, even as the pace of seaborne arrivals on its shores shows signs of slowing. Since 2012, 150,000 people have won refugee status in Italy, and another 155,000 applications are pending. Other European countries, such as Germany and Sweden, are wrestling with the same task. But Italy is doing so with a chronically weak economy, high unemployment and a state bureaucracy that', 'pas3text': 'often fails to provide a social safety net even for native-born Italians. And many refugees lack marketable skills, officials and aid groups say. &quot;It is a challenge that makes your hands shake,&quot; said Domenico Manzione, an undersecretary at Italy\'s Interior Ministry who is in charge of immigration. The Italian government approved the country\'s first-ever plan for integrating refugees in late September. The plan sets out general', 'pas4text': &quot;priorities such as providing Italian lessons, work training and housing to people who obtain the right to live and work in the country, but doesn't spell out how Italy will achieve the goals. Italy has so far concentrated largely on providing emergency food, shelter and basic support to new arrivals, with nongovernmental organizations and especially the church in the front line.&quot;, 'ques1ID': 'QX000028a', 'ques2ID': 'QX000028b', 'ques3ID': 'QX000028c', 'ques4ID': 'QX000028d', 'ques5ID': 'QX000028e', 'ques1text': 'What problem does Sillah face?', 'ques2text': 'How does Italy differ from Germany and Sweden?', 'ques3text': 'What is one challenge refugees in Italy face?', 'ques4text': 'How have nongovernmental oranizations helped refugees in Italy?', 'ques5text': 'What is the main idea of the text?', 'ques1label': &quot; Officials in Italy do not want him there.; He can't find a passage to get to Italy. ; He does not have a work permit.; He has been unable to find reliable work in Italy.&quot;, 'ques2label': ' Germany and Sweden are more welcoming to refugees than Italy is.; More people are trying to escape to Italy than Germany and Sweden.; Italy is dealing with a weak economy and high unemployment rates.; Italy is willing to help refugees while Germany and Sweden are not.', 'ques3label': &quot;Being unable to work at all; Many Italians don't want them there; Italians have no plan for how to help them; Not having marketable skills&quot;, 'ques4label': 'By providing Italian lessons; By providing work training; By helping them get work permits; By providing food and shelter', 'ques5label': 'Italy is leading Europe in strategies to support refugees.; Italy has a poor economy and high unemployment.; Many native Italians are unsupportive of refugees.; Italy is strugging to figure out how to help its refugees.', 'ques1correct': 4, 'ques2correct': 3, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000028a', 'feedback2ID': 'FQX000028b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0029', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000029a', 'pas2ID': 'RX000029b', 'pas3ID': 'RX000029c', 'pas4ID': 'RX000029d', 'pas1text': 'George Washington had been dead nearly half a century when prominent American sculptor Hiram Powers (1805 - 1873) fashioned this portrait bust. Numerous earlier images of Washington as military hero, president, patriarch, and demi-god had already been widely disseminated in America and abroad. Powers struggled with how to characterize the first president. He ultimately decided upon an ideal portrait in white marble, and imbued', 'pas2text': 'Washington with the Roman Republican virtues of restraint and rationality by depicting him unadorned and dressed in classical drapery (which, of course, the real Washington never wore). The actual likeness was based on the bust created by the French sculptor Jean-Antoine Houdon (French, 1741-1828) whom Washington had posed for in his home at Mt. Vernon in 1785. Realism is evident in the aging features, slack jaw line, and ponytail.', 'pas3text': &quot;Encouraged by a growing list of patrons and government commissions, Powers moved to Florence, Italy, in 1837, where he joined a circle of international sculptors who were capitalizing on the tourist trade. He modeled Washington as a creative experiment and happily soon after began receiving orders for marble replicas. The Philadelphia Museum of Art's bust is undated and could have been carved over a twenty-year period when the&quot;, 'pas4text': &quot;demand was so great that Powers found it necessary to employ Italian stonecutters to rough in the form so he could finesse the features. The Museum's bust may be have been exhibited at the 1864 Great Central Fair in Philadelphia, further popularizing this prototype and resulting in a proliferation of replicas of all sizes and media into the twentieth century. In the aftermath of the Woodstock, Vermont famine of 1816, the Powers family abandoned their farm to try their luck in Cincinnati, Ohio. Shortly after arriving, fifteen-year-old Hiram made the bold move to find his own means of support.&quot;, 'ques1ID': 'QX000029a', 'ques2ID': 'QX000029b', 'ques3ID': 'QX000029c', 'ques4ID': 'QX000029d', 'ques5ID': 'QX000029e', 'ques1text': 'What did Hiram Powers struggle with?', 'ques2text': 'What did Powers base his portrait bust of George Washington on?', 'ques3text': &quot;How did the bust of Washington impact Powers's career?&quot;, 'ques4text': 'How did Italian stonecutters assist Powers?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Finding any earlier images of Washington; Getting Washington to agree to letting him make his bust; How to characterize Washington; Whether he should make a portrait or a painting', 'ques2label': &quot; A portrait of Washington done fifty years earlier; Verbal accounts of the president's features; A different bust of Washington by Jean-Antoine Houdon; A photograph taken two decades earlier&quot;, 'ques3label': 'Powers was asked to begin painting instead of sculpting.; The Philadelphia Museum of Art named him the best sculptor of the 19th century.; The bust was largely seen as a failure, and he did not receive any more commissions.; He began to receive commissions and requests for replicas of his Washington bust.', 'ques4label': &quot;They finished the details on the replicas after Powers did most of the cutting.; They sourced the marble for him so he could just focus on sculpting.; They created complete replicas of Powers's busts so he didn't have to.; They began the busts for him by pre-cutting the marble pieces he was using.&quot;, 'ques5label': &quot;Hiram Powers became a disgraced sculptor after his bust of George Washington was deeply criticized.; Jean-Antoine Houdon is largely considered a more successful sculptor than Hiram Powers,; George Washington sat for his bust by Hiram Powers in 1785 at Mt. Vernon.; Hiram Powers created a bust of George Washington, fifty years after his death, based on another sculptor's bust.&quot;, 'ques1correct': 3, 'ques2correct': 3, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000029a', 'feedback2ID': 'FQX000029b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0030', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000030a', 'pas2ID': 'RX000030b', 'pas3ID': 'RX000030c', 'pas4ID': 'RX000030d', 'pas1text': 'India is going up against China in a new Asian space race, trying to tighten its control of regional skies and alliances by leveraging its ability to send satellites into orbit inexpensively. In recent rounds of space diplomacy, China offered to build telecommunications satellites for Sri Lanka, Afghanistan and Nepal. In May, India went a step further, launching its &quot;South Asia Satellite,&quot; which those three countries can use at no', 'pas2text': &quot;cost. At stake in the contest is regional leadership, as India has the opportunity to be the power that helps its neighbors develop their own space ambitions, steering them away from Beijing's influence. Next year, India plans to activate its version of the Global Positioning System, which it has also offered to share with its neighbors. Meanwhile, China is expanding a rival fleet of navigation satellites that will be more than four&quot;, 'pas3text': 'times the size of India\'s to cover the countries along its &quot;One Belt, One Road&quot; infrastructure corridors by 2018. Last year, India started construction on a satellite ground station in Vietnam, to complement others in Brunei, Indonesia, and Mauritius. State media said the facility could be employed for military purposes to monitor the South China Sea. In the next five years, India plans to spend more than $6 billion on its space', 'pas4text': &quot;program and send 25 rockets into space, three times the budget and number of rockets as a decade ago. China sent almost the same number of rockets into space last year alone and doesn't disclose its space budget. The U.S. space budget of almost $40 billion a year is more than six times China's assumed budget, according to the most-recent figures from the Organization for Economic Cooperation and Development.&quot;, 'ques1ID': 'QX000030a', 'ques2ID': 'QX000030b', 'ques3ID': 'QX000030c', 'ques4ID': 'QX000030d', 'ques5ID': 'QX000030e', 'ques1text': 'What are China and India competing over?', 'ques2text': 'What does India plan to do with its new satellites?', 'ques3text': 'Where has India built satellites?', 'ques4text': 'How much more does the U.S. spend on its space program than China?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Extra land in Asia they both hope to claim; Who will provide satellites for Afghanistan; Who will be the first nation to launch a rocket into space; Who will provide satellites for Afghanistan', 'ques2label': ' Compete with the U.S.; Share them with its neighbors; Sell them to China; Block its neighbors from using it', 'ques3label': 'Korea; Afghanistan; China; Indonesia', 'ques4label': 'Thirty times more; Twenty-five times more; Forty times more; Six times more', 'ques5label': 'India is creating a new Global Positioning System to share with its neighbors.; The U.S. spends about $40 billion a year on their space budget.; China is winning the Asian space race because of its willingness to work with more neighbors than India.; China and India are competing in a new Asian space race and providing new technologies to their neighbors.', 'ques1correct': 2, 'ques2correct': 2, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000030a', 'feedback2ID': 'FQX000030b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0031', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000031a', 'pas2ID': 'RX000031b', 'pas3ID': 'RX000031c', 'pas4ID': 'RX000031d', 'pas1text': 'Cultural anthropologist and writer Margaret Mead (1901-1978) was born in Philadelphia and graduated from Barnard College in 1923. Appointed assistant curator of ethnology at the American Museum of Natural History in 1926, she embarked on two dozen trips to the South Pacific to study primitive cultures. In her resulting books such as Coming of Age in Samoa (1928), Mead formulated her ideas about the powerful effects of social', 'pas2text': 'convention on behavior. Named a professor of anthropology at Columbia University in 1954, Mead continued to advocate for the relaxation of traditional gender and sexual conventions through her lecturing and writing. Mead, who turned the study of primitive cultures into a vehicle for criticizing her own, was born in Philadelphia. Both her father, Edward Mead, an economist at the Wharton School, and her mother, Emily Mead, a', 'pas3text': 'sociologist of immigrant family life and a feminist, were devoted to intellectual achievement and democratic ideals. Mead discovered her calling as an undergraduate at Barnard College in the early 1920s in classes with Franz Boas, the patriarch of American anthropology, and in discussions with his assistant, Ruth Benedict. The study of primitive cultures, she learned, offered a unique laboratory for exploring a central question in', 'pas4text': 'American life: how much of human behavior is universal, therefore presumably natural and unalterable, and how much is socially induced? Among a people widely convinced of the inferiority of women and the immutability of gender roles, clear answers to this question could have important social consequences.', 'ques1ID': 'QX000031a', 'ques2ID': 'QX000031b', 'ques3ID': 'QX000031c', 'ques4ID': 'QX000031d', 'ques5ID': 'QX000031e', 'ques1text': 'What did Margaret Mead study in the South Pacific?', 'ques2text': 'What did Mead advocate for?', 'ques3text': 'Who did Mead work with at Barnard College?', 'ques4text': 'How did Mead study American Life?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' American immigrants; Advanced civilizations; Primitive cultures; Marine life', 'ques2label': ' A return to a simpler, less industrialized nation; The protection of primitive cultures used in anthropological studies; The importance of democratic ideals in academia; The relaxation of traditional gender conventions', 'ques3label': 'Edward Mead; Claude Levi-Strauss; Emily Mead; Franz Boas', 'ques4label': 'By conducting ethnographic research in New York City; By working in both urban and rural areas; By comparing it with other industrialized nations; By contrasting it to primitive cultures', 'ques5label': 'Margaret Mead was the author of &quot;Coming of Age in Samoa.&quot;; The Mead family was devoted to intellectual achievement and democratic ideals.; Margaret Mead was the first female anthropology professor at Columbia University.; Margaret Mead became a successful cultural anthropologist, who focused on the study of primitive cultures.', 'ques1correct': 3, 'ques2correct': 4, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000031a', 'feedback2ID': 'FQX000031b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0032', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000032a', 'pas2ID': 'RX000032b', 'pas3ID': 'RX000032c', 'pas4ID': 'RX000032d', 'pas1text': 'By the early 1900s, New York City had been in the grip of Tammany Hall Democrats for more than half a century. Now and then knocked out of power for brief periods of reform, Tammany politicians bounced back with the help of working-class immigrant voters, especially the Irish and Germans. But the corruption and graft of the Tammany machine were well known, and the Progressive Era brought a new level of outrage, and a new commitment', 'pas2text': 'to reform. In 1913, the anti-Tammany forces, a coalition of Republicans, disaffected Democrats, and independent progressives, operated under the banner of the Fusion Party. They selected John Purroy Mitchel as their mayoral candidate. There were many differences within this group, and Mitchel was a compromise, but a promising one. In 1907, he had been appointed by Mayor Gaynor, a Tammany politician, to investigate another round of', 'pas3text': &quot;corruption charges lodged by one of the local papers. Gaynor may have expected a fake probe and a whitewashing, but Mitchel did a real investigation that ultimately brought down several powerful city officials. Soon after, Mitchel was appointed to the office of commissioner of accounts, and then elected to the Board of Aldermen, the forerunner of today's City Council. In each position, he argued for good management and efficiency as&quot;, 'pas4text': 'the best weapons against corruption. He instituted new practices, like timesheets for employees and better auditing methods. After decades of under-the-table graft, which thrived on confusion, these reforms made it harder for corrupt politicians to cheat. Mitchel seemed like a man who knew what he was doing. He looked courageous, independent, and honest.', 'ques1ID': 'QX000032a', 'ques2ID': 'QX000032b', 'ques3ID': 'QX000032c', 'ques4ID': 'QX000032d', 'ques5ID': 'QX000032e', 'ques1text': 'Why were the Tammany Hall Democrats disliked?', 'ques2text': 'Which party made up anti-Tammany forces?', 'ques3text': &quot;What was the outcome of Mitchel's investigation?&quot;, 'ques4text': 'How did Mitchel make it harder for politicians to cheat?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' They were known for their corruption.; They were considered too conservative in their reforms.; They were overprotective of the working class.; They were considered too progressive.', 'ques2label': ' The Fusion Party; The Progressive Party; The Independent Party; The Republican Party', 'ques3label': 'He was unable to find proof of corrupt activities.; He was taken off of the case for his own corrupt practices.; He did not find evidence of any corruption.; He brought down several powerful city officials.', 'ques4label': 'He created consequences for employees who did not follow the rules.; He hired spies to check up on politicians.; He increased surveillance and investigations.; He instituted timesheets and auditing methods.', 'ques5label': 'John Purroy Mitchel served several government roles, including as the commissioner of accounts and on the Board of Aldermen.; While many Republicans supported the mayoral candidacy of Mitchel, many Democrats in the Fusion Party did not.; Working-class Irish and German immigrants made up the majority of the Tammany Hall Democrats in exchange for protection from investigation.; After many years under Tammany Hall power, the Fusion Party selected a mayoral candidate who they believed could stop the corruption.', 'ques1correct': 1, 'ques2correct': 1, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000032a', 'feedback2ID': 'FQX000032b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0033', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000033a', 'pas2ID': 'RX000033b', 'pas3ID': 'RX000033c', 'pas4ID': 'RX000033d', 'pas1text': 'In 1539, Hernando de Soto led the first major European expedition into the interior of the southeastern North America, an area then known as La Florida. De Soto landed near Tampa Bay, Florida, with more than 600 men, and hoped to find riches in North America like the gold and silver other Spanish explorers had discovered in Central and South America. De Soto and his men explored the present area of Florida, Georgia, the Carolinas,', 'pas2text': 'Tennessee, Alabama, Mississippi, and Arkansas, often clashing with native tribes. In spring 1542, de Soto died of a fever. His men attempted to find a land route through Texas to Mexico but were forced to turn back by dwindling supplies. In June 1543, they sailed down the Mississippi River in seven boats, which sailed into the Gulf of Mexico six weeks later with 311 surviving Spaniards and an unknown number of Indian slaves. This', 'pas3text': &quot;engraving depicts Hernando de Soto's discovery of the Mississippi River at a point below Natchez on May 8, 1541. De Soto (1500-1542) was the first European to document the river. The image shows him and his men approaching the river and a group of Native Americans camped there. At the center, de Soto, riding a white horse, moves toward the American Indians, who watch in front of their tepees. A chief holds out a peace pipe to de&quot;, 'pas4text': 'Soto. In the darker foreground are pictured men with weapons, armor, and cannon. A monk prays as men set a crucifix in the ground. Based on a painting by William Henry Powell, commissioned by Congress for the Rotunda of the Capitol, The Discovery of the Mississippi by De Soto A.D. 1541 was mounted in the Rotunda in 1855, where it would be viewed by thousands of visitors.', 'ques1ID': 'QX000033a', 'ques2ID': 'QX000033b', 'ques3ID': 'QX000033c', 'ques4ID': 'QX000033d', 'ques5ID': 'QX000033e', 'ques1text': 'What did Hernando de Soto hope to find in &quot;La Florida&quot;?', 'ques2text': &quot;Where did de Soto's men go after his death?&quot;, 'ques3text': 'What did de Soto, as the first European, document?', 'ques4text': 'Who commissioned the painting of de Soto?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Gold and riches; Fertile land; A space for Spanish settlement; Usable natural resources', 'ques2label': ' They sailed back to Spain.; They looked for a land route to Mexico before sailing down the Mississippi.; They discovered the Mississippi River at a point below Natchez.; They explored the land north of &quot;La Florida.&quot;', 'ques3label': 'The United States; The area known as &quot;La Florida&quot;; Native Americans; The Mississippi River', 'ques4label': 'De Soto; The Spanish government; William Henry Powell; Congress', 'ques5label': 'Hernando de Soto was the first European to explore the areas of Mexico and Texas.; Hernando de Soto is credited with discovering the Mississippi River.; Fever killed the Spanish explorder Hernando de Soto and about half of his men.; Hernando de Soto first landed in southeastern North America in 1539 hoping to find gold and silver.', 'ques1correct': 1, 'ques2correct': 2, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000033a', 'feedback2ID': 'FQX000033b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0034', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000034a', 'pas2ID': 'RX000034b', 'pas3ID': 'RX000034c', 'pas4ID': 'RX000034d', 'pas1text': &quot;This suit of armor, along with six similar armors, was made in 1612 for a German ruler named Johann Georg I of Saxony. His wife, Magdalena Sibylla, presented all seven sets of armor to him as a Christmas gift. We know that they were actually used on July 4, 1613, in a tournament celebrating the baptism of the couple's son and heir, also named Johann Georg. In this particular military sporting event, the contestants fought on foot&quot;, 'pas2text': &quot;with swords instead of on horseback with lances. The men who made plate armor like this suit were highly skilled craftspeople. To produce suits of armor, they hammered bars of iron and steel into flat plates. Then they created patterns based on their customers' bodies and shaped the metal pieces to fit exactly. This armor is densely covered with intricate designs' intertwining leaves, flowers, and fruits, as well as four fierce lion&quot;, 'pas3text': 'faces on the breastplate and the backplate, and on each cowter (elbow defense). Artists who collaborated with the armor makers created the designs by etching the metal with acid, blackening the surface with paint or varnish, then wiping and polishing it, leaving the ink in the etched lines only. This suit of armor weighs sixty-three pounds and provides both protection and mobility. Although plate armor looks inflexible, parts of it', 'pas4text': 'like the cuisses (plates covering the front thighs) are made of many separate pieces, like the shell covering the tail of a lobster, to allow a full range of movement. This object is included in Learning to Look: 20 Works of Art Across Time and Cultures, a teaching kit developed by the Division of Education and made possible by the Comcast Foundation, The Delphi Project Foundation, and Reliance Standard Life Insurance Company.', 'ques1ID': 'QX000034a', 'ques2ID': 'QX000034b', 'ques3ID': 'QX000034c', 'ques4ID': 'QX000034d', 'ques5ID': 'QX000034e', 'ques1text': &quot;When was Johann Georg I's armor made?&quot;, 'ques2text': 'How did craftspeople make plate armor?', 'ques3text': 'What did artists use to create the designs on the armor?', 'ques4text': 'How can plate armor still allow its wearer to move?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' 1615; 1614; 1612; 1613', 'ques2label': ' They hammered bars of iron and steel into plates.; They recycled old metal plates.; They welded iron and steel together.; They bent old plates of metal into shape.', 'ques3label': 'Steel, alcohol, and polish; Paint, flowers, and polish; Steam, fabric, and polish; Acid, paint, and polish', 'ques4label': &quot;By using small pieces of metal throughout the entire set of armor; By using a more flexible kind of metal at the joints; By leaving the area around the wearer's joints without any metal pieces; By using several separate pieces&quot;, 'ques5label': 'The suits of armor given to Johann Georg I are considered the best ever made.; Making plate armor was a time-intensive and expensive process.; Plate armor was designed to be mostly decorative.; Making plate armor required highly skilled craftspeople.', 'ques1correct': 3, 'ques2correct': 1, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000034a', 'feedback2ID': 'FQX000034b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0035', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000035a', 'pas2ID': 'RX000035b', 'pas3ID': 'RX000035c', 'pas4ID': 'RX000035d', 'pas1text': &quot;Every night, a commercial airliner full of Haitians arrives in this city's international airport carrying families who have left their poor island nation for a new life here. As the Trump administration aims to curb immigration, Chile -- one of Latin America's richest and safest countries -- has opened its doors to some of the region's poorest migrants in record numbers. The most dramatic surge has come from Haiti. Last year, almost&quot;, 'pas2text': '105,000 Haitians entered Chile, compared with about 49,000 in 2016 and just a handful a decade ago, according to federal police that oversee border crossings. Tens of thousands of Venezuelans have also fled their crime-ridden country in recent years for Chile, which has a history of receiving Bolivian, Peruvian and Colombian migrants. &quot;The explosion of this immigration is the most intense in the history of Chile,&quot; said Rodrigo', 'pas3text': 'Sandoval, the former head of Chile\'s immigration office. &quot;There has never been a migration that has grown so much in such little time.&quot; It represents a new wave in what development economists say is an increasingly common type of immigration: from one developing country to another. The United Nations estimates 92 million people fall into this category, accounting for one-third of global migrants. Jean Rony, a 37-year-old from', 'pas4text': 'Haiti\'s capital, Port-au-Prince, arrived a year ago after being encouraged by a Haitian friend in Chile to make the journey. He quickly found a job in construction, and hopes to bring his three children here once he receives permanent residency. &quot;So many Haitians are leaving the country seeking a better life because there aren\'t resources there,&quot; said Mr. Rony. &quot;Thanks to God, I\'ve been here a year and haven\'t had a single problem with anyone.&quot;', 'ques1ID': 'QX000035a', 'ques2ID': 'QX000035b', 'ques3ID': 'QX000035c', 'ques4ID': 'QX000035d', 'ques5ID': 'QX000035e', 'ques1text': 'How has Chile helped migrants?', 'ques2text': 'How does recent migration to Chile compare to earlier times?', 'ques3text': 'What do economistis say is an increasing type of immigration?', 'ques4text': 'What is one reason why someone may immigrate to Chile?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Negotiated the treatment of poor people with their neighbors; Assisted poor people in migrating to America; Helped poor people migrate from Chile to Haiti; Assisted poor people in migrating to America', 'ques2label': ' Migration to Chile has stopped after new restrictive policies.; A similar number of migrants continue to flee to Chile each year.; More migrants than ever before are fleeing to Chile.; Less migrants than ever before are fleeing to Chile.', 'ques3label': 'From a developing nation to a developed nation; From a non-industrialized nation to another non-industrialized nation; From an under-developed nation to a developing nation; From one developing nation to another', 'ques4label': 'Chile is the only country who acceps immigrants.; Many countries are encouraging their citizens to leave for Chile.; Chile is considered one of the most beautiful countries in the world.; Immigrants can find a job in Chile to support their family who remain in another country.', 'ques5label': 'Migrating to Chile has become less popular over the last 10 years as their policies have changed.; Migration from Chile to America has increased dramatically as America has become more friendly to immigrants.; A new population from Venezuela is migrating to Chile for the first time.; Immigration to Chile has increased dramatically when compared to numbers from just a decade ago.', 'ques1correct': 2, 'ques2correct': 3, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000035a', 'feedback2ID': 'FQX000035b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0036', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000036a', 'pas2ID': 'RX000036b', 'pas3ID': 'RX000036c', 'pas4ID': 'RX000036d', 'pas1text': 'Fannie Lou Hamer (1917-1977) was a civil rights activist whose passionate depiction of her own suffering in a racist society helped focus attention on the plight of African-Americans throughout the South. In 1964, working with the Student Non-Violent Coordinating Committee (SNCC), Hamer helped organize the 1964 Freedom Summer African-American voter registration drive in her native Mississippi. At the Democratic National Convention', 'pas2text': &quot;later that year, she was part of the Mississippi Freedom Democratic Party, an integrated group of activists who openly challenged the legality of Mississippi's all-white, segregated delegation. Born Fannie Lou Townsend on October 6, 1917, in Montgomery County, Mississippi. The daughter of sharecroppers, Hamer began working the fields at an early age. Her family struggled financially, and often went hungry. Married to Perry Pap&quot;, 'pas3text': 'Hamer in 1944, Fannie Lou continued to work hard just to get by. In the summer of 1962, however, she made a life-changing decision to attend a protest meeting. She met civil rights activists there who were there to encourage African Americans to register to vote. Hamer became active in helping with the voter registration efforts. Hamer dedicated her life to the fight for civil rights, working for the Student Nonviolent Coordinating', 'pas4text': 'Committee (SNCC). This organization was comprised mostly of African American students who engaged in acts of civil disobedience to fight racial segregation and injustice in the South. These acts often were met with violent responses by angry whites. During the course of her activist career, Hamer was threatened, arrested, beaten, and shot at. But none of these things ever deterred her from her work.', 'ques1ID': 'QX000036a', 'ques2ID': 'QX000036b', 'ques3ID': 'QX000036c', 'ques4ID': 'QX000036d', 'ques5ID': 'QX000036e', 'ques1text': 'What is one way that Fannie Lou Hamer was a civil rights activist?', 'ques2text': 'Where was Fannie Lou Hamer born?', 'ques3text': &quot;What decision changed Fannie Lou Hamer's life?&quot;, 'ques4text': &quot;Which best describes Fannie Lou Hamer's time as a civil rights activist?&quot;, 'ques5text': 'What is the main idea of the text?', 'ques1label': ' She became a preacher.; She was a sharecropper in Mississippi.; She helped organize a voting drive; She participated in boycotts.', 'ques2label': ' Alabama; Massachusettes; South Carolina; Mississippi', 'ques3label': 'She challenged the legality of an all-white delegation.; She decided to move to Mississippi.; She decided to register to vote.; She decided to attend a protest meeting.', 'ques4label': 'Peaceful; Boring; Easy; Dangerous', 'ques5label': &quot;Fannie Lou Hamer once volunteered at a voter registration drive in Mississippi.; Fannie Lou Hamer's work with the SNCC put her in harm's way against angry white people.; Fannie lou Hamer worked for SNCC during her time as a civil rights activist.; Born a sharecropper in Mississippi, Fannie Lou Hamer became a dedicated civil rights activist.&quot;, 'ques1correct': 3, 'ques2correct': 4, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000036a', 'feedback2ID': 'FQX000036b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0037', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000037a', 'pas2ID': 'RX000037b', 'pas3ID': 'RX000037c', 'pas4ID': 'RX000037d', 'pas1text': &quot;Sandra Day O'Connor (1930-) was an associate justice of the Supreme Court of the United States from 1981 to 2006, and was the first woman to serve on the Supreme Court. A moderate conservative, she was known for her dispassionate and meticulously researched opinions. For 24 years, Sandra Day O'Connor was a pioneering force on the Supreme Court and will always be remembered as acting as a sturdy guiding hand in the court's decisions&quot;, 'pas2text': &quot;during those years and serving as a swing vote in many important cases. In 2009 her accomplishments were acknowledged at the highest level, when she was honored with the Presidential Medal of Freedom. Born on March 26, 1930, in El Paso, Texas, Sandra Day O'Connor became the first woman to serve as a justice on the United States Supreme Court in 1981. Long before she would weigh in on some of the nation's most pressing cases, she&quot;, 'pas3text': &quot;spent part of her childhood on her family's Arizona ranch. O'Connor was adept at riding and assisted with some ranch duties. Did You Know? On September 21, 1981, O'Connor was confirmed by the U.S. Senate with a vote of 99-0. After graduating from Stanford University in 1950 with a bachelor's degree in economics, Sandra Day O'Connor attended the university's law school. She received her degree in 1952 and worked in California and&quot;, 'pas4text': &quot;Frankfurt, Germany, before settling in Arizona. In Arizona, Sandra Day O'Connor worked as the assistant attorney general in the 1960s. In 1969, she made the move to state politics with an appointment by Governor Jack Williams to state senate to fill a vacancy. A conservative Republican, O'Connor won re-election twice.&quot;, 'ques1ID': 'QX000037a', 'ques2ID': 'QX000037b', 'ques3ID': 'QX000037c', 'ques4ID': 'QX000037d', 'ques5ID': 'QX000037e', 'ques1text': &quot;How did Sandra Day O'Connor make history?&quot;, 'ques2text': &quot;What honor did Sandra Day O'Connor recieve in 2009?&quot;, 'ques3text': &quot;What law school did Sandra Day O'Connor attend?&quot;, 'ques4text': &quot;What government offices did Sandra Day O'Connor hold before becoming a Supreme Court justice?&quot;, 'ques5text': 'What is the main idea of the text?', 'ques1label': ' She was the first moderate-conservative on the Supreme Court.; She was the first female state senator in Arizona.; She is the longest-serving member of the Supreme Court.; She was the first female state senator in Arizona.', 'ques2label': ' A statue was erected in her honor in Washington D.C.; She became the first female Supreme Court justice.; She was awarded the Congressional Gold Medal.; She was awarded the Presidential Medal of Freedom.', 'ques3label': 'Arizona State Law School; Columbia Law School; Harvard Law School; Stanford Law School', 'ques4label': 'Attorney general and state treasurer; State representative and auditor general; Mayor and governor; Assistant attorney general and state senator', 'ques5label': &quot;Sandra Day O'Connor was approved as a Supreme Court Justice with a vote of 99-0.; Sandra Day O'Connor worked as an assistant attorney general and as a state senator in Arizona.; Sandra Day O'Connor was born in Texas and grew up on her family's Arizona ranch.; Sandra Day O'Connor was the first female Supreme Court Justice and is considered a guiding hand on the court.&quot;, 'ques1correct': 2, 'ques2correct': 4, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000037a', 'feedback2ID': 'FQX000037b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0046', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000046a', 'pas2ID': 'RX000046b', 'pas3ID': 'RX000046c', 'pas4ID': 'RX000046d', 'pas1text': 'Imagine a life directly defined by roughly a third of a year of rain and flooding. The people of ancient Mesopotamia, Egypt, and the Kingdom of Kush all lived that life: their economies, power, and simple survival depended on the seasons of the rivers that ran through each empire. Ancient Egypt and Mesopotamia made up parts of the area known as the Fertile Crescent, which experienced rain every year for about 100 days, beginning in', 'pas2text': 'the late spring or early summer. For ancient Egypt, this caused the Nile River to flood, which saturated the normally arid land around it with water and nutrient-rich, river-born soil called silt. Ancient Egyptians are now revered as the masters of desert agriculture, for their irrigation technology allowed them to cultivate crops during the dry months, from a fall-season sowing to springtime harvest. Their expertise started with', 'pas3text': &quot;simply monitoring weather patterns and gauging the rise and fall of the Nile's water levels, practices by which the nation's people were able to plan their planting and harvest seasons accordingly. Some special inventions revolving around the rainy season included the system of dikes and canals built to contain and direct the floodwaters of the Nile. By diverting water, ancient Egyptians were able to keep it from washing onto&quot;, 'pas4text': 'un-farmable desert terrain, where it would essentially be wasted. Instead, the ability to move water to the crops that needed it allowed for a productive growing season and higher crop yield. Ancient Egyptians grew a variety of crops, and they were able to build cities around the abundance. They traded grains made linen from flax, and sustained themselves on garden crops grown in smaller plots, often part of personal households.', 'ques1ID': 'QX000046a', 'ques2ID': 'QX000046b', 'ques3ID': 'QX000046c', 'ques4ID': 'QX000046d', 'ques5ID': 'QX000046e', 'ques1text': 'What role did rain and flooding play in the lives of people in the Fertile Crescent?', 'ques2text': 'How did ancient Egyptians grow plants while living in a desert?', 'ques3text': &quot;Why did the Egyptians need to monitor the weather and the Nile's water levels?&quot;, 'ques4text': 'What did Egyptians trade?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Because of rain and flooding, people living in the Fertile Crescent had to build new homes very frequently.; Excess rain and flooding made the lives of people in the Fertile Crescent very difficult. ; Rain and flooding did not impact the people who lived in the Fertile Crescent.; Excess rain and flooding made the lives of people in the Fertile Crescent very difficult.', 'ques2label': ' They used raised flower beds.; They developed irrigation techniques.; They stored rainwater and used it to water their plants; They traded grain for water with their neighbors.', 'ques3label': 'They were superstious about thunderstorms and prayed before they started.; They needed to know when to capture rainwater for drinking.; They moved their homes and belongings when the Nile River flooded.; They planned their planting and harvest seasons around them', 'ques4label': 'Dikes and canals; Fertile garden plots; Water and pots; Grains made from linen and flax', 'ques5label': '100 days a year of rain and flooding made life extememly difficult for civilizations in the Fertile Crescent.; Civilizations in the Fertile Crescent worked together to develop irrigation technologies.; Ancient Egyptians struggled to manage the Nile River in order to support agriculture.; Ancient Egyptians thrived in the desert by creating systems to control and manage their water supply.', 'ques1correct': 2, 'ques2correct': 2, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000046a', 'feedback2ID': 'FQX000046b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0047', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000047a', 'pas2ID': 'RX000047b', 'pas3ID': 'RX000047c', 'pas4ID': 'RX000047d', 'pas1text': 'In September 1620, during the reign of King James I, around 100 English men and women - many of them members of the English Separatist Church - set sail for the New World aboard the Mayflower, a three-masted merchant ship. They landed on the shores of Cape Cod, in present-day Massachusetts, two months later, and in late December anchored at Plymouth Rock, where they would form the first permanent settlement of Europeans in New England.', 'pas2text': 'Though more than half the original settlers died during that grueling first winter, the survivors were able to secure peace treaties with neighboring Native American tribes and build a largely self-sufficient economy within five years. JOURNEY TO THE NEW WORLD Among the group traveling on the Mayflower in 1620 were close to 40 members of a radical Puritan faction known as the English Separatist Church. Feeling that the Church of', 'pas3text': 'England had not sufficiently completed the necessary work of the Protestant Reformation, the group had chosen to break with the church altogether. The Separatists had sought religious freedom before, fleeing England in 1607 and 1608 to settle in the Netherlands, first in Amsterdam and later in the town of Leiden, where they remained for the next decade. Wanting to secure their English language and heritage, and seeking more economic', 'pas4text': 'opportunity, the group - later known as the Pilgrims - laid plans for a voyage to the New World aboard the Mayflower. Did You Know? Three more ships traveled to Plymouth soon after the Mayflower, including the Fortune (1621), the Anne and the Little James (both 1623). Passengers on these first four ships were called the &quot;Old Comers&quot; of Plymouth Colony, and were given special treatment in later colonial affairs.', 'ques1ID': 'QX000047a', 'ques2ID': 'QX000047b', 'ques3ID': 'QX000047c', 'ques4ID': 'QX000047d', 'ques5ID': 'QX000047e', 'ques1text': 'When did the settlers reach Plymouth?', 'ques2text': 'What is one thing settlers did after landing at Plymouth?', 'ques3text': 'Why did the Separatists leave England?', 'ques4text': 'What ships were the last of the &quot;Old Comers&quot; to reach Plymouth?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' December of 1620; December of 1625; September of 1620; September of 1625', 'ques2label': ' Sought to learn about the Native American tribes; Secured peace treaties with the Native American tribes; Went to war with the Native American tribes; Moved to a different location that was away from the Native Amerian tribes', 'ques3label': 'They believed that the Church of England had taken the Protestant Reformation too seriously.; They were unable to find employment in England as many refused to hire them.; They were told that they would be imprisoned if they stayed in England.; They did not believe that the Church of England had completed the work of the Protestant Reformation.', 'ques4label': 'The Little James and the Fortune; The Mayflower and the Anne; The Fortune and the Mayflower; The Anne and the Little James', 'ques5label': 'The first settlement of Plymouth is considered a failure as all original settlers died during the first winter.; All of the members of the English Separatists Church were forceably put on the Mayflower and sent to the New World in 1620.; The Mayflower was the only ship with human passengers to ever reach the New World from England.; After leaving England for a different life, settlers in the New World eventually built a self-sufficent economy and way of life there.', 'ques1correct': 1, 'ques2correct': 2, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000047a', 'feedback2ID': 'FQX000047b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0048', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000048a', 'pas2ID': 'RX000048b', 'pas3ID': 'RX000048c', 'pas4ID': 'RX000048d', 'pas1text': &quot;One way or another, all the events you can recall have an order to them. Or maybe it's more accurate to say: You can give order to your own history any way you like. You can think of the different grades you've been in at school. We all understand there's a difference between middle school and high school, and between kindergarten and first grade. Each of these years of school was different in both easy and hard-to-notice ways. It&quot;, 'pas2text': 'may be difficult to remember the difference between kindergarten and first grade, but you likely remember which grade you started having different teachers for different subjects. School grades are one way of organizing history. In this case, time has been organized for you by teachers, so that a plan for education unfolds at the right pace. Someone had a certain progression in mind for you, and so every year your experiences at', 'pas3text': &quot;school changed in different ways. But every person experiences each year differently. Maybe 3rd and 4th grade seem like a blur, but you can think of ways life was very different living in one town and then moving to live in another. Places you've lived are another way of organizing history. First, you were here; then you were there; now you're here. Drawings you made, trophies you won, notes you passed with friends' all of these come&quot;, 'pas4text': 'from different parts of your history, and you can think about them based on how your history is organized. &quot;Oh, yeah. That\'s my Youth League soccer trophy. I was goalie on the Mustangs with Dana that summer. That was in Hoboken, from before we moved to Teaneck.&quot; I was pretty good at watercolors, for a second grader! We had Ms. Stephanie.', 'ques1ID': 'QX000048a', 'ques2ID': 'QX000048b', 'ques3ID': 'QX000048c', 'ques4ID': 'QX000048d', 'ques5ID': 'QX000048e', 'ques1text': 'What is one way the text explains that you may order your own history?', 'ques2text': 'Who decides the progression of a school year?', 'ques3text': &quot;What makes everyone's memory different?&quot;, 'ques4text': 'How did the trophy help the person remember her history?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' By remembering the meals you eat every day; By remembering every year of your life; By thinking of the difficulty of sports you played growing up; By thinking of the order of the grades you attended in school', 'ques2label': ' The student; The parent; The teacher; The principal', 'ques3label': &quot;No one has the same teachers every year; No one experiences the same events as each other; Everyone's brain works differently; Everyone experiences things differently&quot;, 'ques4label': 'Her brother had the same trophy; The trophy had a place and date on it; Her mother told her about the trophy and reminded her; She remembered what she was doing and where she was when she got the trophy', 'ques5label': 'No one knows for sure how people are able to recall things that happen to them.; In order to recall what happened at school, you should ask your teachers.; When we remember events from our lives, there is rarely a distinct order to them.; The events that we recall have an order to them, and school grades are one way we can recall our lives.', 'ques1correct': 4, 'ques2correct': 3, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000048a', 'feedback2ID': 'FQX000048b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0049', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000049a', 'pas2ID': 'RX000049b', 'pas3ID': 'RX000049c', 'pas4ID': 'RX000049d', 'pas1text': 'Enslaved African American potters created these pots around the time of the Civil War in the Edgefield District of South Carolina, a place famous for its pottery throughout the 1800s. The Edgefield District was known as a crossroads of clay because it became a meeting point of ideas from Asia and people from Africa and Europe. The distinctive glazed stoneware was stronger and cheaper than any European or American ware of the same', 'pas2text': &quot;kind at that time. Stoneware is pottery made of a very hard clay that is then fired (baked) at high temperatures. After clay is wedged (kneaded) to make it smooth and remove air bubbles, it is built up by hand or formed on a potter's wheel a round table that spins around like a record player to create centrifugal force. Pulling the clay up or out against this force creates a variety of shapes, like straight-sided cylinders, round&quot;, 'pas3text': 'bowls, and flat plates. Liquid glazes are used to coat and color clay pots before they are fired in the kiln (a special oven), where the glazes melt and then become hard and shiny as they cool. These pots feature alkaline glazes, made with ash and sand, that were used primarily in China before being rediscovered in Edgefield. A remarkable African American potter named David Drake (also known as Dave the Potter), who worked as a', 'pas4text': 'slave in the Edgefield District from 1834 to 1864, created this large jar by taking two bowls formed on a wheel and placing one upside-down on top of the other. The lug handles were formed by hand and attached on both sides. The brownish glaze was poured on, leaving a few streaks and bare spots. On one side of the jar Dave wrote &quot;LM May 3rd 1859&quot; and his name. &quot;LM&quot; are the initials of Dave\'s fourth owner, Lewis Miles.', 'ques1ID': 'QX000049a', 'ques2ID': 'QX000049b', 'ques3ID': 'QX000049c', 'ques4ID': 'QX000049d', 'ques5ID': 'QX000049e', 'ques1text': 'Why was Edgefield known as a crossroads of clay?', 'ques2text': 'How is stoneware made?', 'ques3text': 'When are liquid glazes applied to the pottery?', 'ques4text': 'What did David Drake use to make the large jar?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Many people came to Edgefield to learn how to make stoneware.; There were large amounts of clay available in the ground there.; It was known as the best place to trade different pieces of pottery.; There were large amounts of clay available in the ground there.', 'ques2label': ' By using many layers of clay built on each other to create shapes; By cutting large pieces of stone into smaller shapes; By mixing small stones with clay before forming clay into shapes; By forming clay into various shapes and then firing it at high temperatues', 'ques3label': 'When the clay is being formed; After the pottery comes out of the oven; Before the clay is shaped into its form; Before the pottery is fired in the kiln', 'ques4label': 'One large bowl and handles made by the pottery wheel; One large bowl made from the pottery wheel and handles made by hand; Two bowls made by hand and handles made on the pottery wheel; Two bowls made from the pottery wheel and handles made by hand', 'ques5label': 'David Drake was the first potter to make large stoneware pieces on a potting wheel.; Stoneware was invented in the Edgefield District, making it the first place in the world where pottery wheels were used.; Stoneware from Edgefield was more expensive than other stonewares because of its excellent craftsmanship.; The Edgefield District of South Carolina was famous for its stoneware pottery in the 1800s.', 'ques1correct': 2, 'ques2correct': 4, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000049a', 'feedback2ID': 'FQX000049b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0050', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000050a', 'pas2ID': 'RX000050b', 'pas3ID': 'RX000050c', 'pas4ID': 'RX000050d', 'pas1text': 'Margaret Thatcher (1925-2013), the United Kingdom\'s first female prime minister, served from 1979 until 1990. During her time in office, she reduced the influence of trade unions, privatized certain industries, scaled back public benefits and changed the terms of political debate, much like her friend and ideological ally, U.S. President Ronald Reagan. Nicknamed the &quot;Iron Lady,&quot; she opposed Soviet communism and fought a war to', 'pas2text': 'maintain control of the Falkland Islands. The longest-serving British prime minister of the 20th century, Thatcher was eventually pressured into resigning by members of her own Conservative Party. MARGARET THATCHER: THE EARLY YEARS Margaret Hilda Roberts, later Margaret Thatcher, was born on October 13, 1925, in Grantham, a small town in Lincolnshire, England. Her parents, Alfred and Beatrice, were middle-class shopkeepers and', 'pas3text': 'devout Methodists. Alfred was also a politician, serving as a town council member for 16 years before becoming an alderman in 1943 and mayor of Grantham from 1945 to 1946. Did You Know? In 2007 Margaret Thatcher became the first living ex-prime minister in British history to be honored with a statue in the Houses of Parliament. It stands opposite a statue of Winston Churchill in the lobby of the House of Commons. Thatcher', 'pas4text': 'matriculated at Oxford University in 1943, during the height of World War II. While there she studied chemistry and joined the Oxford Union Conservative Association, becoming president of the organization in 1946. After graduation she worked as a research chemist, but her real interest was politics. In 1950 she ran for parliament in the Labour-dominated constituency of Dartford, using the slogan &quot;Vote Right to Keep What\'s Left.&quot;', 'ques1ID': 'QX000050a', 'ques2ID': 'QX000050b', 'ques3ID': 'QX000050c', 'ques4ID': 'QX000050d', 'ques5ID': 'QX000050e', 'ques1text': 'Who does the author compare Margaret Thatcher to?', 'ques2text': 'Where was Margaret Thatcher born?', 'ques3text': 'What did Margaret Thatcher have in common with her father?', 'ques4text': 'When did Margaret Thatcher run for parliament?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Alfred Roberts; Margaret Hilda Roberts; Ronald Reagan; Winston Churchill', 'ques2label': ' Lincolnshire, England; Norfolk, England; Oxford, England; London, England', 'ques3label': 'They were both mayor of Grantham.; They both went to Oxford University.; They were both Prime Minister.; They were both politicians.', 'ques4label': '1953; 1946; 1943; 1950', 'ques5label': &quot;Before Margaret Thatcher was a politician, she studied chemistry at Oxford University.; Margaret Thatcher is the only conservative female member of parliament in British history.; Margaret Thatcher was born in a small town in England to middle-class parents.; Margaret Thatcher was a conservative politician and the United Kingdom's first female prime minister.&quot;, 'ques1correct': 3, 'ques2correct': 1, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000050a', 'feedback2ID': 'FQX000050b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0051', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000051a', 'pas2ID': 'RX000051b', 'pas3ID': 'RX000051c', 'pas4ID': 'RX000051d', 'pas1text': &quot;Raymond Weeks of Birmingham, Alabama, organized a Veterans Day parade for that city on November 11, 1947, to honor all of America's Veterans for their loyal service. Later, U.S. Representative Edward H. Rees of Kansas proposed legislation changing the name of Armistice Day to Veterans Day to honor all who have served in America's Armed Forces. In 1954, President Dwight D. Eisenhower signed a bill proclaiming November 11th as&quot;, 'pas2text': 'Veterans Day and called upon Americans everywhere to rededicate themselves to the cause of peace. He issued a Presidential Order directing the head of the Veterans Administration, now the Department of Veterans Affairs, to form a Veterans Day National Committee to organize and oversee the national observance of Veterans Day. In addition to fulfilling that mission, the committee oversees the annual production and distribution of the', 'pas3text': 'annual Veterans Day poster and this Teacher Resource Guide. In 1968, Congress moved Veterans Day to the fourth Monday in October. However, it became apparent that the November 11th date was historically significant to a great many Americans. As a result, Congress formally returned the observance of Veterans Day to its traditional date in 1978. The Veterans Day National Ceremony is held each year on November 11th at Arlington', 'pas4text': 'National Cemetery. At 11 a.m., a color guard, made up of members from each of the military services, renders honors to America\'s war dead during a tradition-rich ceremony at the Tomb of the Unknowns. The President or his representative places a wreath at the Tomb and a bugler sounds &quot;Taps.&quot; The balance of the ceremony, including a &quot;Parade of Flags&quot; by numerous Veterans service organizations, takes place inside the Memorial Amphitheater, adjacent to the Tomb.', 'ques1ID': 'QX000051a', 'ques2ID': 'QX000051b', 'ques3ID': 'QX000051c', 'ques4ID': 'QX000051d', 'ques5ID': 'QX000051e', 'ques1text': 'What was Veterans Day called before it was named Veterans Day?', 'ques2text': 'Who did Eisenhower appoint to oversee Veterans Day?', 'ques3text': 'Why did Congress return Veterans Day to November 11th?', 'ques4text': 'Which best describes the Veterans Day ceremony at Arlington National Cemetary?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Parade Day; V-Day; Service Day; Armistice Day', 'ques2label': ' The Veterans Administration; Congress; Raymond Weeks; Arlington National Cemetary', 'ques3label': 'It was the only day that could be used to celebrate veterans.; The Veterans Day National Commitee voted on it.; There was a conflict with another holiday in October.; The date was significant to many Americans.', 'ques4label': 'The ceremony is a silent gathering of only the President and his closest advisors.; There is a parade around the Cemetary led by the President and representatives from each branch of military service.; Veterans service organizations work together to create the ceremony while active duty service members are not involved.; Many different traditions are completed by branches of the military and various Veterans service organizations.', 'ques5label': 'The head of the Veterans Administration formed a committee to overee the national observance of Veterans Day.; The first time that November 11th was used to celebrate veterans was November 11, 1947.; Veterans Day did not always recieve strong support from the American people until 1978.; Veterans Day became a national holiday in 1954 when Eisenhower signed a bill proclaiming November 11th as Veterans Day.', 'ques1correct': 4, 'ques2correct': 1, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000051a', 'feedback2ID': 'FQX000051b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0052', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000052a', 'pas2ID': 'RX000052b', 'pas3ID': 'RX000052c', 'pas4ID': 'RX000052d', 'pas1text': 'This engraving depicts Columbus\'s first landing in the New World, on the island he called San Salvador, on October 12, 1492. Columbus is surrounded by his men on the beach. Discussing the landing in his journal, Columbus wrote that he &quot;leaped on shore, and took, possession of the said island for the King and for the Queen.&quot; In the engraving, he holds a sword in one hand and the royal banner of Aragon and Castile in the other,', 'pas2text': 'declaring the discovery for Spain. To the side, Native Americans watch the Europeans from behind a tree. In his journal, Columbus recorded that they - asked us if we had come from heaven and called them &quot;the best people in the world, and the gentlest.&quot; He also, however, made note of his plan to with force subjugate the whole island. This engraving, by H. B. Hall, is based on an oil painting by John Vanderlyn.', 'pas3text': &quot;Vanderlyn (1775 -1852) was an American neoclassicist painter from Kingston, New York. In 1836, Vanderlyn was commissioned by Congress to paint The Landing of Columbus. A commission of that caliber was both a boon to an artist's standing and an opportunity to create an enduring historical image, and the painting would prove to be one of Vanderlyn's most well-known works. He completed the painting in 1846, and it was mounted in the Rotunda of&quot;, 'pas4text': &quot;the Capitol in 1847. Vanderlyn's portrayal soon appeared in advertisements, on postage stamps in 1869 and 1893, and on currency in the 1870s. Viewed by thousands in the Capitol and by countless more in various incarnations, The Landing of Columbus came to be the prevailing representation in the American imagination of Columbus's discovery of the New World.&quot;, 'ques1ID': 'QX000052a', 'ques2ID': 'QX000052b', 'ques3ID': 'QX000052c', 'ques4ID': 'QX000052d', 'ques5ID': 'QX000052e', 'ques1text': 'Who also arrived with Columbus to the New World?', 'ques2text': 'What did Columbus plan to do with the people of San Salvador?', 'ques3text': 'When did Vanderlyn complete the painting?', 'ques4text': &quot;What does the author compare Vanderlyn's painting to?&quot;, 'ques5text': 'What is the main idea of the text?', 'ques1label': ' His men; His wife; The King and Queen of Spain; A group of settlers', 'ques2label': ' Learn about them; Buy land from them; Trade with them; Subjugate them', 'ques3label': '1864; 1852; 1836; 1846', 'ques4label': &quot;How Columbus's landing is discussed in history books; Columbus's depiction of his landing from his journal; Other paintings that depict Columbus's landing in the New World; The American imagination of Columbus's landing in the New World&quot;, 'ques5label': &quot;H. B. Hall and John Vanderlyn worked together when creating an engraving and painting to commemorate Columbus's landing in the New World.; H. B. Hall's engraving of Columbus's landing in the New World inspired Vanderlyn's painting of the same event.; John Vanderlyn's painting, depicting Columbus's arrival in the New World, is largely criticized for its inaccurate portrayal.; H.B. Hall made an engraving based off of a famous painting by John Vanderlyn that depicts Columbus's arrival to the New World.&quot;, 'ques1correct': 1, 'ques2correct': 4, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000052a', 'feedback2ID': 'FQX000052b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0053', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000053a', 'pas2ID': 'RX000053b', 'pas3ID': 'RX000053c', 'pas4ID': 'RX000053d', 'pas1text': 'One of the most fascinating leaders of the Haitian Revolution, and perhaps the best known, is Toussaint Louverture. Born a slave but given his freedom at around age 30, he worked as a coachman and a manager on the Breda plantation near Cap Francais. He was able to read and write in both French and Kreyol, having been taught by his godfather, Pierre Baptiste (whom some historians believe may actually have been his father). Toussaint', 'pas2text': &quot;was 56 years old when the French Revolution broke out, and over the course of the next 10 years he played three major and very different roles in the history of Haiti. He was a military leader who united the revolutionary forces of the whole island of Saint-Domingue and led them to victory. He was an economic developer who instituted the plans for rebuilding Haiti's ravaged economy. And finally, as a statesman, he created the first&quot;, 'pas3text': &quot;constitution of the new country. In each of these roles, he was both successful and controversial. Toussaint's military career began as a lieutenant in the insurgent forces, and he wore a Spanish uniform in his initial military campaigns. Spain had offered support to the cause of the insurgents, offering them armaments and the backing of the Spanish king. But after the French made a proclamation of general emancipation of slaves,&quot;, 'pas4text': 'Toussaint switched uniforms and continued to fight, now as a Frenchman, helping drive the Spanish and the British out of Saint-Domingue and secure it as a French possession. So, in the first phase of his career, he led a united group of insurrectionists to victory and established Saint-Domingue as a colony of free men, but still under French control.', 'ques1ID': 'QX000053a', 'ques2ID': 'QX000053b', 'ques3ID': 'QX000053c', 'ques4ID': 'QX000053d', 'ques5ID': 'QX000053e', 'ques1text': 'Who taught Toussaint Louverture how to read?', 'ques2text': 'What roles did Toussaint play in the Haitian Revolution?', 'ques3text': 'Who did Toussaint fight for first?', 'ques4text': &quot;What country controlled Haiti at the end of the first phase of Toussaint's career?&quot;, 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Saint-Domingue; His grandmother; The Spanish army; His grandmother', 'ques2label': ' Military leader, nurse, and factory worker; Military leader, economic developer, and statesman; Military leader, professor, and soldier; Military leader, doctor, and builder', 'ques3label': 'The Americans; The British; The French; The Spanish', 'ques4label': 'Haiti; Britain; Spain; France', 'ques5label': 'Toussaint Louverture was freed from enslavement when he was 30 years old.; Pierre Baptiste taught Toussaint Louverture how to read and write in French and Kreyol.; Toussaint Louverture was ousted as a military leader after it was discovered that he began fighting for the French.; Born into slavery, Toussaint Louverture became an important figure in the Haitian Revolution.', 'ques1correct': 2, 'ques2correct': 2, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000053a', 'feedback2ID': 'FQX000053b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0054', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000054a', 'pas2ID': 'RX000054b', 'pas3ID': 'RX000054c', 'pas4ID': 'RX000054d', 'pas1text': 'Tschaikovsky\'s iconic score transports you to a world of wonder where mischievous mice are foiled by toy soldiers come to life, and a blizzard of ballerinas reveals the enchanting Land of Sweets. This is &quot;the mother of all Nutcrackers&quot; (The New Yorker) - the version that originated a beloved American tradition. During the holiday period, the entire Company is immersed in activities surrounding George Balanchine\'s The Nutcracker.', 'pas2text': &quot;All 90 dancers, 62 musicians, 32 stagehands and two casts of 50 young students each from the School of American Ballet join forces to make each performance as magical as possible. Children of all ages from New York City and the nation fill the David H. Koch Theater to be captivated by the lure of Tschaikovsky's music, Balanchine's choreography, Karinska's sumptuous costumes, and Rouben Ter-Arutunian's magical sets. George&quot;, 'pas3text': &quot;George Balanchine's The Nutcracker, based on the Alexandre Dumas pere version of E.T.A. Hoffmann's tale, The Nutcracker and the Mouse King (1816), demands a full-scale production. The elaborate stage elements and intricate lighting unleash the viewers' imagination by providing visual effects that are extraordinarily grand. The most famous example is the one-ton Christmas tree that grows from a height of 12 feet to 40 feet, evoking audible&quot;, 'pas4text': &quot;gasps of disbelief from the audience at each performance. Other notable feats include the comic figure of Mother Ginger - 85 pounds and nine feet wide, the costume requires handling by three people once it is lowered by pulley over the dancer's head - as well as the continuous flutter of the purest, crystal-shaped snowflakes.&quot;, 'ques1ID': 'QX000054a', 'ques2ID': 'QX000054b', 'ques3ID': 'QX000054c', 'ques4ID': 'QX000054d', 'ques5ID': 'QX000054e', 'ques1text': 'In what city did The Nutcracker originate as an American tradition?', 'ques2text': 'How many musicians are needed for a production of The Nutcracker?', 'ques3text': 'How does the author describe the visual effects?', 'ques4text': 'Why is Mother Ginger noticeable?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Philadelphia; Chicago; New York; Los Angeles', 'ques2label': ' 50; 90; 62; 32', 'ques3label': 'Outdated and lacking color; Too bright and over the top; Mediocre and boring; Extraordinarily grand', 'ques4label': 'She is extremely beautiful.; She is extremely ugly.; She is extremely small.; She is extremely large.', 'ques5label': 'Many theatres around the world put on renditions of The Nutcracker at Christmas time.; Many people dislike The Nutcracker because they consider the dancing to be boring.; The Nutcracker is an outdated show that continues to run in New York City.; Performed in the David H. Koch Theatre in New York City, The Nutcracker is a captivating show for all.', 'ques1correct': 3, 'ques2correct': 3, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000054a', 'feedback2ID': 'FQX000054b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0055', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000055a', 'pas2ID': 'RX000055b', 'pas3ID': 'RX000055c', 'pas4ID': 'RX000055d', 'pas1text': 'Coffey Park, a neighborhood now an ashen expanse of melted automobiles and charred foundations, has come to symbolize the destructive power of the fires ravaging Northern California. And yet the neighborhood wasn\'t designated at the highest risk for wildfires, pointing to the challenges in predicting fire behavior and the limitations of California\'s system for pinpointing wildfire danger in dense, urbanized areas. &quot;We just learned a', 'pas2text': 'wildfire can plow through a city,&quot; said Lynda Hopkins, a supervisor for Sonoma County, which includes Santa Rosa, a city of 175,000 about 60 miles north of San Francisco. Crews continued to battle 13 large wildfires Wednesday that have charred more than 200,000 acres, state officials said, and the death toll climbed to 42. Cooler temperatures and more humidity this week were helping those on the fire line. California has the most', 'pas3text': 'extensive statewide system in the U.S. for mapping wildfire risk. The program, which dates to the 1980s, looks at past wildfire behavior, weather patterns, terrain and the presence of fire-prone vegetation. In the highest-risk areas, the state lays out requirements for any new construction: fire-resistant building codes; wider roads for emergency access; and mandatory disclosures of fire risk in real-estate transactions. ', 'pas4text': &quot;Wildfire researchers who have studied the state's system, administered by the California Department of Forestry and Fire Protection, known as Cal Fire, say the maps don't reflect the risks posed by specific types of development in the path of wildfire, such as older homes with flammable shingles. Dave Sapsis, a research scientist with Cal Fire's mapping program, acknowledged the maps have some limitations.&quot;, 'ques1ID': 'QX000055a', 'ques2ID': 'QX000055b', 'ques3ID': 'QX000055c', 'ques4ID': 'QX000055d', 'ques5ID': 'QX000055e', 'ques1text': 'How did the destruction to Coffey Park point to the challenges of predicting fire behavior?', 'ques2text': 'How many wildfires were burning?', 'ques3text': 'How does the program in California help to protect people from fires?', 'ques4text': 'What is one limitation that the maps have?', 'ques5text': 'What is the main idea of the text?', 'ques1label': &quot; It was a model neighborhood used to study the ways that fires spread.; The materials used in the construction there were not previously believed to be flammable.; It was destroyed in a fire even though it wasn't noted to be at the highest risk for a wildfire.; Its location in Northern California had never had any wildfires before this one.&quot;, 'ques2label': ' 13; 42; 175; 60', 'ques3label': 'By building shelters for residents to evacuate to in the case of a fire; By providing training for all residents of fire-prone areas on surviving fires; By prohibiting housing from being built in high-risk areas; By requiring that new construction meet certain standards for fire resistance', 'ques4label': 'They are severely outdated.; They incorrectly identify areas as having high risk.; They are lacking large areas of the state.; They donÕt show some of the risks of older homes.', 'ques5label': 'Researchers in California are currently working on building a mapping system to better understand and predict wildfires.; Coffey Park was the first neighborhood in California to be decimated by wildfires in several years.; With CaliforniaÕs new fire-tracking system, it is predicted that wildfires will be able to be 100% controlled in the coming 5 years.; Wildfires are a destructive force in California, and while studied closely, they are still a difficult force to predict.', 'ques1correct': 3, 'ques2correct': 1, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000055a', 'feedback2ID': 'FQX000055b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}, {'setID': 'GRD12_SET0056', 'trialType': 'test', 'trialproperties': 'pcount4;qcount5;mqcount2;randomizedpassages0;randomizedquestions0', 'pas1ID': 'RX000056a', 'pas2ID': 'RX000056b', 'pas3ID': 'RX000056c', 'pas4ID': 'RX000056d', 'pas1text': 'On August 3, 1492, Columbus set sail from Spain to find an all-water route to Asia. On October 12, more than two months later, Columbus landed on an island in the Bahamas that he called San Salvador; the natives called it Guanahani. For nearly five months, Columbus explored the Caribbean, particularly the islands of Juana (Cuba) and Hispaniola (Santo Domingo), before returning to Spain. He left thirty-nine men to build a settlement', 'pas2text': 'called La Navidad in present-day Haiti. He also kidnapped several Native Americans (between 10 and 25) to take back to Spain - only eight survived. Columbus brought back small amounts of gold as well as native birds and plants to show the richness of the continent he believed to be Asia. When Columbus arrived back in Spain on March 15, 1493, he immediately wrote a letter announcing his discoveries to King Ferdinand and Queen Isabella,', 'pas3text': &quot;who had helped finance his trip. The letter was written in Spanish and sent to Rome, where it was printed in Latin by Stephan Plannck. Plannck mistakenly left Queen Isabella's name out of the pamphlet's introduction but quickly realized his error and reprinted the pamphlet a few days later. The copy shown here is the second, corrected edition of the pamphlet. The Latin printing of this letter announced the existence of the American&quot;, 'pas4text': 'continent throughout Europe. &quot;I discovered many islands inhabited by numerous people. I took possession of all of them for our most fortunate King by making public proclamation and unfurling his standard, no one making any resistance,&quot; Columbus wrote. In addition to announcing his momentous discovery, Columbus\'s letter also provides observations of the native people\'s culture and lack of weapons.', 'ques1ID': 'QX000056a', 'ques2ID': 'QX000056b', 'ques3ID': 'QX000056c', 'ques4ID': 'QX000056d', 'ques5ID': 'QX000056e', 'ques1text': 'Where did Columbus land on his voyage to Asia?', 'ques2text': 'What did Columbus take back to Spain?', 'ques3text': 'What mistake did the printer of the pamphlet make?', 'ques4text': 'How did Columbus claim possession of the land he found?', 'ques5text': 'What is the main idea of the text?', 'ques1label': ' Europe; Africa; Asia; The Caribbean', 'ques2label': ' Natives who wanted to leave; Large mammals he discovered; People he had kidnapped; All of his men', 'ques3label': &quot;He did not include all of the details from the letter.; He left large ink stains on the pamphlet.; He printed the pamphlet in Latin instead of Spanish.; He forgot to include Queen Isabella's name.&quot;, 'ques4label': 'By building a new country on the land; By writing a letter to the King; By purchasing the land from the native people; By making a public proclamation', 'ques5label': 'When Columbus returned to Spain in 1493, he wrote a letter to the king and queen in Latin detailing his explorations.; Columbus spent 5 months exploring the Bahamas before realizing that this new land was not Asia, where he sailed next.; After landing in the Bahamas, Columbus set up a permanent settlement there with his men where he would live the rest of his life.; After landing in the Bahamas instead of Asia, Columbus explored these lands before eventually returning to Spain with some treasures and people he found there.', 'ques1correct': 4, 'ques2correct': 3, 'ques3correct': 4, 'ques4correct': 4, 'ques5correct': 4, 'feedback1ID': 'FQX000056a', 'feedback2ID': 'FQX000056b', 'feedback1text': 'How familiar were you with the topic of the passage you just read?', 'feedback2text': 'How interesting was the previous reading passage?', 'feedback1label': 'Very familiar;Familiar;Neither familiar nor unfamiliar;Unfamiliar;Very Unfamiliar', 'feedback2label': 'Very interesting;Interesting;Neither interesting nor uninteresting;Uninteresting;Very Uninteresting'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="stimuli/stimulus_set.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="set_file_check" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="get_fonts">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'stimulus_file': 'stimuli/stimulus_set', 'practiceTrials': 1, 'testTrials': 8, 'testFonts': 'Arial;Georgia;Merriweather;Open Sans;Poppins;Roboto;Source Serif Pro;Times', 'practiceFonts': 'Open Sans', 'spacingLevels': '-0.05;0;0.05'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="blocks/blocks_1.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="get_fonts" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="merge_fonts"/>
    <LoopInitiator loopType="TrialHandler" name="loop_fonts">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="fontCount" valType="num"/>
      <Param name="name" updates="None" val="loop_fonts" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="loop_spacings">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="linkCount" valType="num"/>
      <Param name="name" updates="None" val="loop_spacings" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="screens">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="screenCount" valType="num"/>
      <Param name="name" updates="None" val="screens" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="checkResources"/>
    <LoopTerminator name="screens"/>
    <LoopTerminator name="loop_spacings"/>
    <LoopTerminator name="loop_fonts"/>
    <LoopTerminator name="get_fonts"/>
    <LoopTerminator name="set_file_check"/>
    <LoopInitiator loopType="TrialHandler" name="screenScaleTrials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="num"/>
      <Param name="name" updates="None" val="screenScaleTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="creditCardInstructions"/>
    <Routine name="screenScale"/>
    <Routine name="scaleBlank"/>
    <LoopTerminator name="screenScaleTrials"/>
    <Routine name="generalInstructions2"/>
    <Routine name="informedConsent1"/>
    <Routine name="seatingInstructions"/>
    <LoopInitiator loopType="TrialHandler" name="stimulus_listD">
      <Param name="Selected rows" updates="None" val="0" valType="str"/>
      <Param name="conditions" updates="None" val="[{'setID': 'demographics', 'trialType': 'survey', 'trialproperties': 'likertcount1;textboxcount14;randomizedquestions0', 'ques1ID': 'post_survey_question', 'ques1text': 'hyperlinkPreference;If you read information in the hyperlinks, did they help you understand the main article better?', 'ques1label': 'Strongly Agree;Agree;Neutral;Disagree;Strongly Disagree', 'textbox1ID': 'textbox1', 'textbox2ID': 'textbox2', 'textbox3ID': 'textbox3', 'textbox4ID': 'textbox4', 'textbox5ID': 'textbox5', 'textbox6ID': 'textbox6', 'textbox7ID': 'textbox7', 'textbox8ID': 'textbox8', 'textbox9ID': 'textbox9', 'textbox10ID': 'textbox10', 'textbox11ID': 'textbox11', 'textbox12ID': 'textbox12', 'textbox13ID': 'textbox13', 'textbox14ID': 'textbox14', 'textbox1text': 'vision;Do you have normal or corrected vision to 20/20?', 'textbox2text': 'visionCorrectionType;If your vision is corrected, how was it corrected (glasses, lenses, surgery etc.)?', 'textbox3text': 'hospitalStay;Have you had to stay at the hospital overnight in the last year?', 'textbox4text': 'readingArticles;Do you feel comfortable with reading articles in English?', 'textbox5text': 'disabilities;Have you ever been diagnosed with a reading or learning disability (ex: dyslexia)? If yes, which one and how long ago?', 'textbox6text': 'device;What device are you currently using to participate in this study?', 'textbox7text': 'surroundings;Please describe your current surroundings. For example, are you indoors/outside, by a window, under natural or artificial light, is the room light/dark, is the room small/large?', 'textbox8text': 'computerClasses;Have you taken computer classes?', 'textbox9text': 'computerUse;How often do you use a computer?', 'textbox10text': 'glasses;Do you wear glasses?', 'textbox11text': 'digitalReadingChallenges;Do you have any stories you would like to share when you had any challenges reading on a digital device?', 'textbox12text': 'age;Age', 'textbox13text': 'occupation;Occupation', 'textbox14text': 'degree;What is the highest degree that you have earned?'}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': None, 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}, {'setID': None, 'trialType': None, 'trialproperties': ' ', 'ques1ID': None, 'ques1text': None, 'ques1label': None, 'textbox1ID': None, 'textbox2ID': None, 'textbox3ID': None, 'textbox4ID': None, 'textbox5ID': None, 'textbox6ID': None, 'textbox7ID': None, 'textbox8ID': None, 'textbox9ID': None, 'textbox10ID': None, 'textbox11ID': None, 'textbox12ID': None, 'textbox13ID': None, 'textbox14ID': None, 'textbox1text': None, 'textbox2text': None, 'textbox3text': None, 'textbox4text': None, 'textbox5text': None, 'textbox6text': None, 'textbox7text': None, 'textbox8text': None, 'textbox9text': None, 'textbox10text': None, 'textbox11text': None, 'textbox12text': None, 'textbox13text': None, 'textbox14text': None}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="stimuli/demographics.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="stimulus_listD" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="setTrialParametersDemographic"/>
    <Routine name="demographicInstructionsRoutine"/>
    <LoopInitiator loopType="TrialHandler" name="textbox_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="textboxCount" valType="num"/>
      <Param name="name" updates="None" val="textbox_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="textBoxQuestions"/>
    <LoopTerminator name="textbox_trials"/>
    <LoopTerminator name="stimulus_listD"/>
    <Routine name="screening_instructions"/>
    <LoopInitiator loopType="TrialHandler" name="snellen_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="4" valType="num"/>
      <Param name="name" updates="None" val="snellen_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pre_snellen"/>
    <Routine name="snellen_instructions"/>
    <Routine name="snellen_test"/>
    <Routine name="waitPopup"/>
    <LoopTerminator name="snellen_trials"/>
    <Routine name="memory_general_instructions"/>
    <LoopInitiator loopType="TrialHandler" name="memory_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="stimuli/memory/memory_stimulus_sheet.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="memory_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="memory_initialize"/>
    <Routine name="memory_specific_instructions"/>
    <Routine name="memory_display_list"/>
    <LoopInitiator loopType="TrialHandler" name="memory_answer_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="answerCount" valType="num"/>
      <Param name="name" updates="None" val="memory_answer_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="memory_response"/>
    <Routine name="memory_interval"/>
    <LoopTerminator name="memory_answer_loop"/>
    <LoopTerminator name="memory_trials"/>
    <Routine name="general_instructions"/>
    <Routine name="teaching_links"/>
    <Routine name="practiceInstructions"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'exp_blocks': 'stimuli/newsetformat.xlsx', 'practiceTrials': 1, 'testTrials': 6, 'fontsInvolved': 'RobotoFlex_wght200;RobotoFlex_wght400;RobotoFlex_wght600'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="blocks/blocks_1.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="setBlockParameters"/>
    <LoopInitiator loopType="TrialHandler" name="stimulus_list">
      <Param name="Selected rows" updates="None" val="$passageSetOrder" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$stimulus_file_counterbalanced" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="stimulus_list" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="setTrialParameters"/>
    <LoopInitiator loopType="TrialHandler" name="word_list_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$linksheet" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="word_list_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="getWords"/>
    <LoopTerminator name="word_list_loop"/>
    <Routine name="instruction_proxy"/>
    <LoopInitiator loopType="TrialHandler" name="first_textbox_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="proxyCount" valType="num"/>
      <Param name="name" updates="None" val="first_textbox_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_textbox"/>
    <LoopTerminator name="first_textbox_trials"/>
    <Routine name="instructions_passage"/>
    <LoopInitiator loopType="TrialHandler" name="popup_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="loopCount" valType="num"/>
      <Param name="name" updates="None" val="popup_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="displayArticle"/>
    <LoopInitiator loopType="TrialHandler" name="popup_selection">
      <Param name="Selected rows" updates="None" val="$popupIndex" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$linksheet" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="enablePopup" valType="num"/>
      <Param name="name" updates="None" val="popup_selection" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="displayPopup"/>
    <LoopTerminator name="popup_selection"/>
    <Routine name="waitPopup"/>
    <LoopTerminator name="popup_loop"/>
    <Routine name="instructions_questions"/>
    <LoopInitiator loopType="TrialHandler" name="question_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="questionCount" valType="num"/>
      <Param name="name" updates="None" val="question_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="displayQuestions"/>
    <LoopTerminator name="question_trials"/>
    <LoopInitiator loopType="TrialHandler" name="feedback_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="feedbackCount" valType="num"/>
      <Param name="name" updates="None" val="feedback_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="displayFeedbackSurvey"/>
    <LoopTerminator name="feedback_trials"/>
    <Routine name="findFastest"/>
    <LoopTerminator name="stimulus_list"/>
    <LoopTerminator name="blocks"/>
    <Routine name="preferenceInstructionsRoutine"/>
    <Routine name="font_preference"/>
    <Routine name="hyperlink_preference"/>
    <LoopInitiator loopType="TrialHandler" name="post_engagement_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="6" valType="num"/>
      <Param name="name" updates="None" val="post_engagement_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="post_engagement"/>
    <LoopTerminator name="post_engagement_loop"/>
    <LoopInitiator loopType="TrialHandler" name="post_survey_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="num"/>
      <Param name="name" updates="None" val="post_survey_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="displayDemographicQuestions"/>
    <LoopTerminator name="post_survey_loop"/>
    <Routine name="trouble_with_test"/>
    <Routine name="writeDataToFile"/>
    <Routine name="finalInstructions"/>
  </Flow>
</PsychoPy2experiment>
